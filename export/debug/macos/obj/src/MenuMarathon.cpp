// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_Marathon_Substate
#include <Marathon_Substate.h>
#endif
#ifndef INCLUDED_MenuMarathon
#include <MenuMarathon.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_SongTitles
#include <SongTitles.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e23449fe8f361aa7_35_new,"MenuMarathon","new",0x07b2cd67,"MenuMarathon.new","MenuMarathon.hx",35,0x7d2a1be9)
HX_LOCAL_STACK_FRAME(_hx_pos_e23449fe8f361aa7_163_create,"MenuMarathon","create",0x230d0855,"MenuMarathon.create","MenuMarathon.hx",163,0x7d2a1be9)
HX_LOCAL_STACK_FRAME(_hx_pos_e23449fe8f361aa7_63_create,"MenuMarathon","create",0x230d0855,"MenuMarathon.create","MenuMarathon.hx",63,0x7d2a1be9)
static const int _hx_array_data_58008df5_6[] = {
	(int)16711680,(int)1442840575,(int)-1426063361,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e23449fe8f361aa7_185_update,"MenuMarathon","update",0x2e032762,"MenuMarathon.update","MenuMarathon.hx",185,0x7d2a1be9)
HX_LOCAL_STACK_FRAME(_hx_pos_e23449fe8f361aa7_254_changeDiff,"MenuMarathon","changeDiff",0x483e536e,"MenuMarathon.changeDiff","MenuMarathon.hx",254,0x7d2a1be9)
HX_LOCAL_STACK_FRAME(_hx_pos_e23449fe8f361aa7_290_changeSelection,"MenuMarathon","changeSelection",0x095f8443,"MenuMarathon.changeSelection","MenuMarathon.hx",290,0x7d2a1be9)
HX_LOCAL_STACK_FRAME(_hx_pos_e23449fe8f361aa7_327_loadCurrent,"MenuMarathon","loadCurrent",0x8b3f36ba,"MenuMarathon.loadCurrent","MenuMarathon.hx",327,0x7d2a1be9)
HX_LOCAL_STACK_FRAME(_hx_pos_e23449fe8f361aa7_350_saveCurrent,"MenuMarathon","saveCurrent",0x1441a683,"MenuMarathon.saveCurrent","MenuMarathon.hx",350,0x7d2a1be9)
HX_LOCAL_STACK_FRAME(_hx_pos_e23449fe8f361aa7_359_loadPreset,"MenuMarathon","loadPreset",0x8f77a3fe,"MenuMarathon.loadPreset","MenuMarathon.hx",359,0x7d2a1be9)
HX_LOCAL_STACK_FRAME(_hx_pos_e23449fe8f361aa7_370_savePreset,"MenuMarathon","savePreset",0x23060055,"MenuMarathon.savePreset","MenuMarathon.hx",370,0x7d2a1be9)
HX_LOCAL_STACK_FRAME(_hx_pos_e23449fe8f361aa7_44_boot,"MenuMarathon","boot",0xacd9ed4b,"MenuMarathon.boot","MenuMarathon.hx",44,0x7d2a1be9)
HX_LOCAL_STACK_FRAME(_hx_pos_e23449fe8f361aa7_48_boot,"MenuMarathon","boot",0xacd9ed4b,"MenuMarathon.boot","MenuMarathon.hx",48,0x7d2a1be9)
HX_LOCAL_STACK_FRAME(_hx_pos_e23449fe8f361aa7_49_boot,"MenuMarathon","boot",0xacd9ed4b,"MenuMarathon.boot","MenuMarathon.hx",49,0x7d2a1be9)
HX_LOCAL_STACK_FRAME(_hx_pos_e23449fe8f361aa7_53_boot,"MenuMarathon","boot",0xacd9ed4b,"MenuMarathon.boot","MenuMarathon.hx",53,0x7d2a1be9)

void MenuMarathon_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_e23449fe8f361aa7_35_new)
HXLINE(  57)		this->intendedScore = 0;
HXLINE(  56)		this->lerpScore = 0;
HXLINE(  51)		this->songs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  46)		this->selectable = false;
HXLINE(  45)		this->camLerp = ((Float)0.1);
HXLINE(  42)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,null(),null());
HXDLIN(  42)		::String library = null();
HXDLIN(  42)		this->side = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Mara_Bottom",e7,1a,40,43)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  41)		this->gradientBar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null())->makeGraphic(::flixel::FlxG_obj::width,300,-5635926,null(),null());
HXLINE(  40)		::String library1 = null();
HXDLIN(  40)		this->checker =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Mara_Checker",b9,fb,aa,43)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),((Float)0.2),((Float)0.2),true,true,null(),null());
HXLINE(  39)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-89,null(),null());
HXDLIN(  39)		::String library2 = null();
HXDLIN(  39)		this->bg = _hx_tmp1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("MaraBG_Main",90,6a,db,3c)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE(  35)		super::__construct(TransIn,TransOut);
            	}

Dynamic MenuMarathon_obj::__CreateEmpty() { return new MenuMarathon_obj; }

void *MenuMarathon_obj::_hx_vtable = 0;

Dynamic MenuMarathon_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuMarathon_obj > _hx_result = new MenuMarathon_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MenuMarathon_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x40e1e0b5) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x40e1e0b5;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void MenuMarathon_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MenuMarathon,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_e23449fe8f361aa7_163_create)
HXLINE( 163)			_gthis->selectable = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_e23449fe8f361aa7_63_create)
HXLINE(  62)		 ::MenuMarathon _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  64)		::MenuMarathon_obj::substated = false;
HXLINE(  66)		this->loadCurrent();
HXLINE(  68)		::flixel::FlxG_obj::game->set_scaleX(( (Float)(1) ));
HXLINE(  69)		::flixel::FlxG_obj::game->set_x(( (Float)(0) ));
HXLINE(  70)		::flixel::FlxG_obj::game->set_scaleY(( (Float)(1) ));
HXLINE(  71)		::flixel::FlxG_obj::game->set_y(( (Float)(0) ));
HXLINE(  73)		::MenuMarathon_obj::no = false;
HXLINE(  75)		this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(  76)		this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(  78)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  80)		::String library = null();
HXDLIN(  80)		::Array< ::String > initSonglist = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("freeplaySonglist",73,3b,dc,de)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  82)		{
HXLINE(  82)			int _g = 0;
HXDLIN(  82)			int _g1 = initSonglist->length;
HXDLIN(  82)			while((_g < _g1)){
HXLINE(  82)				_g = (_g + 1);
HXDLIN(  82)				int i = (_g - 1);
HXLINE(  84)				::Array< ::String > data = initSonglist->__get(i).split(HX_(":",3a,00,00,00));
HXLINE(  85)				::Array< ::Dynamic> _hx_tmp = this->songs;
HXDLIN(  85)				_hx_tmp->push( ::SongTitles_obj::__alloc( HX_CTX ,data->__get(0)));
            			}
            		}
HXLINE(  88)		this->bg->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  89)		this->bg->scrollFactor->set_y(((Float)0.03));
HXLINE(  90)		 ::flixel::FlxSprite _hx_tmp = this->bg;
HXDLIN(  90)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->bg->get_width() * ((Float)1.1))),null());
HXLINE(  91)		this->bg->updateHitbox();
HXLINE(  92)		this->bg->screenCenter(null());
HXLINE(  93)		this->bg->set_antialiasing(true);
HXLINE(  94)		this->add(this->bg);
HXLINE(  96)		this->gradientBar = ::flixel::util::FlxGradient_obj::createGradientFlxSprite(::Math_obj::round(( (Float)(::flixel::FlxG_obj::width) )),512,::Array_obj< int >::fromData( _hx_array_data_58008df5_6,3),1,90,true);
HXLINE(  97)		 ::flixel::FlxSprite _hx_tmp1 = this->gradientBar;
HXDLIN(  97)		int _hx_tmp2 = ::flixel::FlxG_obj::height;
HXDLIN(  97)		_hx_tmp1->set_y((( (Float)(_hx_tmp2) ) - this->gradientBar->get_height()));
HXLINE(  98)		this->add(this->gradientBar);
HXLINE(  99)		this->gradientBar->scrollFactor->set(0,0);
HXLINE( 101)		this->add(this->checker);
HXLINE( 102)		this->checker->scrollFactor->set(((Float)0.07),((Float)0.07));
HXLINE( 104)		this->grpSongs =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 105)		this->add(this->grpSongs);
HXLINE( 107)		{
HXLINE( 107)			int _g2 = 0;
HXDLIN( 107)			int _g3 = this->songs->length;
HXDLIN( 107)			while((_g2 < _g3)){
HXLINE( 107)				_g2 = (_g2 + 1);
HXDLIN( 107)				int i = (_g2 - 1);
HXLINE( 109)				 ::Alphabet songText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),this->songs->__get(i).StaticCast<  ::SongTitles >()->songName,true,false);
HXLINE( 110)				songText->itemType = HX_("Vertical",96,78,c7,43);
HXLINE( 111)				songText->targetY = ( (Float)(i) );
HXLINE( 112)				this->grpSongs->add(songText).StaticCast<  ::Alphabet >();
            			}
            		}
HXLINE( 119)		this->side->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 120)		this->side->scrollFactor->set_y(( (Float)(0) ));
HXLINE( 121)		this->side->set_antialiasing(true);
HXLINE( 122)		this->side->screenCenter(null());
HXLINE( 123)		this->add(this->side);
HXLINE( 125)		this->side->set_y(( (Float)(::flixel::FlxG_obj::height) ));
HXLINE( 126)		 ::flixel::FlxSprite _hx_tmp3 = this->side;
HXDLIN( 126)		int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 126)		Float _hx_tmp5 = (( (Float)(_hx_tmp4) ) - this->side->get_height());
HXDLIN( 126)		::flixel::tweens::FlxTween_obj::tween(_hx_tmp3, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),_hx_tmp5)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 128)		::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 129)		::flixel::FlxG_obj::camera->set_zoom(((Float)0.6));
HXLINE( 130)		::flixel::FlxG_obj::camera->set_alpha(( (Float)(0) ));
HXLINE( 131)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)
            			->setFixed(1,HX_("zoom",13,a3,f8,50),1)),((Float)0.7), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 133)		::String library1 = null();
HXDLIN( 133)		::String diffTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("difficulties",59,c7,5e,02)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1);
HXDLIN( 133)		 ::flixel::graphics::frames::FlxAtlasFrames diffTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(diffTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("difficulties",59,c7,5e,02)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXLINE( 134)		this->sprDifficulty =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,130,0,null());
HXLINE( 135)		this->sprDifficulty->set_frames(diffTex1);
HXLINE( 136)		this->sprDifficulty->animation->addByPrefix(HX_("noob",94,13,0a,49),HX_("NOOB",94,db,ca,33),null(),null(),null(),null());
HXLINE( 137)		this->sprDifficulty->animation->addByPrefix(HX_("easy",02,8c,0c,43),HX_("EASY",02,54,cd,2d),null(),null(),null(),null());
HXLINE( 138)		this->sprDifficulty->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("NORMAL",27,1e,ec,e2),null(),null(),null(),null());
HXLINE( 139)		this->sprDifficulty->animation->addByPrefix(HX_("hard",eb,2e,08,45),HX_("HARD",eb,f6,c8,2f),null(),null(),null(),null());
HXLINE( 140)		this->sprDifficulty->animation->addByPrefix(HX_("expert",ea,fa,75,c4),HX_("EXPERT",ea,a6,f8,76),null(),null(),null(),null());
HXLINE( 141)		this->sprDifficulty->animation->addByPrefix(HX_("insane",aa,36,da,9d),HX_("INSANE",aa,e2,5c,50),null(),null(),null(),null());
HXLINE( 142)		this->sprDifficulty->animation->play(HX_("easy",02,8c,0c,43),null(),null(),null());
HXLINE( 143)		this->sprDifficulty->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 144)		 ::flixel::FlxSprite _hx_tmp6 = this->sprDifficulty;
HXDLIN( 144)		int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN( 144)		_hx_tmp6->set_y(((( (Float)(_hx_tmp7) ) - this->sprDifficulty->get_height()) - ( (Float)(8) )));
HXLINE( 145)		this->add(this->sprDifficulty);
HXLINE( 147)		this->scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),5,0,HX_("",00,00,00,00),32,null());
HXLINE( 148)		this->scoreText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 149)		this->scoreText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 150)		{
HXLINE( 150)			 ::flixel::text::FlxText _this = this->scoreText;
HXDLIN( 150)			_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 150)			_this->set_borderColor(-16777216);
HXDLIN( 150)			_this->set_borderSize(( (Float)(5) ));
HXDLIN( 150)			_this->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 151)		this->scoreText->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 152)		this->scoreText->set_y((this->sprDifficulty->y - ( (Float)(38) )));
HXLINE( 153)		this->add(this->scoreText);
HXLINE( 155)		::flixel::tweens::FlxTween_obj::tween(this->scoreText, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 156)		::flixel::tweens::FlxTween_obj::tween(this->sprDifficulty, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 158)		this->changeSelection(null());
HXLINE( 159)		this->changeDiff(null());
HXLINE( 161)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.7), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 166)		if (::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE( 167)			::String _hx_switch_0 = ( (::String)(::MainVariables_obj::_variables->__Field(HX_("music",a5,d0,5a,10),::hx::paccDynamic)) );
            			if (  (_hx_switch_0==HX_("classic",12,52,91,69)) ){
HXLINE( 170)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 170)				::String library = null();
HXDLIN( 170)				::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN( 170)				_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE( 171)				::Conductor_obj::changeBPM(( (Float)(102) ));
HXLINE( 169)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("funky",ad,f7,88,08)) ){
HXLINE( 173)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 173)				::String library = null();
HXDLIN( 173)				::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("funkyMenu",ec,43,55,b5)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN( 173)				_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE( 174)				::Conductor_obj::changeBPM(( (Float)(140) ));
HXLINE( 172)				goto _hx_goto_3;
            			}
            			_hx_goto_3:;
            		}
HXLINE( 177)		this->super::create();
HXLINE( 180)		::DiscordClient_obj::changePresence(HX_("Selecting anything for a marathon.",be,af,f0,1d),null(),null(),null(),null());
            	}


void MenuMarathon_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_e23449fe8f361aa7_185_update)
HXLINE( 186)		{
HXLINE( 186)			 ::flixel::addons::display::FlxBackdrop _g = this->checker;
HXDLIN( 186)			_g->set_x((_g->x - (((Float)-0.67) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 187)		{
HXLINE( 187)			 ::flixel::addons::display::FlxBackdrop _g1 = this->checker;
HXDLIN( 187)			_g1->set_y((_g1->y - (((Float)0.2) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 189)		this->super::update(elapsed);
HXLINE( 191)		if ((::flixel::FlxG_obj::sound->music->_volume < ((((Float)0.7) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) )) / ( (Float)(100) )))) {
HXLINE( 193)			 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 193)			_g->set_volume((_g->_volume + (((((Float)0.5) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) )) / ( (Float)(100) )) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 196)		Float a = ( (Float)(this->lerpScore) );
HXDLIN( 196)		this->lerpScore = ::Math_obj::floor((a + ((((Float)0.5) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(this->intendedScore) ) - a))));
HXLINE( 198)		if ((::Math_obj::abs(( (Float)((this->lerpScore - this->intendedScore)) )) <= 10)) {
HXLINE( 199)			this->lerpScore = this->intendedScore;
            		}
HXLINE( 201)		this->scoreText->set_text((HX_("PERSONAL BEST:",36,ce,e9,ee) + this->lerpScore));
HXLINE( 203)		bool upP = ::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE( 204)		bool downP = ::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE( 205)		bool accepted = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE( 206)		bool back = ::PlayerSettings_obj::player1->controls->_back->check();
HXLINE( 208)		bool _hx_tmp;
HXDLIN( 208)		if (!(::MenuMarathon_obj::substated)) {
HXLINE( 208)			_hx_tmp = this->selectable;
            		}
            		else {
HXLINE( 208)			_hx_tmp = false;
            		}
HXDLIN( 208)		if (_hx_tmp) {
HXLINE( 210)			if (upP) {
HXLINE( 211)				this->changeSelection(-1);
            			}
HXLINE( 212)			if (downP) {
HXLINE( 213)				this->changeSelection(1);
            			}
HXLINE( 215)			if (::PlayerSettings_obj::player1->controls->_leftP->check()) {
HXLINE( 216)				this->changeDiff(-1);
            			}
HXLINE( 217)			if (::PlayerSettings_obj::player1->controls->_rightP->check()) {
HXLINE( 218)				this->changeDiff(1);
            			}
HXLINE( 220)			if (back) {
HXLINE( 222)				::MenuMarathon_obj::substated = true;
HXLINE( 224)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 224)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null());
HXDLIN( 224)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 226)				 ::flixel::FlxState _hx_tmp2 = ::flixel::FlxG_obj::game->_state;
HXDLIN( 226)				_hx_tmp2->openSubState( ::Marathon_Substate_obj::__alloc( HX_CTX ));
            			}
HXLINE( 229)			if (accepted) {
HXLINE( 231)				::Array< ::String > _hx_tmp = ::PlayState_obj::difficultyPlaylist;
HXDLIN( 231)				_hx_tmp->push(::Std_obj::string(::MenuMarathon_obj::curDifficulty));
HXLINE( 232)				::Array< ::String > _hx_tmp1 = ::PlayState_obj::storyPlaylist;
HXDLIN( 232)				_hx_tmp1->push(::Std_obj::string(this->songs->__get(::MenuMarathon_obj::curSelected).StaticCast<  ::SongTitles >()->songName.toLowerCase()));
HXLINE( 234)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 234)				::String _hx_tmp3 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 234)				_hx_tmp2->play(_hx_tmp3,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 236)				::MenuMarathon_obj::saveCurrent();
            			}
            		}
HXLINE( 239)		 ::flixel::text::FlxText _hx_tmp1 = this->scoreText;
HXDLIN( 239)		Float _hx_tmp2 = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ));
HXDLIN( 239)		_hx_tmp1->set_x((_hx_tmp2 - (this->scoreText->get_width() / ( (Float)(2) ))));
HXLINE( 241)		if (::MenuMarathon_obj::no) {
HXLINE( 243)			this->bg->kill();
HXLINE( 244)			this->side->kill();
HXLINE( 245)			this->gradientBar->kill();
HXLINE( 246)			this->checker->kill();
HXLINE( 247)			this->sprDifficulty->kill();
HXLINE( 248)			this->scoreText->kill();
HXLINE( 249)			this->grpSongs->clear();
            		}
            	}


void MenuMarathon_obj::changeDiff(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_e23449fe8f361aa7_254_changeDiff)
HXLINE( 255)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::MenuMarathon >();
HXDLIN( 255)		::MenuMarathon_obj::curDifficulty = (::MenuMarathon_obj::curDifficulty + change);
HXLINE( 257)		if ((::MenuMarathon_obj::curDifficulty < 0)) {
HXLINE( 258)			::MenuMarathon_obj::curDifficulty = 5;
            		}
HXLINE( 259)		if ((::MenuMarathon_obj::curDifficulty > 5)) {
HXLINE( 260)			::MenuMarathon_obj::curDifficulty = 0;
            		}
HXLINE( 263)		this->intendedScore = ::Std_obj::_hx_int(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("marathonScore",5c,2a,ba,bc),::hx::paccDynamic)) ));
HXLINE( 266)		switch((int)(::MenuMarathon_obj::curDifficulty)){
            			case (int)0: {
HXLINE( 269)				this->sprDifficulty->animation->play(HX_("noob",94,13,0a,49),null(),null(),null());
            			}
            			break;
            			case (int)1: {
HXLINE( 271)				this->sprDifficulty->animation->play(HX_("easy",02,8c,0c,43),null(),null(),null());
            			}
            			break;
            			case (int)2: {
HXLINE( 273)				this->sprDifficulty->animation->play(HX_("normal",27,72,69,30),null(),null(),null());
            			}
            			break;
            			case (int)3: {
HXLINE( 275)				this->sprDifficulty->animation->play(HX_("hard",eb,2e,08,45),null(),null(),null());
            			}
            			break;
            			case (int)4: {
HXLINE( 277)				this->sprDifficulty->animation->play(HX_("expert",ea,fa,75,c4),null(),null(),null());
            			}
            			break;
            			case (int)5: {
HXLINE( 279)				this->sprDifficulty->animation->play(HX_("insane",aa,36,da,9d),null(),null(),null());
            			}
            			break;
            		}
HXLINE( 282)		this->sprDifficulty->set_alpha(( (Float)(0) ));
HXLINE( 284)		 ::flixel::FlxSprite _hx_tmp1 = this->sprDifficulty;
HXDLIN( 284)		int _hx_tmp2 = ::flixel::FlxG_obj::height;
HXDLIN( 284)		_hx_tmp1->set_y(((( (Float)(_hx_tmp2) ) - this->sprDifficulty->get_height()) - ( (Float)(38) )));
HXLINE( 285)		 ::flixel::FlxSprite _hx_tmp3 = this->sprDifficulty;
HXDLIN( 285)		int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 285)		::flixel::tweens::FlxTween_obj::tween(_hx_tmp3, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),((( (Float)(_hx_tmp4) ) - this->sprDifficulty->get_height()) - ( (Float)(8) )))
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.04),null());
HXLINE( 286)		 ::flixel::FlxSprite _hx_tmp5 = this->sprDifficulty;
HXDLIN( 286)		Float _hx_tmp6 = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ));
HXDLIN( 286)		_hx_tmp5->set_x((_hx_tmp6 - (this->sprDifficulty->get_width() / ( (Float)(2) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuMarathon_obj,changeDiff,(void))

void MenuMarathon_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_e23449fe8f361aa7_290_changeSelection)
HXLINE( 293)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 293)		::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 293)		_hx_tmp->play(_hx_tmp1,((((Float)0.4) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 295)		 ::Dynamic _hx_tmp2 = ::hx::ClassOf< ::MenuMarathon >();
HXDLIN( 295)		::MenuMarathon_obj::curSelected = (::MenuMarathon_obj::curSelected + change);
HXLINE( 297)		if ((::MenuMarathon_obj::curSelected < 0)) {
HXLINE( 298)			::MenuMarathon_obj::curSelected = (this->songs->length - 1);
            		}
HXLINE( 299)		if ((::MenuMarathon_obj::curSelected >= this->songs->length)) {
HXLINE( 300)			::MenuMarathon_obj::curSelected = 0;
            		}
HXLINE( 305)		this->intendedScore = ::Std_obj::_hx_int(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("marathonScore",5c,2a,ba,bc),::hx::paccDynamic)) ));
HXLINE( 308)		int bullShit = 0;
HXLINE( 310)		{
HXLINE( 310)			int _g = 0;
HXDLIN( 310)			::Array< ::Dynamic> _g1 = this->grpSongs->members;
HXDLIN( 310)			while((_g < _g1->length)){
HXLINE( 310)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 310)				_g = (_g + 1);
HXLINE( 312)				item->targetY = ( (Float)((bullShit - ::MenuMarathon_obj::curSelected)) );
HXLINE( 313)				bullShit = (bullShit + 1);
HXLINE( 315)				item->set_alpha(((Float)0.6));
HXLINE( 318)				if ((item->targetY == 0)) {
HXLINE( 320)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuMarathon_obj,changeSelection,(void))

void MenuMarathon_obj::loadCurrent(){
            	HX_GC_STACKFRAME(&_hx_pos_e23449fe8f361aa7_327_loadCurrent)
HXLINE( 328)		if (!(::sys::FileSystem_obj::isDirectory(HX_("presets/marathon",91,69,b4,e9)))) {
HXLINE( 329)			::sys::FileSystem_obj::createDirectory(HX_("presets/marathon",91,69,b4,e9));
            		}
HXLINE( 331)		if (!(::sys::FileSystem_obj::exists(HX_("presets/marathon/current",7b,72,a8,88)))) {
HXLINE( 333)			::MenuMarathon_obj::_marathon =  ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("songDifficulties",ce,22,1a,95),::Array_obj< ::String >::__new(0))
            				->setFixed(1,HX_("songNames",b3,d7,fe,c5),::Array_obj< ::String >::__new(0)));
HXLINE( 338)			 ::Dynamic replacer = null();
HXDLIN( 338)			::String space = null();
HXDLIN( 338)			::sys::io::File_obj::saveContent(HX_("presets/marathon/current",7b,72,a8,88),::haxe::format::JsonPrinter_obj::print(::MenuMarathon_obj::_marathon,replacer,space));
            		}
            		else {
HXLINE( 342)			::String data = ::sys::io::File_obj::getContent(HX_("presets/marathon/current",7b,72,a8,88));
HXLINE( 343)			::MenuMarathon_obj::_marathon =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
HXLINE( 344)			::PlayState_obj::difficultyPlaylist = ( (::Array< ::String >)(::MenuMarathon_obj::_marathon->__Field(HX_("songDifficulties",ce,22,1a,95),::hx::paccDynamic)) );
HXLINE( 345)			::PlayState_obj::storyPlaylist = ( (::Array< ::String >)(::MenuMarathon_obj::_marathon->__Field(HX_("songNames",b3,d7,fe,c5),::hx::paccDynamic)) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuMarathon_obj,loadCurrent,(void))

 ::Dynamic MenuMarathon_obj::_marathon;

int MenuMarathon_obj::curSelected;

bool MenuMarathon_obj::substated;

bool MenuMarathon_obj::no;

int MenuMarathon_obj::curDifficulty;

void MenuMarathon_obj::saveCurrent(){
            	HX_STACKFRAME(&_hx_pos_e23449fe8f361aa7_350_saveCurrent)
HXLINE( 351)		::MenuMarathon_obj::_marathon =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("songDifficulties",ce,22,1a,95),::PlayState_obj::difficultyPlaylist)
            			->setFixed(1,HX_("songNames",b3,d7,fe,c5),::PlayState_obj::storyPlaylist));
HXLINE( 355)		 ::Dynamic replacer = null();
HXDLIN( 355)		::String space = null();
HXDLIN( 355)		::sys::io::File_obj::saveContent(HX_("presets/marathon/current",7b,72,a8,88),::haxe::format::JsonPrinter_obj::print(::MenuMarathon_obj::_marathon,replacer,space));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MenuMarathon_obj,saveCurrent,(void))

void MenuMarathon_obj::loadPreset(::String input){
            	HX_GC_STACKFRAME(&_hx_pos_e23449fe8f361aa7_359_loadPreset)
HXLINE( 360)		::String data = ::sys::io::File_obj::getContent((HX_("presets/marathon/",7e,f5,27,94) + input));
HXLINE( 361)		::MenuMarathon_obj::_marathon =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
HXLINE( 363)		::PlayState_obj::difficultyPlaylist = ( (::Array< ::String >)(::MenuMarathon_obj::_marathon->__Field(HX_("songDifficulties",ce,22,1a,95),::hx::paccDynamic)) );
HXLINE( 364)		::PlayState_obj::storyPlaylist = ( (::Array< ::String >)(::MenuMarathon_obj::_marathon->__Field(HX_("songNames",b3,d7,fe,c5),::hx::paccDynamic)) );
HXLINE( 366)		::MenuMarathon_obj::saveCurrent();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MenuMarathon_obj,loadPreset,(void))

void MenuMarathon_obj::savePreset(::String input){
            	HX_STACKFRAME(&_hx_pos_e23449fe8f361aa7_370_savePreset)
HXLINE( 371)		::MenuMarathon_obj::_marathon =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("songDifficulties",ce,22,1a,95),::PlayState_obj::difficultyPlaylist)
            			->setFixed(1,HX_("songNames",b3,d7,fe,c5),::PlayState_obj::storyPlaylist));
HXLINE( 375)		 ::Dynamic replacer = null();
HXDLIN( 375)		::String space = null();
HXDLIN( 375)		::sys::io::File_obj::saveContent((HX_("presets/marathon/",7e,f5,27,94) + input),::haxe::format::JsonPrinter_obj::print(::MenuMarathon_obj::_marathon,replacer,space));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MenuMarathon_obj,savePreset,(void))


::hx::ObjectPtr< MenuMarathon_obj > MenuMarathon_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< MenuMarathon_obj > __this = new MenuMarathon_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< MenuMarathon_obj > MenuMarathon_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MenuMarathon_obj *__this = (MenuMarathon_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuMarathon_obj), true, "MenuMarathon"));
	*(void **)__this = MenuMarathon_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MenuMarathon_obj::MenuMarathon_obj()
{
}

void MenuMarathon_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuMarathon);
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(checker,"checker");
	HX_MARK_MEMBER_NAME(gradientBar,"gradientBar");
	HX_MARK_MEMBER_NAME(side,"side");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(songs,"songs");
	HX_MARK_MEMBER_NAME(scoreText,"scoreText");
	HX_MARK_MEMBER_NAME(lerpScore,"lerpScore");
	HX_MARK_MEMBER_NAME(intendedScore,"intendedScore");
	HX_MARK_MEMBER_NAME(grpSongs,"grpSongs");
	HX_MARK_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuMarathon_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(checker,"checker");
	HX_VISIT_MEMBER_NAME(gradientBar,"gradientBar");
	HX_VISIT_MEMBER_NAME(side,"side");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(songs,"songs");
	HX_VISIT_MEMBER_NAME(scoreText,"scoreText");
	HX_VISIT_MEMBER_NAME(lerpScore,"lerpScore");
	HX_VISIT_MEMBER_NAME(intendedScore,"intendedScore");
	HX_VISIT_MEMBER_NAME(grpSongs,"grpSongs");
	HX_VISIT_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuMarathon_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"side") ) { return ::hx::Val( side ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { return ::hx::Val( songs ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { return ::hx::Val( checker ); }
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"grpSongs") ) { return ::hx::Val( grpSongs ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { return ::hx::Val( scoreText ); }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { return ::hx::Val( lerpScore ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"changeDiff") ) { return ::hx::Val( changeDiff_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { return ::hx::Val( gradientBar ); }
		if (HX_FIELD_EQ(inName,"loadCurrent") ) { return ::hx::Val( loadCurrent_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedScore") ) { return ::hx::Val( intendedScore ); }
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { return ::hx::Val( sprDifficulty ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MenuMarathon_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"no") ) { outValue = ( no ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_marathon") ) { outValue = ( _marathon ); return true; }
		if (HX_FIELD_EQ(inName,"substated") ) { outValue = ( substated ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loadPreset") ) { outValue = loadPreset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"savePreset") ) { outValue = savePreset_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
		if (HX_FIELD_EQ(inName,"saveCurrent") ) { outValue = saveCurrent_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { outValue = ( curDifficulty ); return true; }
	}
	return false;
}

::hx::Val MenuMarathon_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"side") ) { side=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { songs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { checker=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"grpSongs") ) { grpSongs=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { lerpScore=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { gradientBar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedScore") ) { intendedScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { sprDifficulty=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MenuMarathon_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"no") ) { no=ioValue.Cast< bool >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_marathon") ) { _marathon=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"substated") ) { substated=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { curDifficulty=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void MenuMarathon_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("checker",35,b3,24,13));
	outFields->push(HX_("gradientBar",c3,05,20,d3));
	outFields->push(HX_("side",97,8d,53,4c));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("songs",fe,36,c7,80));
	outFields->push(HX_("scoreText",1f,7d,bd,dc));
	outFields->push(HX_("lerpScore",5b,81,4d,e7));
	outFields->push(HX_("intendedScore",a7,fd,7c,89));
	outFields->push(HX_("grpSongs",d9,dc,c7,63));
	outFields->push(HX_("sprDifficulty",d0,6b,83,ba));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuMarathon_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuMarathon_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(MenuMarathon_obj,checker),HX_("checker",35,b3,24,13)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuMarathon_obj,gradientBar),HX_("gradientBar",c3,05,20,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuMarathon_obj,side),HX_("side",97,8d,53,4c)},
	{::hx::fsFloat,(int)offsetof(MenuMarathon_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsBool,(int)offsetof(MenuMarathon_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MenuMarathon_obj,songs),HX_("songs",fe,36,c7,80)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuMarathon_obj,scoreText),HX_("scoreText",1f,7d,bd,dc)},
	{::hx::fsInt,(int)offsetof(MenuMarathon_obj,lerpScore),HX_("lerpScore",5b,81,4d,e7)},
	{::hx::fsInt,(int)offsetof(MenuMarathon_obj,intendedScore),HX_("intendedScore",a7,fd,7c,89)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MenuMarathon_obj,grpSongs),HX_("grpSongs",d9,dc,c7,63)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuMarathon_obj,sprDifficulty),HX_("sprDifficulty",d0,6b,83,ba)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MenuMarathon_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &MenuMarathon_obj::_marathon,HX_("_marathon",75,00,3c,1f)},
	{::hx::fsInt,(void *) &MenuMarathon_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsBool,(void *) &MenuMarathon_obj::substated,HX_("substated",b3,a2,b3,d7)},
	{::hx::fsBool,(void *) &MenuMarathon_obj::no,HX_("no",41,60,00,00)},
	{::hx::fsInt,(void *) &MenuMarathon_obj::curDifficulty,HX_("curDifficulty",db,b7,38,a7)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MenuMarathon_obj_sMemberFields[] = {
	HX_("bg",c5,55,00,00),
	HX_("checker",35,b3,24,13),
	HX_("gradientBar",c3,05,20,d3),
	HX_("side",97,8d,53,4c),
	HX_("camLerp",26,66,a1,d2),
	HX_("selectable",96,b6,2a,c4),
	HX_("songs",fe,36,c7,80),
	HX_("scoreText",1f,7d,bd,dc),
	HX_("lerpScore",5b,81,4d,e7),
	HX_("intendedScore",a7,fd,7c,89),
	HX_("grpSongs",d9,dc,c7,63),
	HX_("sprDifficulty",d0,6b,83,ba),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("changeDiff",95,91,b2,1c),
	HX_("changeSelection",bc,98,b5,48),
	HX_("loadCurrent",b3,5a,81,9c),
	::String(null()) };

static void MenuMarathon_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuMarathon_obj::_marathon,"_marathon");
	HX_MARK_MEMBER_NAME(MenuMarathon_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(MenuMarathon_obj::substated,"substated");
	HX_MARK_MEMBER_NAME(MenuMarathon_obj::no,"no");
	HX_MARK_MEMBER_NAME(MenuMarathon_obj::curDifficulty,"curDifficulty");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuMarathon_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuMarathon_obj::_marathon,"_marathon");
	HX_VISIT_MEMBER_NAME(MenuMarathon_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(MenuMarathon_obj::substated,"substated");
	HX_VISIT_MEMBER_NAME(MenuMarathon_obj::no,"no");
	HX_VISIT_MEMBER_NAME(MenuMarathon_obj::curDifficulty,"curDifficulty");
};

#endif

::hx::Class MenuMarathon_obj::__mClass;

static ::String MenuMarathon_obj_sStaticFields[] = {
	HX_("_marathon",75,00,3c,1f),
	HX_("curSelected",fb,eb,ab,32),
	HX_("substated",b3,a2,b3,d7),
	HX_("no",41,60,00,00),
	HX_("curDifficulty",db,b7,38,a7),
	HX_("saveCurrent",7c,ca,83,25),
	HX_("loadPreset",25,e2,eb,63),
	HX_("savePreset",7c,3e,7a,f7),
	::String(null())
};

void MenuMarathon_obj::__register()
{
	MenuMarathon_obj _hx_dummy;
	MenuMarathon_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MenuMarathon",f5,8d,00,58);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MenuMarathon_obj::__GetStatic;
	__mClass->mSetStaticField = &MenuMarathon_obj::__SetStatic;
	__mClass->mMarkFunc = MenuMarathon_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MenuMarathon_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuMarathon_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuMarathon_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuMarathon_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuMarathon_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuMarathon_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MenuMarathon_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e23449fe8f361aa7_44_boot)
HXDLIN(  44)		curSelected = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e23449fe8f361aa7_48_boot)
HXDLIN(  48)		substated = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e23449fe8f361aa7_49_boot)
HXDLIN(  49)		no = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e23449fe8f361aa7_53_boot)
HXDLIN(  53)		curDifficulty = 2;
            	}
}


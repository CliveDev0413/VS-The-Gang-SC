// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_MenuFreeplay
#include <MenuFreeplay.h>
#endif
#ifndef INCLUDED_ModifierVariables
#include <ModifierVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlaySelection
#include <PlaySelection.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_SongMetadata
#include <SongMetadata.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Substate_ChartType
#include <Substate_ChartType.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a3e0197d7ab03833_26_new,"MenuFreeplay","new",0xd02ee1f1,"MenuFreeplay.new","MenuFreeplay.hx",26,0xd54f669f)
static const ::String _hx_array_data_a2e1157f_1[] = {
	HX_("P",50,00,00,00),HX_("X",58,00,00,00),HX_("X-",d5,4c,00,00),HX_("SS+",8b,43,3f,00),HX_("SS",a0,48,00,00),HX_("SS-",8d,43,3f,00),HX_("S+",78,48,00,00),HX_("S",53,00,00,00),HX_("S-",7a,48,00,00),HX_("A+",ca,38,00,00),HX_("A",41,00,00,00),HX_("A-",cc,38,00,00),HX_("B",42,00,00,00),HX_("C",43,00,00,00),HX_("D",44,00,00,00),HX_("E",45,00,00,00),HX_("NA",33,44,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_a3e0197d7ab03833_215_create,"MenuFreeplay","create",0x638ce60b,"MenuFreeplay.create","MenuFreeplay.hx",215,0xd54f669f)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e0197d7ab03833_59_create,"MenuFreeplay","create",0x638ce60b,"MenuFreeplay.create","MenuFreeplay.hx",59,0xd54f669f)
static const int _hx_array_data_a2e1157f_6[] = {
	(int)16711680,(int)1442823672,(int)-1426063885,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a3e0197d7ab03833_221_addSong,"MenuFreeplay","addSong",0x2ee714a7,"MenuFreeplay.addSong","MenuFreeplay.hx",221,0xd54f669f)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e0197d7ab03833_225_addWeek,"MenuFreeplay","addWeek",0x318450c6,"MenuFreeplay.addWeek","MenuFreeplay.hx",225,0xd54f669f)
static const ::String _hx_array_data_a2e1157f_10[] = {
	HX_("bf",c4,55,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_a3e0197d7ab03833_243_update,"MenuFreeplay","update",0x6e830518,"MenuFreeplay.update","MenuFreeplay.hx",243,0xd54f669f)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e0197d7ab03833_350_update,"MenuFreeplay","update",0x6e830518,"MenuFreeplay.update","MenuFreeplay.hx",350,0xd54f669f)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e0197d7ab03833_368_changeDiff,"MenuFreeplay","changeDiff",0x8d5e4424,"MenuFreeplay.changeDiff","MenuFreeplay.hx",368,0xd54f669f)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e0197d7ab03833_410_changeSelection,"MenuFreeplay","changeSelection",0x3f6d3fcd,"MenuFreeplay.changeSelection","MenuFreeplay.hx",410,0xd54f669f)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e0197d7ab03833_32_boot,"MenuFreeplay","boot",0x50efd181,"MenuFreeplay.boot","MenuFreeplay.hx",32,0xd54f669f)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e0197d7ab03833_33_boot,"MenuFreeplay","boot",0x50efd181,"MenuFreeplay.boot","MenuFreeplay.hx",33,0xd54f669f)

void MenuFreeplay_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_a3e0197d7ab03833_26_new)
HXLINE( 240)		this->selectable = false;
HXLINE( 239)		this->selectedSomethin = false;
HXLINE(  54)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,null(),null());
HXDLIN(  54)		::String library = null();
HXDLIN(  54)		this->rank = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("rankings/NA",45,9d,10,6f)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  53)		this->rankTable = ::Array_obj< ::String >::fromData( _hx_array_data_a2e1157f_1,17);
HXLINE(  49)		this->discIcon =  ::HealthIcon_obj::__alloc( HX_CTX ,HX_("bf",c4,55,00,00),null());
HXLINE(  48)		this->disc =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,730,null());
HXLINE(  46)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  46)		::String library1 = null();
HXDLIN(  46)		this->boombox = _hx_tmp1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Boombox",a0,0e,f7,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE(  45)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,null(),null());
HXDLIN(  45)		::String library2 = null();
HXDLIN(  45)		this->side = _hx_tmp2->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Free_Bottom",5e,95,a4,b0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE(  44)		this->gradientBar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null())->makeGraphic(::flixel::FlxG_obj::width,300,-5635926,null(),null());
HXLINE(  43)		::String library3 = null();
HXDLIN(  43)		this->checker =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Free_Checker",62,a9,31,8e)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library3),((Float)0.2),((Float)0.2),true,true,null(),null());
HXLINE(  42)		 ::flixel::FlxSprite _hx_tmp3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-89,null(),null());
HXDLIN(  42)		::String library4 = null();
HXDLIN(  42)		this->bg = _hx_tmp3->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("fBG_Main",ad,34,39,cc)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library4),null(),null(),null(),null(),null());
HXLINE(  40)		this->curPlaying = false;
HXLINE(  37)		this->intendedScore = 0;
HXLINE(  36)		this->lerpScore = 0;
HXLINE(  28)		this->songs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  26)		super::__construct(TransIn,TransOut);
            	}

Dynamic MenuFreeplay_obj::__CreateEmpty() { return new MenuFreeplay_obj; }

void *MenuFreeplay_obj::_hx_vtable = 0;

Dynamic MenuFreeplay_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuFreeplay_obj > _hx_result = new MenuFreeplay_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MenuFreeplay_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x22a19e6b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x22a19e6b;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void MenuFreeplay_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MenuFreeplay,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_a3e0197d7ab03833_215_create)
HXLINE( 215)			_gthis->selectable = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_a3e0197d7ab03833_59_create)
HXLINE(  58)		 ::MenuFreeplay _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  60)		::flixel::FlxG_obj::game->set_scaleX(( (Float)(1) ));
HXLINE(  61)		::flixel::FlxG_obj::game->set_x(( (Float)(0) ));
HXLINE(  62)		::flixel::FlxG_obj::game->set_scaleY(( (Float)(1) ));
HXLINE(  63)		::flixel::FlxG_obj::game->set_y(( (Float)(0) ));
HXLINE(  65)		::String library = null();
HXDLIN(  65)		::Array< ::String > initSonglist = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("freeplaySonglist",73,3b,dc,de)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  67)		{
HXLINE(  67)			int _g = 0;
HXDLIN(  67)			int _g1 = initSonglist->length;
HXDLIN(  67)			while((_g < _g1)){
HXLINE(  67)				_g = (_g + 1);
HXDLIN(  67)				int i = (_g - 1);
HXLINE(  69)				::Array< ::String > data = initSonglist->__get(i).split(HX_(":",3a,00,00,00));
HXLINE(  70)				::Array< ::Dynamic> _hx_tmp = this->songs;
HXDLIN(  70)				::String data1 = data->__get(0);
HXDLIN(  70)				 ::Dynamic _hx_tmp1 = ::Std_obj::parseInt(data->__get(2));
HXDLIN(  70)				_hx_tmp->push( ::SongMetadata_obj::__alloc( HX_CTX ,data1,( (int)(_hx_tmp1) ),data->__get(1)));
            			}
            		}
HXLINE(  81)		bool isDebug = false;
HXLINE(  84)		isDebug = true;
HXLINE(  91)		this->bg->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  92)		this->bg->scrollFactor->set_y(( (Float)(0) ));
HXLINE(  93)		 ::flixel::FlxSprite _hx_tmp = this->bg;
HXDLIN(  93)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->bg->get_width() * ((Float)1.1))),null());
HXLINE(  94)		this->bg->updateHitbox();
HXLINE(  95)		this->bg->screenCenter(null());
HXLINE(  96)		this->bg->set_antialiasing(true);
HXLINE(  97)		this->add(this->bg);
HXLINE(  98)		this->bg->set_alpha(( (Float)(0) ));
HXLINE( 100)		this->gradientBar = ::flixel::util::FlxGradient_obj::createGradientFlxSprite(::Math_obj::round(( (Float)(::flixel::FlxG_obj::width) )),512,::Array_obj< int >::fromData( _hx_array_data_a2e1157f_6,3),1,90,true);
HXLINE( 101)		 ::flixel::FlxSprite _hx_tmp1 = this->gradientBar;
HXDLIN( 101)		int _hx_tmp2 = ::flixel::FlxG_obj::height;
HXDLIN( 101)		_hx_tmp1->set_y((( (Float)(_hx_tmp2) ) - this->gradientBar->get_height()));
HXLINE( 102)		this->add(this->gradientBar);
HXLINE( 103)		this->gradientBar->scrollFactor->set(0,0);
HXLINE( 105)		this->add(this->checker);
HXLINE( 106)		this->checker->scrollFactor->set(0,((Float)0.07));
HXLINE( 108)		this->side->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 109)		this->side->scrollFactor->set_y(( (Float)(0) ));
HXLINE( 110)		this->side->set_antialiasing(true);
HXLINE( 111)		this->side->screenCenter(null());
HXLINE( 112)		this->add(this->side);
HXLINE( 113)		this->side->set_y(( (Float)(::flixel::FlxG_obj::height) ));
HXLINE( 115)		 ::flixel::FlxSprite _hx_tmp3 = this->side;
HXDLIN( 115)		Float _hx_tmp4 = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ));
HXDLIN( 115)		_hx_tmp3->set_x((_hx_tmp4 - (this->side->get_width() / ( (Float)(2) ))));
HXLINE( 117)		::String library1 = null();
HXDLIN( 117)		::String tex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Freeplay_Discs",5f,17,78,ee)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1);
HXDLIN( 117)		 ::flixel::graphics::frames::FlxAtlasFrames tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(tex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Freeplay_Discs",5f,17,78,ee)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXLINE( 118)		this->disc->set_frames(tex1);
HXLINE( 119)		this->disc->animation->addByPrefix(HX_("dad",47,36,4c,00),HX_("dad",47,36,4c,00),24,null(),null(),null());
HXLINE( 120)		this->disc->animation->play(HX_("dad",47,36,4c,00),null(),null(),null());
HXLINE( 121)		this->add(this->disc);
HXLINE( 122)		this->add(this->discIcon);
HXLINE( 123)		 ::HealthIcon _hx_tmp5 = this->discIcon;
HXDLIN( 123)		_hx_tmp5->set_antialiasing(this->disc->set_antialiasing(true));
HXLINE( 125)		this->rank->setGraphicSize(0,90);
HXLINE( 126)		this->rank->updateHitbox();
HXLINE( 127)		this->rank->scrollFactor->set(null(),null());
HXLINE( 128)		 ::flixel::FlxSprite _hx_tmp6 = this->rank;
HXDLIN( 128)		_hx_tmp6->set_y((( (Float)(690) ) - this->rank->get_height()));
HXLINE( 129)		 ::flixel::FlxSprite _hx_tmp7 = this->rank;
HXDLIN( 129)		Float _hx_tmp8 = this->disc->x;
HXDLIN( 129)		_hx_tmp7->set_x(((_hx_tmp8 + this->disc->get_width()) - ( (Float)(50) )));
HXLINE( 130)		this->add(this->rank);
HXLINE( 131)		this->rank->set_antialiasing(true);
HXLINE( 133)		this->rank->set_alpha(( (Float)(0) ));
HXLINE( 135)		this->grpSongs =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 136)		this->add(this->grpSongs);
HXLINE( 138)		{
HXLINE( 138)			int _g2 = 0;
HXDLIN( 138)			int _g3 = this->songs->length;
HXDLIN( 138)			while((_g2 < _g3)){
HXLINE( 138)				_g2 = (_g2 + 1);
HXDLIN( 138)				int i = (_g2 - 1);
HXLINE( 140)				 ::Alphabet songText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),this->songs->__get(i).StaticCast<  ::SongMetadata >()->songName,true,false);
HXLINE( 141)				songText->itemType = HX_("C-Shape",37,a4,77,ef);
HXLINE( 142)				songText->targetY = ( (Float)(i) );
HXLINE( 143)				this->grpSongs->add(songText).StaticCast<  ::Alphabet >();
            			}
            		}
HXLINE( 150)		::String library2 = null();
HXDLIN( 150)		::String diffTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("difficulties",59,c7,5e,02)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2);
HXDLIN( 150)		 ::flixel::graphics::frames::FlxAtlasFrames diffTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(diffTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("difficulties",59,c7,5e,02)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library2));
HXLINE( 151)		this->sprDifficulty =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,130,0,null());
HXLINE( 152)		this->sprDifficulty->set_frames(diffTex1);
HXLINE( 153)		this->sprDifficulty->animation->addByPrefix(HX_("noob",94,13,0a,49),HX_("NOOB",94,db,ca,33),null(),null(),null(),null());
HXLINE( 154)		this->sprDifficulty->animation->addByPrefix(HX_("easy",02,8c,0c,43),HX_("EASY",02,54,cd,2d),null(),null(),null(),null());
HXLINE( 155)		this->sprDifficulty->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("NORMAL",27,1e,ec,e2),null(),null(),null(),null());
HXLINE( 156)		this->sprDifficulty->animation->addByPrefix(HX_("hard",eb,2e,08,45),HX_("HARD",eb,f6,c8,2f),null(),null(),null(),null());
HXLINE( 157)		this->sprDifficulty->animation->addByPrefix(HX_("expert",ea,fa,75,c4),HX_("EXPERT",ea,a6,f8,76),null(),null(),null(),null());
HXLINE( 158)		this->sprDifficulty->animation->addByPrefix(HX_("insane",aa,36,da,9d),HX_("INSANE",aa,e2,5c,50),null(),null(),null(),null());
HXLINE( 159)		this->sprDifficulty->animation->play(HX_("easy",02,8c,0c,43),null(),null(),null());
HXLINE( 160)		this->sprDifficulty->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 161)		 ::flixel::FlxSprite _hx_tmp9 = this->sprDifficulty;
HXDLIN( 161)		int _hx_tmp10 = ::flixel::FlxG_obj::height;
HXDLIN( 161)		_hx_tmp9->set_y(((( (Float)(_hx_tmp10) ) - this->sprDifficulty->get_height()) - ( (Float)(8) )));
HXLINE( 162)		this->add(this->sprDifficulty);
HXLINE( 164)		this->scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),5,0,HX_("",00,00,00,00),32,null());
HXLINE( 165)		this->scoreText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 166)		this->scoreText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 167)		{
HXLINE( 167)			 ::flixel::text::FlxText _this = this->scoreText;
HXDLIN( 167)			_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 167)			_this->set_borderColor(-16777216);
HXDLIN( 167)			_this->set_borderSize(( (Float)(5) ));
HXDLIN( 167)			_this->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 168)		this->scoreText->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 169)		this->scoreText->set_y((this->sprDifficulty->y - ( (Float)(38) )));
HXLINE( 170)		this->add(this->scoreText);
HXLINE( 172)		this->changeSelection(null());
HXLINE( 173)		this->changeDiff(null());
HXLINE( 177)		this->selector =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 179)		this->selector->set_size(40);
HXLINE( 180)		this->selector->set_text(HX_(">",3e,00,00,00));
HXLINE( 183)		 ::Alphabet swag =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(1) ),( (Float)(0) ),HX_("swag",8a,2a,5e,4c),null(),null());
HXLINE( 198)		this->super::create();
HXLINE( 200)		::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 201)		 ::flixel::FlxSprite _hx_tmp11 = this->side;
HXDLIN( 201)		int _hx_tmp12 = ::flixel::FlxG_obj::height;
HXDLIN( 201)		Float _hx_tmp13 = (( (Float)(_hx_tmp12) ) - ((this->side->get_height() / ( (Float)(3) )) * ( (Float)(2) )));
HXDLIN( 201)		::flixel::tweens::FlxTween_obj::tween(_hx_tmp11, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),_hx_tmp13)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 202)		this->disc->scale->set_x(( (Float)(0) ));
HXLINE( 203)		::flixel::tweens::FlxTween_obj::tween(this->disc, ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("x",78,00,00,00),-25)
            			->setFixed(1,HX_("y",79,00,00,00),480)
            			->setFixed(2,HX_("scale.x",94,2d,07,65),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 204)		 ::flixel::text::FlxText _hx_tmp14 = this->scoreText;
HXDLIN( 204)		_hx_tmp14->set_alpha(this->sprDifficulty->set_alpha(( (Float)(0) )));
HXLINE( 205)		::flixel::tweens::FlxTween_obj::tween(this->scoreText, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 206)		::flixel::tweens::FlxTween_obj::tween(this->sprDifficulty, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 207)		::flixel::tweens::FlxTween_obj::tween(this->rank, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 209)		::flixel::FlxG_obj::camera->set_zoom(((Float)0.6));
HXLINE( 210)		::flixel::FlxG_obj::camera->set_alpha(( (Float)(0) ));
HXLINE( 211)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)
            			->setFixed(1,HX_("zoom",13,a3,f8,50),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 213)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


void MenuFreeplay_obj::addSong(::String songName,int weekNum,::String songCharacter){
            	HX_GC_STACKFRAME(&_hx_pos_a3e0197d7ab03833_221_addSong)
HXDLIN( 221)		::Array< ::Dynamic> _hx_tmp = this->songs;
HXDLIN( 221)		_hx_tmp->push( ::SongMetadata_obj::__alloc( HX_CTX ,songName,weekNum,songCharacter));
            	}


HX_DEFINE_DYNAMIC_FUNC3(MenuFreeplay_obj,addSong,(void))

void MenuFreeplay_obj::addWeek(::Array< ::String > songs,int weekNum,::Array< ::String > songCharacters){
            	HX_STACKFRAME(&_hx_pos_a3e0197d7ab03833_225_addWeek)
HXLINE( 226)		if (::hx::IsNull( songCharacters )) {
HXLINE( 227)			songCharacters = ::Array_obj< ::String >::fromData( _hx_array_data_a2e1157f_10,1);
            		}
HXLINE( 229)		int num = 0;
HXLINE( 230)		{
HXLINE( 230)			int _g = 0;
HXDLIN( 230)			while((_g < songs->length)){
HXLINE( 230)				::String song = songs->__get(_g);
HXDLIN( 230)				_g = (_g + 1);
HXLINE( 232)				this->addSong(song,weekNum,songCharacters->__get(num));
HXLINE( 234)				if ((songCharacters->length != 1)) {
HXLINE( 235)					num = (num + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(MenuFreeplay_obj,addWeek,(void))

void MenuFreeplay_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_a3e0197d7ab03833_243_update)
HXLINE( 242)		 ::MenuFreeplay _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 244)		this->super::update(elapsed);
HXLINE( 246)		 ::flixel::FlxSprite _hx_tmp = this->rank;
HXDLIN( 246)		Float _hx_tmp1 = this->disc->x;
HXDLIN( 246)		_hx_tmp->set_x(((_hx_tmp1 + this->disc->get_width()) - ( (Float)(50) )));
HXLINE( 248)		{
HXLINE( 248)			 ::flixel::addons::display::FlxBackdrop _g = this->checker;
HXDLIN( 248)			_g->set_x((_g->x - (((Float)-0.27) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 249)		{
HXLINE( 249)			 ::flixel::addons::display::FlxBackdrop _g1 = this->checker;
HXDLIN( 249)			_g1->set_y((_g1->y - (((Float)0.63) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 251)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE( 253)		if ((::flixel::FlxG_obj::sound->music->_volume < ((((Float)0.7) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) )) / ( (Float)(100) )))) {
HXLINE( 255)			 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 255)			_g->set_volume((_g->_volume + (((((Float)0.5) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) )) / ( (Float)(100) )) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 258)		if ((this->vocals->_volume < ((((Float)0.7) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("vvolume",d0,e6,37,8a),::hx::paccDynamic)) )) / ( (Float)(100) )))) {
HXLINE( 260)			 ::flixel::_hx_system::FlxSound _g = this->vocals;
HXDLIN( 260)			_g->set_volume((_g->_volume + (((((Float)0.5) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("vvolume",d0,e6,37,8a),::hx::paccDynamic)) )) / ( (Float)(100) )) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 263)		Float a = ( (Float)(this->lerpScore) );
HXDLIN( 263)		this->lerpScore = ::Math_obj::floor((a + ((((Float)0.5) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(this->intendedScore) ) - a))));
HXLINE( 265)		if ((::Math_obj::abs(( (Float)((this->lerpScore - this->intendedScore)) )) <= 10)) {
HXLINE( 266)			this->lerpScore = this->intendedScore;
            		}
HXLINE( 268)		this->scoreText->set_text((HX_("PERSONAL BEST:",36,ce,e9,ee) + this->lerpScore));
HXLINE( 270)		bool upP = ::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE( 271)		bool downP = ::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE( 272)		bool accepted = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE( 274)		bool _hx_tmp2;
HXDLIN( 274)		if (!(this->selectedSomethin)) {
HXLINE( 274)			_hx_tmp2 = this->selectable;
            		}
            		else {
HXLINE( 274)			_hx_tmp2 = false;
            		}
HXDLIN( 274)		if (_hx_tmp2) {
HXLINE( 276)			if (upP) {
HXLINE( 278)				{
HXLINE( 278)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN( 278)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE( 279)				this->changeSelection(-1);
            			}
HXLINE( 281)			if (downP) {
HXLINE( 283)				{
HXLINE( 283)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN( 283)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE( 284)				this->changeSelection(1);
            			}
HXLINE( 287)			if (::PlayerSettings_obj::player1->controls->_leftP->check()) {
HXLINE( 288)				this->changeDiff(-1);
            			}
HXLINE( 289)			if (::PlayerSettings_obj::player1->controls->_rightP->check()) {
HXLINE( 290)				this->changeDiff(1);
            			}
HXLINE( 292)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 294)				{
HXLINE( 294)					 ::flixel::FlxState nextState =  ::PlaySelection_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 294)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 294)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE( 295)				{
HXLINE( 295)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN( 295)					 ::Dynamic To = 0;
HXDLIN( 295)					 ::Dynamic onComplete = null();
HXDLIN( 295)					if (::hx::IsNull( To )) {
HXLINE( 295)						To = 0;
            					}
HXDLIN( 295)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 295)						_this->fadeTween->cancel();
            					}
HXDLIN( 295)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
HXLINE( 296)				this->selectedSomethin = true;
HXLINE( 297)				::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)-0.6))
            					->setFixed(1,HX_("zoom",13,a3,f8,50),((Float)0.6))),((Float)0.7), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 298)				::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.7), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 299)				::flixel::tweens::FlxTween_obj::tween(this->checker, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 300)				::flixel::tweens::FlxTween_obj::tween(this->gradientBar, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 301)				::flixel::tweens::FlxTween_obj::tween(this->side, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 302)				::flixel::tweens::FlxTween_obj::tween(this->sprDifficulty, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 303)				::flixel::tweens::FlxTween_obj::tween(this->scoreText, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 304)				::flixel::tweens::FlxTween_obj::tween(this->rank, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 305)				::flixel::tweens::FlxTween_obj::tween(this->disc, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)
            					->setFixed(1,HX_("scale.x",94,2d,07,65),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 308)				::DiscordClient_obj::changePresence(HX_("Going back!",14,2f,e7,6a),null(),null(),null(),null());
HXLINE( 311)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 311)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null());
HXDLIN( 311)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
            			}
HXLINE( 314)			if (accepted) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MenuFreeplay,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_a3e0197d7ab03833_350_update)
HXLINE( 351)					{
HXLINE( 351)						 ::flixel::_hx_system::FlxSound _this = _gthis->vocals;
HXDLIN( 351)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE( 352)					 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 352)					_hx_tmp->openSubState( ::Substate_ChartType_obj::__alloc( HX_CTX ));
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 316)				this->selectedSomethin = true;
HXLINE( 319)				::DiscordClient_obj::changePresence(HX_("Selecting chart types.",b1,f1,48,2c),null(),null(),null(),null());
HXLINE( 322)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 322)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 322)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 324)				::String poop = this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName.toLowerCase();
HXDLIN( 324)				::String poop1 = ::Highscore_obj::formatSong(poop,::MenuFreeplay_obj::curDifficulty);
HXLINE( 325)				::haxe::Log_obj::trace(poop1,::hx::SourceInfo(HX_("source/MenuFreeplay.hx",2b,4a,4d,72),325,HX_("MenuFreeplay",7f,15,e1,a2),HX_("update",09,86,05,87)));
HXLINE( 327)				::PlayState_obj::SONG = ::Song_obj::loadFromJson(poop1,this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName.toLowerCase());
HXLINE( 328)				::PlayState_obj::gameplayArea = HX_("Freeplay",c0,4c,38,fc);
HXLINE( 329)				::PlayState_obj::storyDifficulty = ::MenuFreeplay_obj::curDifficulty;
HXLINE( 331)				::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 332)				::flixel::tweens::FlxTween_obj::tween(this->checker, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 333)				::flixel::tweens::FlxTween_obj::tween(this->gradientBar, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 334)				::flixel::tweens::FlxTween_obj::tween(this->side, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 335)				::flixel::tweens::FlxTween_obj::tween(this->rank, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 336)				::flixel::tweens::FlxTween_obj::tween(this->disc, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)
            					->setFixed(1,HX_("scale.x",94,2d,07,65),0)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 337)				::flixel::tweens::FlxTween_obj::tween(this->scoreText, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("y",79,00,00,00),750)
            					->setFixed(1,HX_("alpha",5e,a7,96,21),0)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 338)				::flixel::tweens::FlxTween_obj::tween(this->sprDifficulty, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("y",79,00,00,00),750)
            					->setFixed(1,HX_("alpha",5e,a7,96,21),0)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 339)				{
HXLINE( 339)					int _g = 0;
HXDLIN( 339)					::Array< ::Dynamic> _g1 = this->grpSongs->members;
HXDLIN( 339)					while((_g < _g1->length)){
HXLINE( 339)						 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 339)						_g = (_g + 1);
HXLINE( 341)						::flixel::tweens::FlxTween_obj::tween(item, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.9), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
            					}
            				}
HXLINE( 344)				::PlayState_obj::storyWeek = this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->week;
HXLINE( 345)				::haxe::Log_obj::trace((HX_("CUR WEEK",b4,9a,a0,36) + ::PlayState_obj::storyWeek),::hx::SourceInfo(HX_("source/MenuFreeplay.hx",2b,4a,4d,72),345,HX_("MenuFreeplay",7f,15,e1,a2),HX_("update",09,86,05,87)));
HXLINE( 347)				{
HXLINE( 347)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN( 347)					 ::Dynamic To = 0;
HXDLIN( 347)					 ::Dynamic onComplete = null();
HXDLIN( 347)					if (::hx::IsNull( To )) {
HXLINE( 347)						To = 0;
            					}
HXDLIN( 347)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 347)						_this->fadeTween->cancel();
            					}
HXDLIN( 347)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),((Float)0.9), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
HXLINE( 349)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.9), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
            		}
HXLINE( 357)		bool _hx_tmp3;
HXDLIN( 357)		if ((this->vocals->_volume <= 0)) {
HXLINE( 357)			_hx_tmp3 = this->selectedSomethin;
            		}
            		else {
HXLINE( 357)			_hx_tmp3 = false;
            		}
HXDLIN( 357)		if (_hx_tmp3) {
HXLINE( 358)			 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN( 358)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 360)		 ::HealthIcon _hx_tmp4 = this->discIcon;
HXDLIN( 360)		Float _hx_tmp5 = this->disc->x;
HXDLIN( 360)		Float _hx_tmp6 = (_hx_tmp5 + (this->disc->get_width() / ( (Float)(2) )));
HXDLIN( 360)		_hx_tmp4->set_x((_hx_tmp6 - (this->discIcon->get_width() / ( (Float)(2) ))));
HXLINE( 361)		 ::HealthIcon _hx_tmp7 = this->discIcon;
HXDLIN( 361)		Float _hx_tmp8 = this->disc->y;
HXDLIN( 361)		Float _hx_tmp9 = (_hx_tmp8 + (this->disc->get_height() / ( (Float)(2) )));
HXDLIN( 361)		_hx_tmp7->set_y((_hx_tmp9 - (this->discIcon->get_height() / ( (Float)(2) ))));
HXLINE( 362)		 ::HealthIcon _hx_tmp10 = this->discIcon;
HXDLIN( 362)		 ::flixel::FlxSprite _g2 = this->disc;
HXDLIN( 362)		_hx_tmp10->set_angle(_g2->set_angle((_g2->angle + (((Float)0.6) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))))));
HXLINE( 363)		this->discIcon->scale->set(this->disc->scale->x,this->disc->scale->y);
HXLINE( 364)		 ::flixel::text::FlxText _hx_tmp11 = this->scoreText;
HXDLIN( 364)		Float _hx_tmp12 = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ));
HXDLIN( 364)		_hx_tmp11->set_x((_hx_tmp12 - (this->scoreText->get_width() / ( (Float)(2) ))));
            	}


void MenuFreeplay_obj::changeDiff(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_a3e0197d7ab03833_368_changeDiff)
HXLINE( 369)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::MenuFreeplay >();
HXDLIN( 369)		::MenuFreeplay_obj::curDifficulty = (::MenuFreeplay_obj::curDifficulty + change);
HXLINE( 371)		if ((::MenuFreeplay_obj::curDifficulty < 0)) {
HXLINE( 372)			::MenuFreeplay_obj::curDifficulty = 5;
            		}
HXLINE( 373)		if ((::MenuFreeplay_obj::curDifficulty > 5)) {
HXLINE( 374)			::MenuFreeplay_obj::curDifficulty = 0;
            		}
HXLINE( 377)		this->intendedScore = ::Highscore_obj::getScore(this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName,::MenuFreeplay_obj::curDifficulty);
HXLINE( 378)		 ::flixel::FlxSprite _hx_tmp1 = this->rank;
HXDLIN( 378)		::String library = null();
HXDLIN( 378)		_hx_tmp1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("rankings/",92,90,1d,00) + this->rankTable->__get(::Highscore_obj::getRank(this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName,::MenuFreeplay_obj::curDifficulty)))) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 379)		this->rank->setGraphicSize(0,90);
HXLINE( 380)		this->rank->updateHitbox();
HXLINE( 381)		this->rank->scrollFactor->set(null(),null());
HXLINE( 382)		 ::flixel::FlxSprite _hx_tmp2 = this->rank;
HXDLIN( 382)		_hx_tmp2->set_y((( (Float)(690) ) - this->rank->get_height()));
HXLINE( 383)		 ::flixel::FlxSprite _hx_tmp3 = this->rank;
HXDLIN( 383)		Float _hx_tmp4 = this->disc->x;
HXDLIN( 383)		_hx_tmp3->set_x(((_hx_tmp4 + this->disc->get_width()) - ( (Float)(50) )));
HXLINE( 386)		switch((int)(::MenuFreeplay_obj::curDifficulty)){
            			case (int)0: {
HXLINE( 389)				this->sprDifficulty->animation->play(HX_("noob",94,13,0a,49),null(),null(),null());
            			}
            			break;
            			case (int)1: {
HXLINE( 391)				this->sprDifficulty->animation->play(HX_("easy",02,8c,0c,43),null(),null(),null());
            			}
            			break;
            			case (int)2: {
HXLINE( 393)				this->sprDifficulty->animation->play(HX_("normal",27,72,69,30),null(),null(),null());
            			}
            			break;
            			case (int)3: {
HXLINE( 395)				this->sprDifficulty->animation->play(HX_("hard",eb,2e,08,45),null(),null(),null());
            			}
            			break;
            			case (int)4: {
HXLINE( 397)				this->sprDifficulty->animation->play(HX_("expert",ea,fa,75,c4),null(),null(),null());
            			}
            			break;
            			case (int)5: {
HXLINE( 399)				this->sprDifficulty->animation->play(HX_("insane",aa,36,da,9d),null(),null(),null());
            			}
            			break;
            		}
HXLINE( 402)		this->sprDifficulty->set_alpha(( (Float)(0) ));
HXLINE( 404)		 ::flixel::FlxSprite _hx_tmp5 = this->sprDifficulty;
HXDLIN( 404)		int _hx_tmp6 = ::flixel::FlxG_obj::height;
HXDLIN( 404)		_hx_tmp5->set_y(((( (Float)(_hx_tmp6) ) - this->sprDifficulty->get_height()) - ( (Float)(38) )));
HXLINE( 405)		 ::flixel::FlxSprite _hx_tmp7 = this->sprDifficulty;
HXDLIN( 405)		int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN( 405)		::flixel::tweens::FlxTween_obj::tween(_hx_tmp7, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),((( (Float)(_hx_tmp8) ) - this->sprDifficulty->get_height()) - ( (Float)(8) )))
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.04),null());
HXLINE( 406)		 ::flixel::FlxSprite _hx_tmp9 = this->sprDifficulty;
HXDLIN( 406)		Float _hx_tmp10 = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ));
HXDLIN( 406)		_hx_tmp9->set_x((_hx_tmp10 - (this->sprDifficulty->get_width() / ( (Float)(2) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuFreeplay_obj,changeDiff,(void))

void MenuFreeplay_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_a3e0197d7ab03833_410_changeSelection)
HXLINE( 413)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 413)		::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 413)		_hx_tmp->play(_hx_tmp1,((((Float)0.4) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 415)		 ::Dynamic _hx_tmp2 = ::hx::ClassOf< ::MenuFreeplay >();
HXDLIN( 415)		::MenuFreeplay_obj::curSelected = (::MenuFreeplay_obj::curSelected + change);
HXLINE( 417)		if ((::MenuFreeplay_obj::curSelected < 0)) {
HXLINE( 418)			::MenuFreeplay_obj::curSelected = (this->songs->length - 1);
            		}
HXLINE( 419)		if ((::MenuFreeplay_obj::curSelected >= this->songs->length)) {
HXLINE( 420)			::MenuFreeplay_obj::curSelected = 0;
            		}
HXLINE( 425)		this->intendedScore = ::Highscore_obj::getScore(this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName,::MenuFreeplay_obj::curDifficulty);
HXLINE( 426)		 ::flixel::FlxSprite _hx_tmp3 = this->rank;
HXDLIN( 426)		::String library = null();
HXDLIN( 426)		_hx_tmp3->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("rankings/",92,90,1d,00) + this->rankTable->__get(::Highscore_obj::getRank(this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName,::MenuFreeplay_obj::curDifficulty)))) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 427)		this->rank->setGraphicSize(0,90);
HXLINE( 428)		this->rank->updateHitbox();
HXLINE( 429)		this->rank->scrollFactor->set(null(),null());
HXLINE( 430)		 ::flixel::FlxSprite _hx_tmp4 = this->rank;
HXDLIN( 430)		_hx_tmp4->set_y((( (Float)(690) ) - this->rank->get_height()));
HXLINE( 431)		 ::flixel::FlxSprite _hx_tmp5 = this->rank;
HXDLIN( 431)		Float _hx_tmp6 = this->disc->x;
HXDLIN( 431)		_hx_tmp5->set_x(((_hx_tmp6 + this->disc->get_width()) - ( (Float)(50) )));
HXLINE( 436)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("VibeSwitch",6a,9e,5d,65),::hx::paccDynamic)) )) {
HXLINE( 438)			Float _hx_switch_0 = ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Vibe",d6,5b,28,39),::hx::paccDynamic)) );
            			if (  (_hx_switch_0==((Float)0.8)) ){
HXLINE( 441)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 441)				_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName.toLowerCase()) + HX_("/Inst_HIFI.",c0,0d,67,4c)) + HX_("ogg",4f,94,54,00)),0,null(),null());
HXDLIN( 441)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_0==((Float)1.2)) ){
HXLINE( 443)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 443)				_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName.toLowerCase()) + HX_("/Inst_LOFI.",7e,a7,f8,9d)) + HX_("ogg",4f,94,54,00)),0,null(),null());
HXDLIN( 443)				goto _hx_goto_15;
            			}
            			/* default */{
HXLINE( 445)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 445)				_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName.toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),0,null(),null());
            			}
            			_hx_goto_15:;
            		}
            		else {
HXLINE( 449)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 449)			_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName.toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),0,null(),null());
            		}
HXLINE( 452)		{
HXLINE( 452)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 452)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 454)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("VibeSwitch",6a,9e,5d,65),::hx::paccDynamic)) )) {
HXLINE( 456)			Float _hx_switch_1 = ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Vibe",d6,5b,28,39),::hx::paccDynamic)) );
            			if (  (_hx_switch_1==((Float)0.8)) ){
HXLINE( 459)				 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 459)				this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName.toLowerCase()) + HX_("/Voices_HIFI.",7b,80,3f,17)) + HX_("ogg",4f,94,54,00)),true,null(),null());
HXDLIN( 459)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_1==((Float)1.2)) ){
HXLINE( 461)				 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 461)				this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName.toLowerCase()) + HX_("/Voices_LOFI.",39,1a,d1,68)) + HX_("ogg",4f,94,54,00)),true,null(),null());
HXDLIN( 461)				goto _hx_goto_16;
            			}
            			/* default */{
HXLINE( 463)				 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 463)				this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName.toLowerCase()) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),true,null(),null());
            			}
            			_hx_goto_16:;
            		}
            		else {
HXLINE( 467)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 467)			this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName.toLowerCase()) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),true,null(),null());
            		}
HXLINE( 469)		this->vocals->set_volume(( (Float)(0) ));
HXLINE( 470)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 471)		this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE( 472)		this->vocals->play(null(),null(),null());
HXLINE( 473)		{
HXLINE( 473)			 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN( 473)			_this1->cleanup(_this1->autoDestroy,true);
            		}
HXLINE( 475)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("VibeSwitch",6a,9e,5d,65),::hx::paccDynamic)) )) {
HXLINE( 477)			Float _hx_switch_2 = ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Vibe",d6,5b,28,39),::hx::paccDynamic)) );
            			if (  (_hx_switch_2==((Float)0.8)) ){
HXLINE( 480)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 480)				_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName.toLowerCase()) + HX_("/Inst_HIFI.",c0,0d,67,4c)) + HX_("ogg",4f,94,54,00)),0,null(),null());
HXDLIN( 480)				goto _hx_goto_17;
            			}
            			if (  (_hx_switch_2==((Float)1.2)) ){
HXLINE( 482)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 482)				_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName.toLowerCase()) + HX_("/Inst_LOFI.",7e,a7,f8,9d)) + HX_("ogg",4f,94,54,00)),0,null(),null());
HXDLIN( 482)				goto _hx_goto_17;
            			}
            			/* default */{
HXLINE( 484)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 484)				_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName.toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),0,null(),null());
            			}
            			_hx_goto_17:;
            		}
            		else {
HXLINE( 488)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 488)			_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName.toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),0,null(),null());
            		}
HXLINE( 490)		this->vocals->play(null(),null(),null());
HXLINE( 492)		int bullShit = 0;
HXLINE( 494)		{
HXLINE( 494)			int _g = 0;
HXDLIN( 494)			::Array< ::Dynamic> _g1 = this->grpSongs->members;
HXDLIN( 494)			while((_g < _g1->length)){
HXLINE( 494)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 494)				_g = (_g + 1);
HXLINE( 496)				item->targetY = ( (Float)((bullShit - ::MenuFreeplay_obj::curSelected)) );
HXLINE( 497)				bullShit = (bullShit + 1);
HXLINE( 499)				item->set_alpha(((Float)0.6));
HXLINE( 502)				if ((item->targetY == 0)) {
HXLINE( 504)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
HXLINE( 511)		switch((int)(::flixel::FlxG_obj::random->_hx_int(0,5,null()))){
            			case (int)0: {
HXLINE( 514)				::DiscordClient_obj::changePresence(((HX_("Vibing to ",38,66,ac,70) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName) + HX_(" for:",31,f1,92,b0)),null(),null(),true,null());
            			}
            			break;
            			case (int)1: {
HXLINE( 516)				::DiscordClient_obj::changePresence(((HX_("Sleeping on someone with ",60,31,ea,1b) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName) + HX_(" for:",31,f1,92,b0)),null(),null(),true,null());
            			}
            			break;
            			case (int)2: {
HXLINE( 518)				::DiscordClient_obj::changePresence(((HX_("Dreaming about ",14,08,0f,c9) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName) + HX_(" for:",31,f1,92,b0)),null(),null(),true,null());
            			}
            			break;
            			case (int)3: {
HXLINE( 520)				::DiscordClient_obj::changePresence(((HX_("Suckling some ",6c,0f,9a,88) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName) + HX_(" for:",31,f1,92,b0)),null(),null(),true,null());
            			}
            			break;
            			case (int)4: {
HXLINE( 522)				::DiscordClient_obj::changePresence(((HX_("Presenting ",59,a5,02,45) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName) + HX_(" to myself for:",34,3b,a9,65)),null(),null(),true,null());
            			}
            			break;
            			case (int)5: {
HXLINE( 524)				::DiscordClient_obj::changePresence(((HX_("Admiring ",f1,0a,86,80) + this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songName) + HX_(" for:",31,f1,92,b0)),null(),null(),true,null());
            			}
            			break;
            		}
HXLINE( 528)		this->disc->animation->addByPrefix(this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songCharacter,this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songCharacter,24,null(),null(),null());
HXLINE( 529)		this->disc->animation->play(this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songCharacter,null(),null(),null());
HXLINE( 530)		this->discIcon->animation->play(this->songs->__get(::MenuFreeplay_obj::curSelected).StaticCast<  ::SongMetadata >()->songCharacter,null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuFreeplay_obj,changeSelection,(void))

int MenuFreeplay_obj::curSelected;

int MenuFreeplay_obj::curDifficulty;


::hx::ObjectPtr< MenuFreeplay_obj > MenuFreeplay_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< MenuFreeplay_obj > __this = new MenuFreeplay_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< MenuFreeplay_obj > MenuFreeplay_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MenuFreeplay_obj *__this = (MenuFreeplay_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuFreeplay_obj), true, "MenuFreeplay"));
	*(void **)__this = MenuFreeplay_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MenuFreeplay_obj::MenuFreeplay_obj()
{
}

void MenuFreeplay_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuFreeplay);
	HX_MARK_MEMBER_NAME(songs,"songs");
	HX_MARK_MEMBER_NAME(selector,"selector");
	HX_MARK_MEMBER_NAME(scoreText,"scoreText");
	HX_MARK_MEMBER_NAME(lerpScore,"lerpScore");
	HX_MARK_MEMBER_NAME(intendedScore,"intendedScore");
	HX_MARK_MEMBER_NAME(grpSongs,"grpSongs");
	HX_MARK_MEMBER_NAME(curPlaying,"curPlaying");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(checker,"checker");
	HX_MARK_MEMBER_NAME(gradientBar,"gradientBar");
	HX_MARK_MEMBER_NAME(side,"side");
	HX_MARK_MEMBER_NAME(boombox,"boombox");
	HX_MARK_MEMBER_NAME(disc,"disc");
	HX_MARK_MEMBER_NAME(discIcon,"discIcon");
	HX_MARK_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_MARK_MEMBER_NAME(rankTable,"rankTable");
	HX_MARK_MEMBER_NAME(rank,"rank");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuFreeplay_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(songs,"songs");
	HX_VISIT_MEMBER_NAME(selector,"selector");
	HX_VISIT_MEMBER_NAME(scoreText,"scoreText");
	HX_VISIT_MEMBER_NAME(lerpScore,"lerpScore");
	HX_VISIT_MEMBER_NAME(intendedScore,"intendedScore");
	HX_VISIT_MEMBER_NAME(grpSongs,"grpSongs");
	HX_VISIT_MEMBER_NAME(curPlaying,"curPlaying");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(checker,"checker");
	HX_VISIT_MEMBER_NAME(gradientBar,"gradientBar");
	HX_VISIT_MEMBER_NAME(side,"side");
	HX_VISIT_MEMBER_NAME(boombox,"boombox");
	HX_VISIT_MEMBER_NAME(disc,"disc");
	HX_VISIT_MEMBER_NAME(discIcon,"discIcon");
	HX_VISIT_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_VISIT_MEMBER_NAME(rankTable,"rankTable");
	HX_VISIT_MEMBER_NAME(rank,"rank");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuFreeplay_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"side") ) { return ::hx::Val( side ); }
		if (HX_FIELD_EQ(inName,"disc") ) { return ::hx::Val( disc ); }
		if (HX_FIELD_EQ(inName,"rank") ) { return ::hx::Val( rank ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { return ::hx::Val( songs ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { return ::hx::Val( checker ); }
		if (HX_FIELD_EQ(inName,"boombox") ) { return ::hx::Val( boombox ); }
		if (HX_FIELD_EQ(inName,"addSong") ) { return ::hx::Val( addSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"addWeek") ) { return ::hx::Val( addWeek_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { return ::hx::Val( selector ); }
		if (HX_FIELD_EQ(inName,"grpSongs") ) { return ::hx::Val( grpSongs ); }
		if (HX_FIELD_EQ(inName,"discIcon") ) { return ::hx::Val( discIcon ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { return ::hx::Val( scoreText ); }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { return ::hx::Val( lerpScore ); }
		if (HX_FIELD_EQ(inName,"rankTable") ) { return ::hx::Val( rankTable ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curPlaying") ) { return ::hx::Val( curPlaying ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"changeDiff") ) { return ::hx::Val( changeDiff_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { return ::hx::Val( gradientBar ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedScore") ) { return ::hx::Val( intendedScore ); }
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { return ::hx::Val( sprDifficulty ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { return ::hx::Val( selectedSomethin ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MenuFreeplay_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { outValue = ( curDifficulty ); return true; }
	}
	return false;
}

::hx::Val MenuFreeplay_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"side") ) { side=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disc") ) { disc=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rank") ) { rank=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { songs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { checker=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boombox") ) { boombox=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { selector=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpSongs") ) { grpSongs=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"discIcon") ) { discIcon=inValue.Cast<  ::HealthIcon >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { lerpScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rankTable") ) { rankTable=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curPlaying") ) { curPlaying=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { gradientBar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedScore") ) { intendedScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { sprDifficulty=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { selectedSomethin=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MenuFreeplay_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { curDifficulty=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void MenuFreeplay_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("songs",fe,36,c7,80));
	outFields->push(HX_("selector",1f,33,6d,b1));
	outFields->push(HX_("scoreText",1f,7d,bd,dc));
	outFields->push(HX_("lerpScore",5b,81,4d,e7));
	outFields->push(HX_("intendedScore",a7,fd,7c,89));
	outFields->push(HX_("grpSongs",d9,dc,c7,63));
	outFields->push(HX_("curPlaying",ce,61,01,95));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("checker",35,b3,24,13));
	outFields->push(HX_("gradientBar",c3,05,20,d3));
	outFields->push(HX_("side",97,8d,53,4c));
	outFields->push(HX_("boombox",c0,e6,a5,7e));
	outFields->push(HX_("disc",55,67,69,42));
	outFields->push(HX_("discIcon",6e,49,44,92));
	outFields->push(HX_("sprDifficulty",d0,6b,83,ba));
	outFields->push(HX_("rankTable",c2,ca,17,e0));
	outFields->push(HX_("rank",ac,4d,a4,4b));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("selectedSomethin",c8,ec,fb,99));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuFreeplay_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MenuFreeplay_obj,songs),HX_("songs",fe,36,c7,80)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuFreeplay_obj,selector),HX_("selector",1f,33,6d,b1)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuFreeplay_obj,scoreText),HX_("scoreText",1f,7d,bd,dc)},
	{::hx::fsInt,(int)offsetof(MenuFreeplay_obj,lerpScore),HX_("lerpScore",5b,81,4d,e7)},
	{::hx::fsInt,(int)offsetof(MenuFreeplay_obj,intendedScore),HX_("intendedScore",a7,fd,7c,89)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MenuFreeplay_obj,grpSongs),HX_("grpSongs",d9,dc,c7,63)},
	{::hx::fsBool,(int)offsetof(MenuFreeplay_obj,curPlaying),HX_("curPlaying",ce,61,01,95)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuFreeplay_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(MenuFreeplay_obj,checker),HX_("checker",35,b3,24,13)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuFreeplay_obj,gradientBar),HX_("gradientBar",c3,05,20,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuFreeplay_obj,side),HX_("side",97,8d,53,4c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuFreeplay_obj,boombox),HX_("boombox",c0,e6,a5,7e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuFreeplay_obj,disc),HX_("disc",55,67,69,42)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(MenuFreeplay_obj,discIcon),HX_("discIcon",6e,49,44,92)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuFreeplay_obj,sprDifficulty),HX_("sprDifficulty",d0,6b,83,ba)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MenuFreeplay_obj,rankTable),HX_("rankTable",c2,ca,17,e0)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuFreeplay_obj,rank),HX_("rank",ac,4d,a4,4b)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(MenuFreeplay_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsBool,(int)offsetof(MenuFreeplay_obj,selectedSomethin),HX_("selectedSomethin",c8,ec,fb,99)},
	{::hx::fsBool,(int)offsetof(MenuFreeplay_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MenuFreeplay_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &MenuFreeplay_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsInt,(void *) &MenuFreeplay_obj::curDifficulty,HX_("curDifficulty",db,b7,38,a7)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MenuFreeplay_obj_sMemberFields[] = {
	HX_("songs",fe,36,c7,80),
	HX_("selector",1f,33,6d,b1),
	HX_("scoreText",1f,7d,bd,dc),
	HX_("lerpScore",5b,81,4d,e7),
	HX_("intendedScore",a7,fd,7c,89),
	HX_("grpSongs",d9,dc,c7,63),
	HX_("curPlaying",ce,61,01,95),
	HX_("bg",c5,55,00,00),
	HX_("checker",35,b3,24,13),
	HX_("gradientBar",c3,05,20,d3),
	HX_("side",97,8d,53,4c),
	HX_("boombox",c0,e6,a5,7e),
	HX_("disc",55,67,69,42),
	HX_("discIcon",6e,49,44,92),
	HX_("sprDifficulty",d0,6b,83,ba),
	HX_("rankTable",c2,ca,17,e0),
	HX_("rank",ac,4d,a4,4b),
	HX_("vocals",5e,10,51,59),
	HX_("create",fc,66,0f,7c),
	HX_("addSong",96,66,95,88),
	HX_("addWeek",b5,a2,32,8b),
	HX_("selectedSomethin",c8,ec,fb,99),
	HX_("selectable",96,b6,2a,c4),
	HX_("update",09,86,05,87),
	HX_("changeDiff",95,91,b2,1c),
	HX_("changeSelection",bc,98,b5,48),
	::String(null()) };

static void MenuFreeplay_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuFreeplay_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(MenuFreeplay_obj::curDifficulty,"curDifficulty");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuFreeplay_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuFreeplay_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(MenuFreeplay_obj::curDifficulty,"curDifficulty");
};

#endif

::hx::Class MenuFreeplay_obj::__mClass;

static ::String MenuFreeplay_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("curDifficulty",db,b7,38,a7),
	::String(null())
};

void MenuFreeplay_obj::__register()
{
	MenuFreeplay_obj _hx_dummy;
	MenuFreeplay_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MenuFreeplay",7f,15,e1,a2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MenuFreeplay_obj::__GetStatic;
	__mClass->mSetStaticField = &MenuFreeplay_obj::__SetStatic;
	__mClass->mMarkFunc = MenuFreeplay_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MenuFreeplay_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuFreeplay_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuFreeplay_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuFreeplay_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuFreeplay_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuFreeplay_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MenuFreeplay_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a3e0197d7ab03833_32_boot)
HXDLIN(  32)		curSelected = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a3e0197d7ab03833_33_boot)
HXDLIN(  33)		curDifficulty = 2;
            	}
}


// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_Marathon_Substate
#include <Marathon_Substate.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Substate_Preset
#include <Substate_Preset.h>
#endif
#ifndef INCLUDED_Substate_PresetSave
#include <Substate_PresetSave.h>
#endif
#ifndef INCLUDED_Substate_PresetSaveOK
#include <Substate_PresetSaveOK.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6ba67e20e49ef0e2_80_new,"Substate_PresetSave","new",0x311da85c,"Substate_PresetSave.new","Substate_PresetSave.hx",80,0x742a9694)
HX_DEFINE_STACK_FRAME(_hx_pos_6ba67e20e49ef0e2_33_new,"Substate_PresetSave","new",0x311da85c,"Substate_PresetSave.new","Substate_PresetSave.hx",33,0x742a9694)
HX_LOCAL_STACK_FRAME(_hx_pos_6ba67e20e49ef0e2_87_update,"Substate_PresetSave","update",0xfd4dd38d,"Substate_PresetSave.update","Substate_PresetSave.hx",87,0x742a9694)
HX_LOCAL_STACK_FRAME(_hx_pos_6ba67e20e49ef0e2_113_update,"Substate_PresetSave","update",0xfd4dd38d,"Substate_PresetSave.update","Substate_PresetSave.hx",113,0x742a9694)
HX_LOCAL_STACK_FRAME(_hx_pos_6ba67e20e49ef0e2_35_boot,"Substate_PresetSave","boot",0xc0eea8b6,"Substate_PresetSave.boot","Substate_PresetSave.hx",35,0x742a9694)
HX_LOCAL_STACK_FRAME(_hx_pos_6ba67e20e49ef0e2_46_boot,"Substate_PresetSave","boot",0xc0eea8b6,"Substate_PresetSave.boot","Substate_PresetSave.hx",46,0x742a9694)
HX_LOCAL_STACK_FRAME(_hx_pos_6ba67e20e49ef0e2_47_boot,"Substate_PresetSave","boot",0xc0eea8b6,"Substate_PresetSave.boot","Substate_PresetSave.hx",47,0x742a9694)

void Substate_PresetSave_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Substate_PresetSave,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_6ba67e20e49ef0e2_80_new)
HXLINE(  80)			_gthis->selectable = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_6ba67e20e49ef0e2_33_new)
HXLINE(  84)		this->selectable = false;
HXLINE(  41)		this->blackBarThingie =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,1,-16777216,null(),null());
HXLINE(  39)		this->camLerp = ((Float)0.16);
HXLINE(  37)		this->goingBack = false;
HXLINE(  49)		 ::Substate_PresetSave _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  51)		super::__construct();
HXLINE(  53)		this->add(this->blackBarThingie);
HXLINE(  54)		this->blackBarThingie->scrollFactor->set(null(),null());
HXLINE(  55)		this->blackBarThingie->scale->set_y(( (Float)(750) ));
HXLINE(  57)		this->chooseName =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),5,0,HX_("Type in your preset name. Once you're done, press enter\nto proceed, or escape to leave.",cc,58,85,2c),32,null());
HXLINE(  58)		this->chooseName->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE(  59)		this->chooseName->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  60)		{
HXLINE(  60)			 ::flixel::text::FlxText _this = this->chooseName;
HXDLIN(  60)			_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(  60)			_this->set_borderColor(-16777216);
HXDLIN(  60)			_this->set_borderSize(( (Float)(5) ));
HXDLIN(  60)			_this->set_borderQuality(( (Float)(1) ));
            		}
HXLINE(  61)		this->chooseName->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  62)		this->chooseName->set_y(( (Float)(38) ));
HXLINE(  63)		this->chooseName->scrollFactor->set(null(),null());
HXLINE(  64)		this->add(this->chooseName);
HXLINE(  66)		this->name =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,10,::flixel::FlxG_obj::width,HX_("",00,00,00,00),8,null(),null(),null());
HXLINE(  67)		this->name->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),96,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE(  68)		this->name->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  69)		{
HXLINE(  69)			 ::flixel::addons::ui::FlxUIInputText _this1 = this->name;
HXDLIN(  69)			_this1->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(  69)			_this1->set_borderColor(-16777216);
HXDLIN(  69)			_this1->set_borderSize(( (Float)(5) ));
HXDLIN(  69)			_this1->set_borderQuality(( (Float)(1) ));
            		}
HXLINE(  70)		this->name->screenCenter(null());
HXLINE(  71)		this->name->scrollFactor->set(null(),null());
HXLINE(  72)		this->add(this->name);
HXLINE(  73)		this->name->set_backgroundColor(-16777216);
HXLINE(  74)		this->name->set_maxLength(15);
HXLINE(  75)		this->name->set_lines(1);
HXLINE(  76)		this->name->set_caretColor(-1);
HXLINE(  78)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}

Dynamic Substate_PresetSave_obj::__CreateEmpty() { return new Substate_PresetSave_obj; }

void *Substate_PresetSave_obj::_hx_vtable = 0;

Dynamic Substate_PresetSave_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Substate_PresetSave_obj > _hx_result = new Substate_PresetSave_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Substate_PresetSave_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x67fe0faa) {
		if (inClassId<=(int)0x62817b24) {
			if (inClassId<=(int)0x5661ffbf) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x5661ffbf;
			} else {
				return inClassId==(int)0x62817b24;
			}
		} else {
			return inClassId==(int)0x67fe0faa;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void Substate_PresetSave_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_6ba67e20e49ef0e2_87_update)
HXLINE(  88)		this->super::update(elapsed);
HXLINE(  90)		this->name->set_hasFocus(true);
HXLINE(  92)		::String _hx_switch_0 = this->name->text.toLowerCase();
            		if (  (_hx_switch_0==HX_("error",c8,cb,29,73)) ){
HXLINE(  97)			::flixel::FlxG_obj::game->stage->window->alert(HX_("Got you!",d6,00,54,03),HX_("Boo!",ff,af,f4,2b));
HXDLIN(  97)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("gaster",68,56,fc,54)) ){
HXLINE(  95)			::lime::_hx_system::System_obj::exit(0);
HXDLIN(  95)			goto _hx_goto_2;
            		}
            		_hx_goto_2:;
HXLINE( 100)		 ::flixel::FlxSprite _hx_tmp = this->blackBarThingie;
HXDLIN( 100)		_hx_tmp->set_y((( (Float)(360) ) - (this->blackBarThingie->get_height() / ( (Float)(2) ))));
HXLINE( 101)		 ::flixel::FlxSprite _hx_tmp1 = this->blackBarThingie;
HXDLIN( 101)		_hx_tmp1->set_x((( (Float)(640) ) - (this->blackBarThingie->get_width() / ( (Float)(2) ))));
HXLINE( 103)		bool _hx_tmp2;
HXDLIN( 103)		if (this->selectable) {
HXLINE( 103)			_hx_tmp2 = !(this->goingBack);
            		}
            		else {
HXLINE( 103)			_hx_tmp2 = false;
            		}
HXDLIN( 103)		if (_hx_tmp2) {
HXLINE( 105)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 105)			if (_this->keyManager->checkStatus(27,_this->status)) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_6ba67e20e49ef0e2_113_update)
HXLINE( 114)					::flixel::FlxG_obj::game->_state->closeSubState();
HXLINE( 115)					if ((::Substate_PresetSave_obj::coming == HX_("Modifiers",1c,f1,ea,79))) {
HXLINE( 116)						 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 116)						_hx_tmp->openSubState( ::Substate_Preset_obj::__alloc( HX_CTX ));
            					}
            					else {
HXLINE( 117)						if ((::Substate_PresetSave_obj::coming == HX_("Marathon",36,c5,57,b1))) {
HXLINE( 118)							 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 118)							_hx_tmp->openSubState( ::Marathon_Substate_obj::__alloc( HX_CTX ));
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 107)				this->goingBack = true;
HXLINE( 108)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 108)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null());
HXDLIN( 108)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 109)				::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("scale.x",94,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 110)				::flixel::tweens::FlxTween_obj::tween(this->name, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("scale.x",94,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 111)				::flixel::tweens::FlxTween_obj::tween(this->chooseName, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("scale.x",94,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 112)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_0()),null());
            			}
HXLINE( 122)			bool _hx_tmp;
HXDLIN( 122)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 122)			if (_this1->keyManager->checkStatus(13,_this1->status)) {
HXLINE( 122)				_hx_tmp = (this->name->text != HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 122)				_hx_tmp = false;
            			}
HXDLIN( 122)			if (_hx_tmp) {
HXLINE( 124)				::Substate_PresetSave_obj::nameResult = this->name->text;
HXLINE( 125)				::flixel::FlxG_obj::game->_state->closeSubState();
HXLINE( 126)				 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 126)				_hx_tmp->openSubState( ::Substate_PresetSaveOK_obj::__alloc( HX_CTX ));
            			}
            		}
            	}


int Substate_PresetSave_obj::curSelected;

::String Substate_PresetSave_obj::nameResult;

::String Substate_PresetSave_obj::coming;


::hx::ObjectPtr< Substate_PresetSave_obj > Substate_PresetSave_obj::__new() {
	::hx::ObjectPtr< Substate_PresetSave_obj > __this = new Substate_PresetSave_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Substate_PresetSave_obj > Substate_PresetSave_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Substate_PresetSave_obj *__this = (Substate_PresetSave_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Substate_PresetSave_obj), true, "Substate_PresetSave"));
	*(void **)__this = Substate_PresetSave_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Substate_PresetSave_obj::Substate_PresetSave_obj()
{
}

void Substate_PresetSave_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Substate_PresetSave);
	HX_MARK_MEMBER_NAME(goingBack,"goingBack");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_MARK_MEMBER_NAME(chooseName,"chooseName");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Substate_PresetSave_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(goingBack,"goingBack");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_VISIT_MEMBER_NAME(chooseName,"chooseName");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Substate_PresetSave_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"goingBack") ) { return ::hx::Val( goingBack ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"chooseName") ) { return ::hx::Val( chooseName ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { return ::hx::Val( blackBarThingie ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Substate_PresetSave_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"coming") ) { outValue = ( coming ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nameResult") ) { outValue = ( nameResult ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val Substate_PresetSave_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"goingBack") ) { goingBack=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"chooseName") ) { chooseName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { blackBarThingie=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Substate_PresetSave_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"coming") ) { coming=ioValue.Cast< ::String >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nameResult") ) { nameResult=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Substate_PresetSave_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("goingBack",01,e7,bf,2f));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("blackBarThingie",56,00,c2,d2));
	outFields->push(HX_("chooseName",c2,b0,e8,39));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Substate_PresetSave_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Substate_PresetSave_obj,goingBack),HX_("goingBack",01,e7,bf,2f)},
	{::hx::fsFloat,(int)offsetof(Substate_PresetSave_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Substate_PresetSave_obj,blackBarThingie),HX_("blackBarThingie",56,00,c2,d2)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Substate_PresetSave_obj,chooseName),HX_("chooseName",c2,b0,e8,39)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(Substate_PresetSave_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsBool,(int)offsetof(Substate_PresetSave_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Substate_PresetSave_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Substate_PresetSave_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsString,(void *) &Substate_PresetSave_obj::nameResult,HX_("nameResult",88,99,03,8d)},
	{::hx::fsString,(void *) &Substate_PresetSave_obj::coming,HX_("coming",41,6b,2b,c7)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Substate_PresetSave_obj_sMemberFields[] = {
	HX_("goingBack",01,e7,bf,2f),
	HX_("camLerp",26,66,a1,d2),
	HX_("blackBarThingie",56,00,c2,d2),
	HX_("chooseName",c2,b0,e8,39),
	HX_("name",4b,72,ff,48),
	HX_("selectable",96,b6,2a,c4),
	HX_("update",09,86,05,87),
	::String(null()) };

static void Substate_PresetSave_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Substate_PresetSave_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(Substate_PresetSave_obj::nameResult,"nameResult");
	HX_MARK_MEMBER_NAME(Substate_PresetSave_obj::coming,"coming");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Substate_PresetSave_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Substate_PresetSave_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(Substate_PresetSave_obj::nameResult,"nameResult");
	HX_VISIT_MEMBER_NAME(Substate_PresetSave_obj::coming,"coming");
};

#endif

::hx::Class Substate_PresetSave_obj::__mClass;

static ::String Substate_PresetSave_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("nameResult",88,99,03,8d),
	HX_("coming",41,6b,2b,c7),
	::String(null())
};

void Substate_PresetSave_obj::__register()
{
	Substate_PresetSave_obj _hx_dummy;
	Substate_PresetSave_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Substate_PresetSave",6a,8a,5b,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Substate_PresetSave_obj::__GetStatic;
	__mClass->mSetStaticField = &Substate_PresetSave_obj::__SetStatic;
	__mClass->mMarkFunc = Substate_PresetSave_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Substate_PresetSave_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Substate_PresetSave_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Substate_PresetSave_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Substate_PresetSave_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Substate_PresetSave_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Substate_PresetSave_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Substate_PresetSave_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6ba67e20e49ef0e2_35_boot)
HXDLIN(  35)		curSelected = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_6ba67e20e49ef0e2_46_boot)
HXDLIN(  46)		nameResult = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6ba67e20e49ef0e2_47_boot)
HXDLIN(  47)		coming = HX_("",00,00,00,00);
            	}
}


// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_MenuModifiers
#include <MenuModifiers.h>
#endif
#ifndef INCLUDED_ModifierVariables
#include <ModifierVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Substate_Preset
#include <Substate_Preset.h>
#endif
#ifndef INCLUDED_Substate_PresetLoad
#include <Substate_PresetLoad.h>
#endif
#ifndef INCLUDED_Substate_PresetSave
#include <Substate_PresetSave.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_40534470161e02ab_86_new,"Substate_Preset","new",0xdbf073ff,"Substate_Preset.new","Substate_Preset.hx",86,0xdb1a5051)
HX_DEFINE_STACK_FRAME(_hx_pos_40534470161e02ab_28_new,"Substate_Preset","new",0xdbf073ff,"Substate_Preset.new","Substate_Preset.hx",28,0xdb1a5051)
static const ::String _hx_array_data_3c91088d_3[] = {
	HX_("clear",8d,71,5b,48),HX_("save",3d,8b,4d,4c),HX_("load",26,9a,b7,47),
};
static const ::String _hx_array_data_3c91088d_4[] = {
	HX_("clear",8d,71,5b,48),HX_("save",3d,8b,4d,4c),HX_("no",41,60,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_40534470161e02ab_173_update,"Substate_Preset","update",0xfbc9afca,"Substate_Preset.update","Substate_Preset.hx",173,0xdb1a5051)
HX_LOCAL_STACK_FRAME(_hx_pos_40534470161e02ab_93_update,"Substate_Preset","update",0xfbc9afca,"Substate_Preset.update","Substate_Preset.hx",93,0xdb1a5051)
HX_LOCAL_STACK_FRAME(_hx_pos_40534470161e02ab_118_update,"Substate_Preset","update",0xfbc9afca,"Substate_Preset.update","Substate_Preset.hx",118,0xdb1a5051)
HX_LOCAL_STACK_FRAME(_hx_pos_40534470161e02ab_139_update,"Substate_Preset","update",0xfbc9afca,"Substate_Preset.update","Substate_Preset.hx",139,0xdb1a5051)
HX_LOCAL_STACK_FRAME(_hx_pos_40534470161e02ab_163_update,"Substate_Preset","update",0xfbc9afca,"Substate_Preset.update","Substate_Preset.hx",163,0xdb1a5051)
HX_LOCAL_STACK_FRAME(_hx_pos_40534470161e02ab_151_update,"Substate_Preset","update",0xfbc9afca,"Substate_Preset.update","Substate_Preset.hx",151,0xdb1a5051)
HX_LOCAL_STACK_FRAME(_hx_pos_40534470161e02ab_187_changeItem,"Substate_Preset","changeItem",0xd4eb98e4,"Substate_Preset.changeItem","Substate_Preset.hx",187,0xdb1a5051)
HX_LOCAL_STACK_FRAME(_hx_pos_40534470161e02ab_32_boot,"Substate_Preset","boot",0x8e8e0bb3,"Substate_Preset.boot","Substate_Preset.hx",32,0xdb1a5051)

void Substate_Preset_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Substate_Preset,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_40534470161e02ab_86_new)
HXLINE(  86)			_gthis->selectable = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_40534470161e02ab_28_new)
HXLINE(  90)		this->selectable = false;
HXLINE(  40)		this->blackBarThingie =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,1,-16777216,null(),null());
HXLINE(  36)		this->camLerp = ((Float)0.16);
HXLINE(  34)		this->goingBack = false;
HXLINE(  42)		 ::Substate_Preset _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  44)		super::__construct();
HXLINE(  46)		this->add(this->blackBarThingie);
HXLINE(  47)		this->blackBarThingie->scrollFactor->set(null(),null());
HXLINE(  48)		this->blackBarThingie->scale->set_y(( (Float)(0) ));
HXLINE(  49)		::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("scale.y",95,2d,07,65),230)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
HXLINE(  51)		::Substate_Preset_obj::presets = ::sys::FileSystem_obj::readDirectory(HX_("presets/modifiers",61,1c,9e,92));
HXLINE(  52)		::Substate_Preset_obj::presets->remove(HX_("current",39,9c,e3,cb));
HXLINE(  54)		::haxe::Log_obj::trace(::Substate_Preset_obj::presets,::hx::SourceInfo(HX_("source/Substate_Preset.hx",45,2c,36,22),54,HX_("Substate_Preset",8d,08,91,3c),HX_("new",60,d0,53,00)));
HXLINE(  56)		if ((::Substate_Preset_obj::presets->length > 0)) {
HXLINE(  57)			this->optionShit = ::Array_obj< ::String >::fromData( _hx_array_data_3c91088d_3,3);
            		}
            		else {
HXLINE(  59)			this->optionShit = ::Array_obj< ::String >::fromData( _hx_array_data_3c91088d_4,3);
            		}
HXLINE(  61)		this->menuItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  62)		this->add(this->menuItems);
HXLINE(  64)		::String library = null();
HXDLIN(  64)		::String tex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Modi_Buttons",29,32,9e,1a)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(  64)		 ::flixel::graphics::frames::FlxAtlasFrames tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(tex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Modi_Buttons",29,32,9e,1a)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  66)		{
HXLINE(  66)			int _g = 0;
HXDLIN(  66)			int _g1 = this->optionShit->length;
HXDLIN(  66)			while((_g < _g1)){
HXLINE(  66)				_g = (_g + 1);
HXDLIN(  66)				int i = (_g - 1);
HXLINE(  68)				 ::flixel::FlxSprite menuItem =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(  69)				menuItem->set_frames(tex1);
HXLINE(  70)				menuItem->animation->addByPrefix(HX_("standard",3d,37,78,ea),this->optionShit->__get(i),24,true,null(),null());
HXLINE(  71)				menuItem->animation->play(HX_("standard",3d,37,78,ea),null(),null(),null());
HXLINE(  72)				menuItem->ID = i;
HXLINE(  73)				this->menuItems->add(menuItem).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  74)				menuItem->scrollFactor->set(null(),null());
HXLINE(  75)				menuItem->set_antialiasing(true);
HXLINE(  76)				menuItem->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  77)				menuItem->scrollFactor->set_y(( (Float)(0) ));
HXLINE(  79)				Float _hx_tmp = (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ));
HXDLIN(  79)				menuItem->set_y((_hx_tmp - (menuItem->get_height() / ( (Float)(2) ))));
HXLINE(  80)				menuItem->set_x(( (Float)((80 + (i * 300))) ));
HXLINE(  81)				menuItem->scale->set(0,0);
            			}
            		}
HXLINE(  84)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}

Dynamic Substate_Preset_obj::__CreateEmpty() { return new Substate_Preset_obj; }

void *Substate_Preset_obj::_hx_vtable = 0;

Dynamic Substate_Preset_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Substate_Preset_obj > _hx_result = new Substate_Preset_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Substate_Preset_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x08b7edcd) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x08b7edcd;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void Substate_Preset_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::Substate_Preset,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_GC_STACKFRAME(&_hx_pos_40534470161e02ab_173_update)
HXLINE( 173)			if (!(_gthis->goingBack)) {
HXLINE( 175)				int _hx_tmp = (250 + (spr->ID * 400));
HXDLIN( 175)				spr->set_x((( (Float)(_hx_tmp) ) - (spr->get_width() / ( (Float)(2) ))));
HXLINE( 176)				Float a = spr->scale->x;
HXDLIN( 176)				Float a1 = spr->scale->y;
HXDLIN( 176)				spr->scale->set((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(1) ) - a))),(a1 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(1) ) - a1))));
HXLINE( 178)				if ((spr->ID == ::Substate_Preset_obj::curSelected)) {
HXLINE( 179)					Float a = spr->scale->x;
HXDLIN( 179)					Float a1 = spr->scale->y;
HXDLIN( 179)					spr->scale->set((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)1.5) - a))),(a1 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)1.5) - a1))));
            				}
            			}
            			else {
HXLINE( 182)				Float a = spr->scale->x;
HXDLIN( 182)				Float a1 = spr->scale->y;
HXDLIN( 182)				spr->scale->set((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(0) ) - a))),(a1 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(0) ) - a1))));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_40534470161e02ab_93_update)
HXLINE(  92)		 ::Substate_Preset _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  94)		this->super::update(elapsed);
HXLINE(  96)		 ::flixel::FlxSprite _hx_tmp = this->blackBarThingie;
HXDLIN(  96)		_hx_tmp->set_y((( (Float)(360) ) - (this->blackBarThingie->get_height() / ( (Float)(2) ))));
HXLINE(  98)		bool _hx_tmp1;
HXDLIN(  98)		if (this->selectable) {
HXLINE(  98)			_hx_tmp1 = !(this->goingBack);
            		}
            		else {
HXLINE(  98)			_hx_tmp1 = false;
            		}
HXDLIN(  98)		if (_hx_tmp1) {
HXLINE( 100)			if (::PlayerSettings_obj::player1->controls->_leftP->check()) {
HXLINE( 102)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 102)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 102)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 103)				this->changeItem(-1);
            			}
HXLINE( 106)			if (::PlayerSettings_obj::player1->controls->_rightP->check()) {
HXLINE( 108)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 108)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 108)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 109)				this->changeItem(1);
            			}
HXLINE( 112)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_40534470161e02ab_118_update)
HXLINE( 119)					::flixel::FlxG_obj::game->_state->closeSubState();
HXLINE( 120)					::MenuModifiers_obj::substated = false;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 114)				this->goingBack = true;
HXLINE( 115)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 115)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null());
HXDLIN( 115)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 116)				::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("scale.y",95,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 117)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.6), ::Dynamic(new _hx_Closure_0()),null());
            			}
HXLINE( 124)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 126)				::String _hx_switch_0 = this->optionShit->__get(::Substate_Preset_obj::curSelected);
            				if (  (_hx_switch_0==HX_("clear",8d,71,5b,48)) ){
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_40534470161e02ab_139_update)
HXLINE( 140)						{
HXLINE( 140)							 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 140)							if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 140)								::flixel::FlxG_obj::game->_requestedState = nextState;
            							}
            						}
HXLINE( 141)						::MenuModifiers_obj::substated = false;
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 129)					::ModifierVariables_obj::nullify();
HXLINE( 130)					::MenuModifiers_obj::calculateStart();
HXLINE( 132)					this->goingBack = true;
HXLINE( 134)					::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("scale.y",95,2d,07,65),1500)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 135)					::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("y",79,00,00,00),750)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 137)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 137)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 137)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 138)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.6), ::Dynamic(new _hx_Closure_1()),null());
HXLINE( 128)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("load",26,9a,b7,47)) ){
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_40534470161e02ab_163_update)
HXLINE( 164)						 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 164)						_hx_tmp->openSubState( ::Substate_PresetLoad_obj::__alloc( HX_CTX ));
HXLINE( 165)						::flixel::FlxG_obj::game->_state->closeSubState();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 156)					this->goingBack = true;
HXLINE( 157)					::Substate_PresetLoad_obj::coming = HX_("Modifiers",1c,f1,ea,79);
HXLINE( 159)					::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("scale.x",94,2d,07,65),0)
            						->setFixed(1,HX_("scale.y",95,2d,07,65),1500)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 161)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 161)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 161)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 162)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.6), ::Dynamic(new _hx_Closure_2()),null());
HXLINE( 155)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("save",3d,8b,4d,4c)) ){
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_40534470161e02ab_151_update)
HXLINE( 152)						 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 152)						_hx_tmp->openSubState( ::Substate_PresetSave_obj::__alloc( HX_CTX ));
HXLINE( 153)						::flixel::FlxG_obj::game->_state->closeSubState();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 144)					this->goingBack = true;
HXLINE( 145)					::Substate_PresetSave_obj::coming = HX_("Modifiers",1c,f1,ea,79);
HXLINE( 147)					::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("scale.y",95,2d,07,65),1500)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 149)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 149)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 149)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 150)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.6), ::Dynamic(new _hx_Closure_3()),null());
HXLINE( 143)					goto _hx_goto_5;
            				}
            				_hx_goto_5:;
            			}
            		}
HXLINE( 171)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_4(_gthis)),null());
            	}


void Substate_Preset_obj::changeItem(::hx::Null< int >  __o_huh){
            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_40534470161e02ab_187_changeItem)
HXLINE( 188)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Substate_Preset >();
HXDLIN( 188)		::Substate_Preset_obj::curSelected = (::Substate_Preset_obj::curSelected + huh);
HXLINE( 190)		if ((::Substate_Preset_obj::curSelected >= this->menuItems->length)) {
HXLINE( 191)			::Substate_Preset_obj::curSelected = 0;
            		}
HXLINE( 192)		if ((::Substate_Preset_obj::curSelected < 0)) {
HXLINE( 193)			::Substate_Preset_obj::curSelected = (this->menuItems->length - 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Substate_Preset_obj,changeItem,(void))

int Substate_Preset_obj::curSelected;

::Array< ::String > Substate_Preset_obj::presets;


::hx::ObjectPtr< Substate_Preset_obj > Substate_Preset_obj::__new() {
	::hx::ObjectPtr< Substate_Preset_obj > __this = new Substate_Preset_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Substate_Preset_obj > Substate_Preset_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Substate_Preset_obj *__this = (Substate_Preset_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Substate_Preset_obj), true, "Substate_Preset"));
	*(void **)__this = Substate_Preset_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Substate_Preset_obj::Substate_Preset_obj()
{
}

void Substate_Preset_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Substate_Preset);
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(optionShit,"optionShit");
	HX_MARK_MEMBER_NAME(goingBack,"goingBack");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Substate_Preset_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(optionShit,"optionShit");
	HX_VISIT_MEMBER_NAME(goingBack,"goingBack");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Substate_Preset_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"goingBack") ) { return ::hx::Val( goingBack ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { return ::hx::Val( optionShit ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { return ::hx::Val( blackBarThingie ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Substate_Preset_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"presets") ) { outValue = ( presets ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val Substate_Preset_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"goingBack") ) { goingBack=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { optionShit=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { blackBarThingie=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Substate_Preset_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"presets") ) { presets=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Substate_Preset_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("optionShit",d5,2d,ee,91));
	outFields->push(HX_("goingBack",01,e7,bf,2f));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("blackBarThingie",56,00,c2,d2));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Substate_Preset_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Substate_Preset_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Substate_Preset_obj,optionShit),HX_("optionShit",d5,2d,ee,91)},
	{::hx::fsBool,(int)offsetof(Substate_Preset_obj,goingBack),HX_("goingBack",01,e7,bf,2f)},
	{::hx::fsFloat,(int)offsetof(Substate_Preset_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Substate_Preset_obj,blackBarThingie),HX_("blackBarThingie",56,00,c2,d2)},
	{::hx::fsBool,(int)offsetof(Substate_Preset_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Substate_Preset_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Substate_Preset_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Substate_Preset_obj::presets,HX_("presets",34,40,dc,39)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Substate_Preset_obj_sMemberFields[] = {
	HX_("menuItems",e1,15,e5,5c),
	HX_("optionShit",d5,2d,ee,91),
	HX_("goingBack",01,e7,bf,2f),
	HX_("camLerp",26,66,a1,d2),
	HX_("blackBarThingie",56,00,c2,d2),
	HX_("selectable",96,b6,2a,c4),
	HX_("update",09,86,05,87),
	HX_("changeItem",a3,fa,08,20),
	::String(null()) };

static void Substate_Preset_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Substate_Preset_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(Substate_Preset_obj::presets,"presets");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Substate_Preset_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Substate_Preset_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(Substate_Preset_obj::presets,"presets");
};

#endif

::hx::Class Substate_Preset_obj::__mClass;

static ::String Substate_Preset_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("presets",34,40,dc,39),
	::String(null())
};

void Substate_Preset_obj::__register()
{
	Substate_Preset_obj _hx_dummy;
	Substate_Preset_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Substate_Preset",8d,08,91,3c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Substate_Preset_obj::__GetStatic;
	__mClass->mSetStaticField = &Substate_Preset_obj::__SetStatic;
	__mClass->mMarkFunc = Substate_Preset_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Substate_Preset_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Substate_Preset_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Substate_Preset_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Substate_Preset_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Substate_Preset_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Substate_Preset_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Substate_Preset_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_40534470161e02ab_32_boot)
HXDLIN(  32)		curSelected = 0;
            	}
}


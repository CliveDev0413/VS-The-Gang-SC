// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_MenuFreeplay
#include <MenuFreeplay.h>
#endif
#ifndef INCLUDED_MenuWeek
#include <MenuWeek.h>
#endif
#ifndef INCLUDED_ModifierVariables
#include <ModifierVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_RankingSubstate
#include <RankingSubstate.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d12cfcc2fec6fc82_18_new,"RankingSubstate","new",0xd7d7a9b9,"RankingSubstate.new","RankingSubstate.hx",18,0x6e06afd7)
HX_LOCAL_STACK_FRAME(_hx_pos_d12cfcc2fec6fc82_102_update,"RankingSubstate","update",0xad834a50,"RankingSubstate.update","RankingSubstate.hx",102,0x6e06afd7)
HX_LOCAL_STACK_FRAME(_hx_pos_d12cfcc2fec6fc82_162_destroy,"RankingSubstate","destroy",0xac1426d3,"RankingSubstate.destroy","RankingSubstate.hx",162,0x6e06afd7)
HX_LOCAL_STACK_FRAME(_hx_pos_d12cfcc2fec6fc82_169_generateRanking,"RankingSubstate","generateRanking",0xc055d6da,"RankingSubstate.generateRanking","RankingSubstate.hx",169,0x6e06afd7)

void RankingSubstate_obj::__construct(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_d12cfcc2fec6fc82_18_new)
HXLINE(  26)		this->rankingNum = 15;
HXLINE(  25)		this->ranking = HX_("N/A",00,59,3b,00);
HXLINE(  24)		this->comboRank = HX_("N/A",00,59,3b,00);
HXLINE(  23)		this->combo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,730,null());
HXLINE(  22)		this->rank =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,730,null());
HXLINE(  30)		super::__construct();
HXLINE(  32)		this->generateRanking();
HXLINE(  33)		::Highscore_obj::saveRank(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),this->rankingNum,::PlayState_obj::storyDifficulty);
HXLINE(  34)		 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(  34)		::String library = null();
HXDLIN(  34)		this->pauseMusic = _hx_tmp->loadEmbedded(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("breakfast",db,b2,0c,49)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),true,true,null());
HXLINE(  35)		this->pauseMusic->set_volume(( (Float)(0) ));
HXLINE(  36)		 ::flixel::_hx_system::FlxSound _hx_tmp1 = this->pauseMusic;
HXDLIN(  36)		 ::flixel::math::FlxRandom _hx_tmp2 = ::flixel::FlxG_obj::random;
HXDLIN(  36)		_hx_tmp1->play(false,_hx_tmp2->_hx_int(0,::Std_obj::_hx_int((this->pauseMusic->_length / ( (Float)(2) ))),null()),null());
HXLINE(  38)		::flixel::FlxG_obj::sound->list->add(this->pauseMusic).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(  40)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE(  41)		bg->set_alpha(( (Float)(0) ));
HXLINE(  42)		bg->scrollFactor->set(null(),null());
HXLINE(  43)		this->add(bg);
HXLINE(  45)		 ::flixel::FlxSprite _hx_tmp3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-20,40,null());
HXDLIN(  45)		::String library1 = null();
HXDLIN(  45)		this->rank = _hx_tmp3->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("rankings/",92,90,1d,00) + this->ranking)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE(  46)		this->rank->scrollFactor->set(null(),null());
HXLINE(  47)		this->add(this->rank);
HXLINE(  48)		this->rank->set_antialiasing(true);
HXLINE(  49)		this->rank->setGraphicSize(0,450);
HXLINE(  50)		this->rank->updateHitbox();
HXLINE(  51)		this->rank->screenCenter(null());
HXLINE(  53)		 ::flixel::FlxSprite _hx_tmp4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-20,40,null());
HXDLIN(  53)		::String library2 = null();
HXDLIN(  53)		this->combo = _hx_tmp4->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("rankings/",92,90,1d,00) + this->comboRank)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE(  54)		this->combo->scrollFactor->set(null(),null());
HXLINE(  55)		this->combo->screenCenter(null());
HXLINE(  56)		 ::flixel::FlxSprite _hx_tmp5 = this->combo;
HXDLIN(  56)		Float _hx_tmp6 = this->rank->x;
HXDLIN(  56)		_hx_tmp5->set_x((_hx_tmp6 - (this->combo->get_width() / ( (Float)(2) ))));
HXLINE(  57)		 ::flixel::FlxSprite _hx_tmp7 = this->combo;
HXDLIN(  57)		Float _hx_tmp8 = this->rank->y;
HXDLIN(  57)		_hx_tmp7->set_y((_hx_tmp8 - (this->combo->get_height() / ( (Float)(2) ))));
HXLINE(  58)		this->add(this->combo);
HXLINE(  59)		this->combo->set_antialiasing(true);
HXLINE(  60)		this->combo->setGraphicSize(0,130);
HXLINE(  62)		 ::flixel::text::FlxText press =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,15,0,HX_("Press ANY to continue.",33,ea,6d,33),32,null());
HXLINE(  63)		press->scrollFactor->set(null(),null());
HXLINE(  64)		press->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,null(),null(),null(),null(),null());
HXLINE(  65)		{
HXLINE(  65)			press->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(  65)			press->set_borderColor(-16777216);
HXDLIN(  65)			press->set_borderSize(( (Float)(5) ));
HXDLIN(  65)			press->set_borderQuality(( (Float)(1) ));
            		}
HXLINE(  66)		press->updateHitbox();
HXLINE(  67)		this->add(press);
HXLINE(  69)		 ::flixel::text::FlxText hint =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,15,0,HX_("You passed. Try getting under 10 misses for SDCB",88,ae,ef,f2),32,null());
HXLINE(  70)		hint->scrollFactor->set(null(),null());
HXLINE(  71)		hint->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,null(),null(),null(),null(),null());
HXLINE(  72)		{
HXLINE(  72)			hint->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(  72)			hint->set_borderColor(-16777216);
HXDLIN(  72)			hint->set_borderSize(( (Float)(5) ));
HXDLIN(  72)			hint->set_borderQuality(( (Float)(1) ));
            		}
HXLINE(  73)		hint->updateHitbox();
HXLINE(  74)		this->add(hint);
HXLINE(  76)		::String _hx_switch_0 = this->comboRank;
            		if (  (_hx_switch_0==HX_("FC",3d,3d,00,00)) ){
HXLINE(  83)			hint->set_text(HX_("Good job. Try getting goods at minimum for GFC.",e9,31,af,31));
HXDLIN(  83)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("GFC",44,1d,36,00)) ){
HXLINE(  81)			hint->set_text(HX_("You're doing great! Try getting only sicks for MFC",b3,d5,e2,1e));
HXDLIN(  81)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("MFC",ca,aa,3a,00)) ){
HXLINE(  79)			hint->set_text(HX_("Congrats! You're perfect!",27,99,5b,94));
HXDLIN(  79)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("SDCB",70,89,10,37)) ){
HXLINE(  85)			hint->set_text(HX_("Nice. Try not missing at all for FC.",49,84,35,02));
HXDLIN(  85)			goto _hx_goto_0;
            		}
            		_hx_goto_0:;
HXLINE(  87)		hint->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  89)		hint->set_alpha(press->set_alpha(( (Float)(0) )));
HXLINE(  91)		press->screenCenter(null());
HXLINE(  92)		press->set_y((( (Float)(670) ) - press->get_height()));
HXLINE(  94)		::flixel::tweens::FlxTween_obj::tween(bg, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.6))),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE(  95)		Float _hx_tmp9 = (( (Float)(690) ) - press->get_height());
HXDLIN(  95)		::flixel::tweens::FlxTween_obj::tween(press, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),_hx_tmp9)
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.3))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE(  96)		Float _hx_tmp10 = (( (Float)(645) ) - hint->get_height());
HXDLIN(  96)		::flixel::tweens::FlxTween_obj::tween(hint, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),_hx_tmp10)
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.3))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE(  98)		this->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::FlxG_obj::cameras->list->__get((::flixel::FlxG_obj::cameras->list->length - 1)).StaticCast<  ::flixel::FlxCamera >()));
            	}

Dynamic RankingSubstate_obj::__CreateEmpty() { return new RankingSubstate_obj; }

void *RankingSubstate_obj::_hx_vtable = 0;

Dynamic RankingSubstate_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RankingSubstate_obj > _hx_result = new RankingSubstate_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool RankingSubstate_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x562f3e87) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x562f3e87;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void RankingSubstate_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_d12cfcc2fec6fc82_102_update)
HXLINE( 103)		if ((this->pauseMusic->_volume < ((((Float)0.5) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) )) / ( (Float)(100) )))) {
HXLINE( 104)			 ::flixel::_hx_system::FlxSound _g = this->pauseMusic;
HXDLIN( 104)			_g->set_volume((_g->_volume + (((((Float)0.01) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) )) / ( (Float)(100) )) * elapsed)));
            		}
HXLINE( 106)		this->super::update(elapsed);
HXLINE( 108)		bool _hx_tmp;
HXDLIN( 108)		if (!(( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY())) {
HXLINE( 108)			_hx_tmp = ( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("Practice",db,bc,98,7a),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 108)			_hx_tmp = true;
            		}
HXDLIN( 108)		if (_hx_tmp) {
HXLINE( 110)			::PlayState_obj::ended = false;
HXLINE( 112)			::String _hx_switch_0 = ::PlayState_obj::gameplayArea;
            			if (  (_hx_switch_0==HX_("Freeplay",c0,4c,38,fc)) ){
HXLINE( 156)				 ::flixel::FlxState nextState =  ::MenuFreeplay_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 156)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 156)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
HXDLIN( 156)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("Story",d5,83,43,17)) ){
HXLINE( 115)				if ((::PlayState_obj::storyPlaylist->length <= 0)) {
HXLINE( 117)					::String _hx_switch_1 = ( (::String)(::MainVariables_obj::_variables->__Field(HX_("music",a5,d0,5a,10),::hx::paccDynamic)) );
            					if (  (_hx_switch_1==HX_("classic",12,52,91,69)) ){
HXLINE( 120)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 120)						::String library = null();
HXDLIN( 120)						::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN( 120)						_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE( 121)						::Conductor_obj::changeBPM(( (Float)(102) ));
HXLINE( 119)						goto _hx_goto_3;
            					}
            					if (  (_hx_switch_1==HX_("funky",ad,f7,88,08)) ){
HXLINE( 123)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 123)						::String library = null();
HXDLIN( 123)						::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("funkyMenu",ec,43,55,b5)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN( 123)						_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE( 124)						::Conductor_obj::changeBPM(( (Float)(140) ));
HXLINE( 122)						goto _hx_goto_3;
            					}
            					_hx_goto_3:;
HXLINE( 126)					{
HXLINE( 126)						 ::flixel::FlxState nextState =  ::MenuWeek_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 126)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 126)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            				}
            				else {
HXLINE( 130)					::String difficulty = HX_("",00,00,00,00);
HXLINE( 132)					if ((::PlayState_obj::storyDifficulty == 0)) {
HXLINE( 133)						difficulty = HX_("-noob",41,2e,12,32);
            					}
HXLINE( 135)					if ((::PlayState_obj::storyDifficulty == 1)) {
HXLINE( 136)						difficulty = HX_("-easy",af,a6,14,2c);
            					}
HXLINE( 138)					if ((::PlayState_obj::storyDifficulty == 3)) {
HXLINE( 139)						difficulty = HX_("-hard",98,49,10,2e);
            					}
HXLINE( 141)					if ((::PlayState_obj::storyDifficulty == 4)) {
HXLINE( 142)						difficulty = HX_("-expert",d7,da,bb,13);
            					}
HXLINE( 144)					if ((::PlayState_obj::storyDifficulty == 5)) {
HXLINE( 145)						difficulty = HX_("-insane",97,16,20,ed);
            					}
HXLINE( 147)					::haxe::Log_obj::trace(HX_("LOADING NEXT SONG",5e,07,d0,ca),::hx::SourceInfo(HX_("source/RankingSubstate.hx",cb,8b,22,b5),147,HX_("RankingSubstate",47,59,08,8a),HX_("update",09,86,05,87)));
HXLINE( 148)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 148)					::String _hx_tmp1 = (::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + difficulty);
HXDLIN( 148)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/RankingSubstate.hx",cb,8b,22,b5),148,HX_("RankingSubstate",47,59,08,8a),HX_("update",09,86,05,87)));
HXLINE( 150)					::String _hx_tmp2 = (::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + difficulty);
HXDLIN( 150)					::PlayState_obj::SONG = ::Song_obj::loadFromJson(_hx_tmp2,::PlayState_obj::storyPlaylist->__get(0));
HXLINE( 151)					{
HXLINE( 151)						 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 151)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE( 153)					{
HXLINE( 153)						 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN( 153)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 153)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            				}
HXLINE( 115)				goto _hx_goto_2;
            			}
            			_hx_goto_2:;
            		}
            	}


void RankingSubstate_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_d12cfcc2fec6fc82_162_destroy)
HXLINE( 163)		this->pauseMusic->destroy();
HXLINE( 165)		this->super::destroy();
            	}


::String RankingSubstate_obj::generateRanking(){
            	HX_STACKFRAME(&_hx_pos_d12cfcc2fec6fc82_169_generateRanking)
HXLINE( 170)		bool _hx_tmp;
HXDLIN( 170)		bool _hx_tmp1;
HXDLIN( 170)		bool _hx_tmp2;
HXDLIN( 170)		if ((::PlayState_obj::misses == 0)) {
HXLINE( 170)			_hx_tmp2 = (::PlayState_obj::bads == 0);
            		}
            		else {
HXLINE( 170)			_hx_tmp2 = false;
            		}
HXDLIN( 170)		if (_hx_tmp2) {
HXLINE( 170)			_hx_tmp1 = (::PlayState_obj::shits == 0);
            		}
            		else {
HXLINE( 170)			_hx_tmp1 = false;
            		}
HXDLIN( 170)		if (_hx_tmp1) {
HXLINE( 170)			_hx_tmp = (::PlayState_obj::goods == 0);
            		}
            		else {
HXLINE( 170)			_hx_tmp = false;
            		}
HXDLIN( 170)		if (_hx_tmp) {
HXLINE( 171)			this->comboRank = HX_("MFC",ca,aa,3a,00);
            		}
            		else {
HXLINE( 172)			bool _hx_tmp;
HXDLIN( 172)			bool _hx_tmp1;
HXDLIN( 172)			bool _hx_tmp2;
HXDLIN( 172)			if ((::PlayState_obj::misses == 0)) {
HXLINE( 172)				_hx_tmp2 = (::PlayState_obj::bads == 0);
            			}
            			else {
HXLINE( 172)				_hx_tmp2 = false;
            			}
HXDLIN( 172)			if (_hx_tmp2) {
HXLINE( 172)				_hx_tmp1 = (::PlayState_obj::shits == 0);
            			}
            			else {
HXLINE( 172)				_hx_tmp1 = false;
            			}
HXDLIN( 172)			if (_hx_tmp1) {
HXLINE( 172)				_hx_tmp = (::PlayState_obj::goods >= 1);
            			}
            			else {
HXLINE( 172)				_hx_tmp = false;
            			}
HXDLIN( 172)			if (_hx_tmp) {
HXLINE( 173)				this->comboRank = HX_("GFC",44,1d,36,00);
            			}
            			else {
HXLINE( 174)				if ((::PlayState_obj::misses == 0)) {
HXLINE( 175)					this->comboRank = HX_("FC",3d,3d,00,00);
            				}
            				else {
HXLINE( 176)					if ((::PlayState_obj::misses < 10)) {
HXLINE( 177)						this->comboRank = HX_("SDCB",70,89,10,37);
            					}
            				}
            			}
            		}
HXLINE( 181)		::Array< bool > wifeConditions = ::Array_obj< bool >::__new(16)->init(0,(::PlayState_obj::accuracy >= ((Float)99.9935)))->init(1,(::PlayState_obj::accuracy >= ((Float)99.980)))->init(2,(::PlayState_obj::accuracy >= ((Float)99.950)))->init(3,(::PlayState_obj::accuracy >= ((Float)99.90)))->init(4,(::PlayState_obj::accuracy >= ((Float)99.80)))->init(5,(::PlayState_obj::accuracy >= ((Float)99.70)))->init(6,(::PlayState_obj::accuracy >= ((Float)99.50)))->init(7,(::PlayState_obj::accuracy >= 99))->init(8,(::PlayState_obj::accuracy >= ((Float)96.50)))->init(9,(::PlayState_obj::accuracy >= 93))->init(10,(::PlayState_obj::accuracy >= 90))->init(11,(::PlayState_obj::accuracy >= 85))->init(12,(::PlayState_obj::accuracy >= 80))->init(13,(::PlayState_obj::accuracy >= 70))->init(14,(::PlayState_obj::accuracy >= 60))->init(15,(::PlayState_obj::accuracy < 60));
HXLINE( 200)		{
HXLINE( 200)			int _g = 0;
HXDLIN( 200)			int _g1 = wifeConditions->length;
HXDLIN( 200)			while((_g < _g1)){
HXLINE( 200)				_g = (_g + 1);
HXDLIN( 200)				int i = (_g - 1);
HXLINE( 202)				bool b = wifeConditions->__get(i);
HXLINE( 203)				if (b) {
HXLINE( 205)					this->rankingNum = i;
HXLINE( 206)					switch((int)(i)){
            						case (int)0: {
HXLINE( 209)							this->ranking = HX_("P",50,00,00,00);
            						}
            						break;
            						case (int)1: {
HXLINE( 211)							this->ranking = HX_("X",58,00,00,00);
            						}
            						break;
            						case (int)2: {
HXLINE( 213)							this->ranking = HX_("X-",d5,4c,00,00);
            						}
            						break;
            						case (int)3: {
HXLINE( 215)							this->ranking = HX_("SS+",8b,43,3f,00);
            						}
            						break;
            						case (int)4: {
HXLINE( 217)							this->ranking = HX_("SS",a0,48,00,00);
            						}
            						break;
            						case (int)5: {
HXLINE( 219)							this->ranking = HX_("SS-",8d,43,3f,00);
            						}
            						break;
            						case (int)6: {
HXLINE( 221)							this->ranking = HX_("S+",78,48,00,00);
            						}
            						break;
            						case (int)7: {
HXLINE( 223)							this->ranking = HX_("S",53,00,00,00);
            						}
            						break;
            						case (int)8: {
HXLINE( 225)							this->ranking = HX_("S-",7a,48,00,00);
            						}
            						break;
            						case (int)9: {
HXLINE( 227)							this->ranking = HX_("A+",ca,38,00,00);
            						}
            						break;
            						case (int)10: {
HXLINE( 229)							this->ranking = HX_("A",41,00,00,00);
            						}
            						break;
            						case (int)11: {
HXLINE( 231)							this->ranking = HX_("A-",cc,38,00,00);
            						}
            						break;
            						case (int)12: {
HXLINE( 233)							this->ranking = HX_("B",42,00,00,00);
            						}
            						break;
            						case (int)13: {
HXLINE( 235)							this->ranking = HX_("C",43,00,00,00);
            						}
            						break;
            						case (int)14: {
HXLINE( 237)							this->ranking = HX_("D",44,00,00,00);
            						}
            						break;
            						case (int)15: {
HXLINE( 239)							this->ranking = HX_("E",45,00,00,00);
            						}
            						break;
            					}
HXLINE( 241)					goto _hx_goto_6;
            				}
            			}
            			_hx_goto_6:;
            		}
HXLINE( 244)		return this->ranking;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RankingSubstate_obj,generateRanking,return )


::hx::ObjectPtr< RankingSubstate_obj > RankingSubstate_obj::__new(Float x,Float y) {
	::hx::ObjectPtr< RankingSubstate_obj > __this = new RankingSubstate_obj();
	__this->__construct(x,y);
	return __this;
}

::hx::ObjectPtr< RankingSubstate_obj > RankingSubstate_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y) {
	RankingSubstate_obj *__this = (RankingSubstate_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RankingSubstate_obj), true, "RankingSubstate"));
	*(void **)__this = RankingSubstate_obj::_hx_vtable;
	__this->__construct(x,y);
	return __this;
}

RankingSubstate_obj::RankingSubstate_obj()
{
}

void RankingSubstate_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RankingSubstate);
	HX_MARK_MEMBER_NAME(pauseMusic,"pauseMusic");
	HX_MARK_MEMBER_NAME(rank,"rank");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(comboRank,"comboRank");
	HX_MARK_MEMBER_NAME(ranking,"ranking");
	HX_MARK_MEMBER_NAME(rankingNum,"rankingNum");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void RankingSubstate_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pauseMusic,"pauseMusic");
	HX_VISIT_MEMBER_NAME(rank,"rank");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(comboRank,"comboRank");
	HX_VISIT_MEMBER_NAME(ranking,"ranking");
	HX_VISIT_MEMBER_NAME(rankingNum,"rankingNum");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val RankingSubstate_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rank") ) { return ::hx::Val( rank ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ranking") ) { return ::hx::Val( ranking ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"comboRank") ) { return ::hx::Val( comboRank ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pauseMusic") ) { return ::hx::Val( pauseMusic ); }
		if (HX_FIELD_EQ(inName,"rankingNum") ) { return ::hx::Val( rankingNum ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"generateRanking") ) { return ::hx::Val( generateRanking_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val RankingSubstate_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rank") ) { rank=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ranking") ) { ranking=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"comboRank") ) { comboRank=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pauseMusic") ) { pauseMusic=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rankingNum") ) { rankingNum=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RankingSubstate_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pauseMusic",cf,6d,d3,e5));
	outFields->push(HX_("rank",ac,4d,a4,4b));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("comboRank",1a,e1,cf,63));
	outFields->push(HX_("ranking",b6,92,4a,ea));
	outFields->push(HX_("rankingNum",30,19,a5,19));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RankingSubstate_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(RankingSubstate_obj,pauseMusic),HX_("pauseMusic",cf,6d,d3,e5)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(RankingSubstate_obj,rank),HX_("rank",ac,4d,a4,4b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(RankingSubstate_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsString,(int)offsetof(RankingSubstate_obj,comboRank),HX_("comboRank",1a,e1,cf,63)},
	{::hx::fsString,(int)offsetof(RankingSubstate_obj,ranking),HX_("ranking",b6,92,4a,ea)},
	{::hx::fsInt,(int)offsetof(RankingSubstate_obj,rankingNum),HX_("rankingNum",30,19,a5,19)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *RankingSubstate_obj_sStaticStorageInfo = 0;
#endif

static ::String RankingSubstate_obj_sMemberFields[] = {
	HX_("pauseMusic",cf,6d,d3,e5),
	HX_("rank",ac,4d,a4,4b),
	HX_("combo",4e,28,5d,4a),
	HX_("comboRank",1a,e1,cf,63),
	HX_("ranking",b6,92,4a,ea),
	HX_("rankingNum",30,19,a5,19),
	HX_("update",09,86,05,87),
	HX_("destroy",fa,2c,86,24),
	HX_("generateRanking",01,dc,04,c6),
	::String(null()) };

::hx::Class RankingSubstate_obj::__mClass;

void RankingSubstate_obj::__register()
{
	RankingSubstate_obj _hx_dummy;
	RankingSubstate_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("RankingSubstate",47,59,08,8a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RankingSubstate_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RankingSubstate_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RankingSubstate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RankingSubstate_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}


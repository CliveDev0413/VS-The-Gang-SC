// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_Marathon_Edit
#include <Marathon_Edit.h>
#endif
#ifndef INCLUDED_Marathon_Substate
#include <Marathon_Substate.h>
#endif
#ifndef INCLUDED_MenuMarathon
#include <MenuMarathon.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fea370457237ae3d_58_new,"Marathon_Edit","new",0x9efdcf85,"Marathon_Edit.new","Marathon_Edit.hx",58,0xd1a5478b)
HX_DEFINE_STACK_FRAME(_hx_pos_fea370457237ae3d_30_new,"Marathon_Edit","new",0x9efdcf85,"Marathon_Edit.new","Marathon_Edit.hx",30,0xd1a5478b)
HX_LOCAL_STACK_FRAME(_hx_pos_fea370457237ae3d_65_update,"Marathon_Edit","update",0x5dd9cc04,"Marathon_Edit.update","Marathon_Edit.hx",65,0xd1a5478b)
HX_LOCAL_STACK_FRAME(_hx_pos_fea370457237ae3d_94_update,"Marathon_Edit","update",0x5dd9cc04,"Marathon_Edit.update","Marathon_Edit.hx",94,0xd1a5478b)
HX_LOCAL_STACK_FRAME(_hx_pos_fea370457237ae3d_118_changeSelection,"Marathon_Edit","changeSelection",0x92b43b61,"Marathon_Edit.changeSelection","Marathon_Edit.hx",118,0xd1a5478b)
HX_LOCAL_STACK_FRAME(_hx_pos_fea370457237ae3d_149_updateText,"Marathon_Edit","updateText",0x021d16d1,"Marathon_Edit.updateText","Marathon_Edit.hx",149,0xd1a5478b)
HX_LOCAL_STACK_FRAME(_hx_pos_fea370457237ae3d_34_boot,"Marathon_Edit","boot",0x7730c56d,"Marathon_Edit.boot","Marathon_Edit.hx",34,0xd1a5478b)

void Marathon_Edit_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Marathon_Edit,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_fea370457237ae3d_58_new)
HXLINE(  58)			_gthis->selectable = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_fea370457237ae3d_30_new)
HXLINE(  62)		this->selectable = false;
HXLINE(  40)		this->blackBarThingie =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE(  38)		this->camLerp = ((Float)0.16);
HXLINE(  36)		this->goingBack = false;
HXLINE(  42)		 ::Marathon_Edit _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  44)		super::__construct();
HXLINE(  46)		this->add(this->blackBarThingie);
HXLINE(  47)		this->blackBarThingie->scrollFactor->set(null(),null());
HXLINE(  48)		this->blackBarThingie->scale->set_x(( (Float)(0) ));
HXLINE(  49)		::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("scale.x",94,2d,07,65),900)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
HXLINE(  51)		this->grpSongs =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  52)		this->add(this->grpSongs);
HXLINE(  54)		this->updateText();
HXLINE(  56)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}

Dynamic Marathon_Edit_obj::__CreateEmpty() { return new Marathon_Edit_obj; }

void *Marathon_Edit_obj::_hx_vtable = 0;

Dynamic Marathon_Edit_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Marathon_Edit_obj > _hx_result = new Marathon_Edit_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Marathon_Edit_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x5383de8b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x5383de8b;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void Marathon_Edit_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_fea370457237ae3d_65_update)
HXLINE(  66)		this->super::update(elapsed);
HXLINE(  68)		this->blackBarThingie->screenCenter(null());
HXLINE(  70)		bool _hx_tmp;
HXDLIN(  70)		if (this->selectable) {
HXLINE(  70)			_hx_tmp = !(this->goingBack);
            		}
            		else {
HXLINE(  70)			_hx_tmp = false;
            		}
HXDLIN(  70)		if (_hx_tmp) {
HXLINE(  72)			if (::PlayerSettings_obj::player1->controls->_upP->check()) {
HXLINE(  74)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  74)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN(  74)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE(  75)				this->changeSelection(-1);
            			}
HXLINE(  78)			if (::PlayerSettings_obj::player1->controls->_downP->check()) {
HXLINE(  80)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  80)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN(  80)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE(  81)				this->changeSelection(1);
            			}
HXLINE(  84)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_fea370457237ae3d_94_update)
HXLINE(  95)					::flixel::FlxG_obj::game->_state->closeSubState();
HXLINE(  96)					 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN(  96)					_hx_tmp->openSubState( ::Marathon_Substate_obj::__alloc( HX_CTX ));
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(  86)				this->goingBack = true;
HXLINE(  87)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  87)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null());
HXDLIN(  87)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE(  88)				::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("scale.x",94,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE(  89)				{
HXLINE(  89)					int _g = 0;
HXDLIN(  89)					::Array< ::Dynamic> _g1 = this->grpSongs->members;
HXDLIN(  89)					while((_g < _g1->length)){
HXLINE(  89)						 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN(  89)						_g = (_g + 1);
HXLINE(  91)						::flixel::tweens::FlxTween_obj::tween(item, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("scale.x",94,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
            					}
            				}
HXLINE(  93)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.6), ::Dynamic(new _hx_Closure_0()),null());
            			}
HXLINE( 100)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 102)				::PlayState_obj::storyPlaylist->remove(::PlayState_obj::storyPlaylist->__get(::Marathon_Edit_obj::curSelected));
HXLINE( 103)				::PlayState_obj::difficultyPlaylist->remove(::PlayState_obj::difficultyPlaylist->__get(::Marathon_Edit_obj::curSelected));
HXLINE( 105)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 105)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 105)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 107)				::MenuMarathon_obj::saveCurrent();
HXLINE( 109)				this->grpSongs->clear();
HXLINE( 111)				this->updateText();
            			}
            		}
            	}


void Marathon_Edit_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_fea370457237ae3d_118_changeSelection)
HXLINE( 121)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 121)		::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 121)		_hx_tmp->play(_hx_tmp1,((((Float)0.4) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 123)		 ::Dynamic _hx_tmp2 = ::hx::ClassOf< ::Marathon_Edit >();
HXDLIN( 123)		::Marathon_Edit_obj::curSelected = (::Marathon_Edit_obj::curSelected + change);
HXLINE( 125)		if ((::Marathon_Edit_obj::curSelected < 0)) {
HXLINE( 126)			::Marathon_Edit_obj::curSelected = (::PlayState_obj::storyPlaylist->length - 1);
            		}
HXLINE( 127)		if ((::Marathon_Edit_obj::curSelected >= ::PlayState_obj::storyPlaylist->length)) {
HXLINE( 128)			::Marathon_Edit_obj::curSelected = 0;
            		}
HXLINE( 130)		int bullShit = 0;
HXLINE( 132)		{
HXLINE( 132)			int _g = 0;
HXDLIN( 132)			::Array< ::Dynamic> _g1 = this->grpSongs->members;
HXDLIN( 132)			while((_g < _g1->length)){
HXLINE( 132)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 132)				_g = (_g + 1);
HXLINE( 134)				item->targetY = ( (Float)((bullShit - ::Marathon_Edit_obj::curSelected)) );
HXLINE( 135)				bullShit = (bullShit + 1);
HXLINE( 137)				item->set_alpha(((Float)0.6));
HXLINE( 140)				if ((item->targetY == 0)) {
HXLINE( 142)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Marathon_Edit_obj,changeSelection,(void))

void Marathon_Edit_obj::updateText(){
            	HX_GC_STACKFRAME(&_hx_pos_fea370457237ae3d_149_updateText)
HXLINE( 150)		{
HXLINE( 150)			int _g = 0;
HXDLIN( 150)			int _g1 = ::PlayState_obj::storyPlaylist->length;
HXDLIN( 150)			while((_g < _g1)){
HXLINE( 150)				_g = (_g + 1);
HXDLIN( 150)				int i = (_g - 1);
HXLINE( 153)				 ::Alphabet songText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),::PlayState_obj::storyPlaylist->__get(i),true,false);
HXLINE( 157)				::String library = null();
HXDLIN( 157)				::String diffTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("difficulties",59,c7,5e,02)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 157)				 ::flixel::graphics::frames::FlxAtlasFrames diffTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(diffTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("difficulties",59,c7,5e,02)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 155)				 ::flixel::FlxSprite sprDifficulty =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null());
HXLINE( 159)				sprDifficulty->set_frames(diffTex1);
HXLINE( 160)				sprDifficulty->animation->addByPrefix(HX_("noob",94,13,0a,49),HX_("NOOB",94,db,ca,33),null(),null(),null(),null());
HXLINE( 161)				sprDifficulty->animation->addByPrefix(HX_("easy",02,8c,0c,43),HX_("EASY",02,54,cd,2d),null(),null(),null(),null());
HXLINE( 162)				sprDifficulty->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("NORMAL",27,1e,ec,e2),null(),null(),null(),null());
HXLINE( 163)				sprDifficulty->animation->addByPrefix(HX_("hard",eb,2e,08,45),HX_("HARD",eb,f6,c8,2f),null(),null(),null(),null());
HXLINE( 164)				sprDifficulty->animation->addByPrefix(HX_("expert",ea,fa,75,c4),HX_("EXPERT",ea,a6,f8,76),null(),null(),null(),null());
HXLINE( 165)				sprDifficulty->animation->addByPrefix(HX_("insane",aa,36,da,9d),HX_("INSANE",aa,e2,5c,50),null(),null(),null(),null());
HXLINE( 166)				sprDifficulty->animation->play(HX_("easy",02,8c,0c,43),null(),null(),null());
HXLINE( 168)				::String _hx_switch_0 = ::PlayState_obj::difficultyPlaylist->__get(i);
            				if (  (_hx_switch_0==HX_("0",30,00,00,00)) ){
HXLINE( 171)					sprDifficulty->animation->play(HX_("noob",94,13,0a,49),null(),null(),null());
HXDLIN( 171)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_0==HX_("1",31,00,00,00)) ){
HXLINE( 173)					sprDifficulty->animation->play(HX_("easy",02,8c,0c,43),null(),null(),null());
HXDLIN( 173)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_0==HX_("2",32,00,00,00)) ){
HXLINE( 175)					sprDifficulty->animation->play(HX_("normal",27,72,69,30),null(),null(),null());
HXDLIN( 175)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_0==HX_("3",33,00,00,00)) ){
HXLINE( 177)					sprDifficulty->animation->play(HX_("hard",eb,2e,08,45),null(),null(),null());
HXDLIN( 177)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_0==HX_("4",34,00,00,00)) ){
HXLINE( 179)					sprDifficulty->animation->play(HX_("expert",ea,fa,75,c4),null(),null(),null());
HXDLIN( 179)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_0==HX_("5",35,00,00,00)) ){
HXLINE( 181)					sprDifficulty->animation->play(HX_("insane",aa,36,da,9d),null(),null(),null());
HXDLIN( 181)					goto _hx_goto_8;
            				}
            				_hx_goto_8:;
HXLINE( 184)				songText->add(sprDifficulty).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 186)				songText->itemType = HX_("Vertical",96,78,c7,43);
HXLINE( 187)				songText->targetY = ( (Float)(i) );
HXLINE( 188)				songText->targetX = ( (Float)(-9) );
HXLINE( 189)				this->grpSongs->add(songText).StaticCast<  ::Alphabet >();
            			}
            		}
HXLINE( 192)		if ((::Marathon_Edit_obj::curSelected >= ::PlayState_obj::storyPlaylist->length)) {
HXLINE( 193)			::Marathon_Edit_obj::curSelected = (::PlayState_obj::storyPlaylist->length - 1);
            		}
HXLINE( 194)		if ((::Marathon_Edit_obj::curSelected < 0)) {
HXLINE( 195)			::Marathon_Edit_obj::curSelected = 0;
            		}
HXLINE( 197)		int bullShit = 0;
HXLINE( 199)		{
HXLINE( 199)			int _g2 = 0;
HXDLIN( 199)			::Array< ::Dynamic> _g3 = this->grpSongs->members;
HXDLIN( 199)			while((_g2 < _g3->length)){
HXLINE( 199)				 ::Alphabet item = _g3->__get(_g2).StaticCast<  ::Alphabet >();
HXDLIN( 199)				_g2 = (_g2 + 1);
HXLINE( 201)				item->targetY = ( (Float)((bullShit - ::Marathon_Edit_obj::curSelected)) );
HXLINE( 202)				bullShit = (bullShit + 1);
HXLINE( 204)				item->set_alpha(((Float)0.6));
HXLINE( 207)				if ((item->targetY == 0)) {
HXLINE( 209)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Marathon_Edit_obj,updateText,(void))

int Marathon_Edit_obj::curSelected;


::hx::ObjectPtr< Marathon_Edit_obj > Marathon_Edit_obj::__new() {
	::hx::ObjectPtr< Marathon_Edit_obj > __this = new Marathon_Edit_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Marathon_Edit_obj > Marathon_Edit_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Marathon_Edit_obj *__this = (Marathon_Edit_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Marathon_Edit_obj), true, "Marathon_Edit"));
	*(void **)__this = Marathon_Edit_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Marathon_Edit_obj::Marathon_Edit_obj()
{
}

void Marathon_Edit_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Marathon_Edit);
	HX_MARK_MEMBER_NAME(grpSongs,"grpSongs");
	HX_MARK_MEMBER_NAME(goingBack,"goingBack");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Marathon_Edit_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(grpSongs,"grpSongs");
	HX_VISIT_MEMBER_NAME(goingBack,"goingBack");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Marathon_Edit_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"grpSongs") ) { return ::hx::Val( grpSongs ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"goingBack") ) { return ::hx::Val( goingBack ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"updateText") ) { return ::hx::Val( updateText_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { return ::hx::Val( blackBarThingie ); }
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Marathon_Edit_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val Marathon_Edit_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"grpSongs") ) { grpSongs=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"goingBack") ) { goingBack=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { blackBarThingie=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Marathon_Edit_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Marathon_Edit_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("grpSongs",d9,dc,c7,63));
	outFields->push(HX_("goingBack",01,e7,bf,2f));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("blackBarThingie",56,00,c2,d2));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Marathon_Edit_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Marathon_Edit_obj,grpSongs),HX_("grpSongs",d9,dc,c7,63)},
	{::hx::fsBool,(int)offsetof(Marathon_Edit_obj,goingBack),HX_("goingBack",01,e7,bf,2f)},
	{::hx::fsFloat,(int)offsetof(Marathon_Edit_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Marathon_Edit_obj,blackBarThingie),HX_("blackBarThingie",56,00,c2,d2)},
	{::hx::fsBool,(int)offsetof(Marathon_Edit_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Marathon_Edit_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Marathon_Edit_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Marathon_Edit_obj_sMemberFields[] = {
	HX_("grpSongs",d9,dc,c7,63),
	HX_("goingBack",01,e7,bf,2f),
	HX_("camLerp",26,66,a1,d2),
	HX_("blackBarThingie",56,00,c2,d2),
	HX_("selectable",96,b6,2a,c4),
	HX_("update",09,86,05,87),
	HX_("changeSelection",bc,98,b5,48),
	HX_("updateText",56,b7,ae,05),
	::String(null()) };

static void Marathon_Edit_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Marathon_Edit_obj::curSelected,"curSelected");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Marathon_Edit_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Marathon_Edit_obj::curSelected,"curSelected");
};

#endif

::hx::Class Marathon_Edit_obj::__mClass;

static ::String Marathon_Edit_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	::String(null())
};

void Marathon_Edit_obj::__register()
{
	Marathon_Edit_obj _hx_dummy;
	Marathon_Edit_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Marathon_Edit",13,a9,9c,d9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Marathon_Edit_obj::__GetStatic;
	__mClass->mSetStaticField = &Marathon_Edit_obj::__SetStatic;
	__mClass->mMarkFunc = Marathon_Edit_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Marathon_Edit_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Marathon_Edit_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Marathon_Edit_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Marathon_Edit_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Marathon_Edit_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Marathon_Edit_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Marathon_Edit_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fea370457237ae3d_34_boot)
HXDLIN(  34)		curSelected = 0;
            	}
}


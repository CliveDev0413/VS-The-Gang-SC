// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_APIStuff
#include <APIStuff.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_FirstCheckState
#include <FirstCheckState.h>
#endif
#ifndef INCLUDED_FirstTimeState
#include <FirstTimeState.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_ModifierVariables
#include <ModifierVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_NGio
#include <NGio.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8e4ada2f6b435da4_12_new,"FirstCheckState","new",0x616159cb,"FirstCheckState.new","FirstCheckState.hx",12,0x24062805)
HX_LOCAL_STACK_FRAME(_hx_pos_8e4ada2f6b435da4_30_create,"FirstCheckState","create",0x56175271,"FirstCheckState.create","FirstCheckState.hx",30,0x24062805)
HX_LOCAL_STACK_FRAME(_hx_pos_8e4ada2f6b435da4_16_create,"FirstCheckState","create",0x56175271,"FirstCheckState.create","FirstCheckState.hx",16,0x24062805)
HX_LOCAL_STACK_FRAME(_hx_pos_8e4ada2f6b435da4_43_update,"FirstCheckState","update",0x610d717e,"FirstCheckState.update","FirstCheckState.hx",43,0x24062805)

void FirstCheckState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_8e4ada2f6b435da4_12_new)
HXDLIN(  12)		super::__construct(TransIn,TransOut);
            	}

Dynamic FirstCheckState_obj::__CreateEmpty() { return new FirstCheckState_obj; }

void *FirstCheckState_obj::_hx_vtable = 0;

Dynamic FirstCheckState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FirstCheckState_obj > _hx_result = new FirstCheckState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FirstCheckState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x19404cb5) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x19404cb5;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void FirstCheckState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(int exitCode){
            			HX_STACKFRAME(&_hx_pos_8e4ada2f6b435da4_30_create)
HXLINE(  30)			::DiscordClient_obj::shutdown();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_8e4ada2f6b435da4_16_create)
HXLINE(  17)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(  19)		::NGio_obj::noLogin(::APIStuff_obj::API);
HXLINE(  27)		::DiscordClient_obj::initialize();
HXLINE(  29)		::lime::app::Application_obj::current->onExit->add( ::Dynamic(new _hx_Closure_0()),null(),null());
HXLINE(  34)		::PlayerSettings_obj::init();
HXLINE(  35)		::ModifierVariables_obj::modifierSetup();
HXLINE(  36)		::ModifierVariables_obj::loadCurrent();
HXLINE(  38)		this->super::create();
            	}


void FirstCheckState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_8e4ada2f6b435da4_43_update)
HXDLIN(  43)		if (( (bool)(::MainVariables_obj::_variables->__Field(HX_("firstTime",5d,48,cb,03),::hx::paccDynamic)) )) {
HXLINE(  46)			 ::flixel::FlxState nextState =  ::FirstTimeState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  46)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  46)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		else {
HXLINE(  48)			 ::flixel::FlxState nextState =  ::TitleState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  48)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  48)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}



::hx::ObjectPtr< FirstCheckState_obj > FirstCheckState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< FirstCheckState_obj > __this = new FirstCheckState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< FirstCheckState_obj > FirstCheckState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	FirstCheckState_obj *__this = (FirstCheckState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FirstCheckState_obj), true, "FirstCheckState"));
	*(void **)__this = FirstCheckState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

FirstCheckState_obj::FirstCheckState_obj()
{
}

::hx::Val FirstCheckState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FirstCheckState_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FirstCheckState_obj_sStaticStorageInfo = 0;
#endif

static ::String FirstCheckState_obj_sMemberFields[] = {
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class FirstCheckState_obj::__mClass;

void FirstCheckState_obj::__register()
{
	FirstCheckState_obj _hx_dummy;
	FirstCheckState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("FirstCheckState",59,18,10,1e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FirstCheckState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FirstCheckState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FirstCheckState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FirstCheckState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}


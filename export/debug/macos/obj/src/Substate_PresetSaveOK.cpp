// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_Marathon_Substate
#include <Marathon_Substate.h>
#endif
#ifndef INCLUDED_MenuMarathon
#include <MenuMarathon.h>
#endif
#ifndef INCLUDED_ModifierVariables
#include <ModifierVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Substate_Preset
#include <Substate_Preset.h>
#endif
#ifndef INCLUDED_Substate_PresetSave
#include <Substate_PresetSave.h>
#endif
#ifndef INCLUDED_Substate_PresetSaveOK
#include <Substate_PresetSaveOK.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5af40165cfc92d5d_147_new,"Substate_PresetSaveOK","new",0xd87cd9f8,"Substate_PresetSaveOK.new","Substate_PresetSaveOK.hx",147,0xb1c28c78)
HX_DEFINE_STACK_FRAME(_hx_pos_5af40165cfc92d5d_31_new,"Substate_PresetSaveOK","new",0xd87cd9f8,"Substate_PresetSaveOK.new","Substate_PresetSaveOK.hx",31,0xb1c28c78)
HX_LOCAL_STACK_FRAME(_hx_pos_5af40165cfc92d5d_156_update,"Substate_PresetSaveOK","update",0xc5e08b71,"Substate_PresetSaveOK.update","Substate_PresetSaveOK.hx",156,0xb1c28c78)
HX_LOCAL_STACK_FRAME(_hx_pos_5af40165cfc92d5d_187_update,"Substate_PresetSaveOK","update",0xc5e08b71,"Substate_PresetSaveOK.update","Substate_PresetSaveOK.hx",187,0xb1c28c78)
HX_LOCAL_STACK_FRAME(_hx_pos_5af40165cfc92d5d_33_boot,"Substate_PresetSaveOK","boot",0x8cdadf9a,"Substate_PresetSaveOK.boot","Substate_PresetSaveOK.hx",33,0xb1c28c78)

void Substate_PresetSaveOK_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Substate_PresetSaveOK,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_5af40165cfc92d5d_147_new)
HXLINE( 147)			_gthis->selectable = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_5af40165cfc92d5d_31_new)
HXLINE( 153)		this->easterImage = false;
HXLINE( 152)		this->canOK = true;
HXLINE( 151)		this->selectable = false;
HXLINE(  44)		this->eggText = HX_("",00,00,00,00);
HXLINE(  39)		this->blackBarThingie =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,1,-16777216,null(),null());
HXLINE(  37)		this->camLerp = ((Float)0.16);
HXLINE(  35)		this->goingBack = false;
HXLINE(  48)		 ::Substate_PresetSaveOK _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  50)		super::__construct();
HXLINE(  52)		this->add(this->blackBarThingie);
HXLINE(  53)		this->blackBarThingie->scrollFactor->set(null(),null());
HXLINE(  54)		this->blackBarThingie->scale->set_y(( (Float)(750) ));
HXLINE(  56)		this->resultText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),5,1000,HX_("Is this okay?",bf,59,3f,7c),32,null());
HXLINE(  57)		this->resultText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE(  58)		this->resultText->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  59)		{
HXLINE(  59)			 ::flixel::text::FlxText _this = this->resultText;
HXDLIN(  59)			_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(  59)			_this->set_borderColor(-16777216);
HXDLIN(  59)			_this->set_borderSize(( (Float)(5) ));
HXDLIN(  59)			_this->set_borderQuality(( (Float)(1) ));
            		}
HXLINE(  60)		this->resultText->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  61)		this->resultText->set_y(( (Float)(38) ));
HXLINE(  62)		this->resultText->scrollFactor->set(null(),null());
HXLINE(  63)		this->add(this->resultText);
HXLINE(  65)		this->resultName =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),5,1280,::Substate_PresetSave_obj::nameResult,96,null());
HXLINE(  66)		this->resultName->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),96,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE(  67)		this->resultName->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  68)		{
HXLINE(  68)			 ::flixel::text::FlxText _this1 = this->resultName;
HXDLIN(  68)			_this1->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(  68)			_this1->set_borderColor(-16777216);
HXDLIN(  68)			_this1->set_borderSize(( (Float)(5) ));
HXDLIN(  68)			_this1->set_borderQuality(( (Float)(1) ));
            		}
HXLINE(  69)		this->resultName->screenCenter(null());
HXLINE(  70)		{
HXLINE(  70)			 ::flixel::text::FlxText _g = this->resultName;
HXDLIN(  70)			_g->set_y((_g->y + 35));
            		}
HXLINE(  71)		this->resultName->scrollFactor->set(null(),null());
HXLINE(  72)		this->add(this->resultName);
HXLINE(  74)		this->eggText = this->resultName->text.toLowerCase();
HXLINE(  76)		bool _hx_tmp;
HXDLIN(  76)		bool _hx_tmp1;
HXDLIN(  76)		bool _hx_tmp2;
HXDLIN(  76)		bool _hx_tmp3;
HXDLIN(  76)		bool _hx_tmp4;
HXDLIN(  76)		bool _hx_tmp5;
HXDLIN(  76)		if ((this->eggText.indexOf(HX_("<",3c,00,00,00),null()) == -1)) {
HXLINE(  76)			_hx_tmp5 = (this->eggText.indexOf(HX_(">",3e,00,00,00),null()) != -1);
            		}
            		else {
HXLINE(  76)			_hx_tmp5 = true;
            		}
HXDLIN(  76)		if (!(_hx_tmp5)) {
HXLINE(  76)			_hx_tmp4 = (this->eggText.indexOf(HX_("*",2a,00,00,00),null()) != -1);
            		}
            		else {
HXLINE(  76)			_hx_tmp4 = true;
            		}
HXDLIN(  76)		if (!(_hx_tmp4)) {
HXLINE(  76)			_hx_tmp3 = (this->eggText.indexOf(HX_("?",3f,00,00,00),null()) != -1);
            		}
            		else {
HXLINE(  76)			_hx_tmp3 = true;
            		}
HXDLIN(  76)		if (!(_hx_tmp3)) {
HXLINE(  76)			_hx_tmp2 = (this->eggText.indexOf(HX_("/",2f,00,00,00),null()) != -1);
            		}
            		else {
HXLINE(  76)			_hx_tmp2 = true;
            		}
HXDLIN(  76)		if (!(_hx_tmp2)) {
HXLINE(  76)			_hx_tmp1 = (this->eggText.indexOf(HX_(":",3a,00,00,00),null()) != -1);
            		}
            		else {
HXLINE(  76)			_hx_tmp1 = true;
            		}
HXDLIN(  76)		if (!(_hx_tmp1)) {
HXLINE(  76)			_hx_tmp = (this->eggText.indexOf(HX_("\"",22,00,00,00),null()) != -1);
            		}
            		else {
HXLINE(  76)			_hx_tmp = true;
            		}
HXDLIN(  76)		if (_hx_tmp) {
HXLINE(  80)			this->canOK = false;
HXLINE(  81)			this->resultText->set_text(HX_("Please refrain from using *, ?, |, slashes, arrow parenthesis, : and double quotes as you can't name filenames like that.",2a,78,c7,2b));
            		}
HXLINE(  85)		::String _hx_switch_0 = this->eggText;
            		if (  (_hx_switch_0==HX_("current",39,9c,e3,cb)) ){
HXLINE(  93)			this->canOK = false;
HXLINE(  94)			this->resultText->set_text(HX_("Don't replace what saves on your way. It'll autosave itself.",72,87,d6,28));
HXLINE(  92)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("aux",04,01,4a,00)) ||  (_hx_switch_0==HX_("com1",d0,b8,c4,41)) ||  (_hx_switch_0==HX_("com2",d1,b8,c4,41)) ||  (_hx_switch_0==HX_("com3",d2,b8,c4,41)) ||  (_hx_switch_0==HX_("com4",d3,b8,c4,41)) ||  (_hx_switch_0==HX_("com5",d4,b8,c4,41)) ||  (_hx_switch_0==HX_("com6",d5,b8,c4,41)) ||  (_hx_switch_0==HX_("com7",d6,b8,c4,41)) ||  (_hx_switch_0==HX_("com8",d7,b8,c4,41)) ||  (_hx_switch_0==HX_("com9",d8,b8,c4,41)) ||  (_hx_switch_0==HX_("con",42,80,4b,00)) ||  (_hx_switch_0==HX_("lpt1",c1,6c,b8,47)) ||  (_hx_switch_0==HX_("lpt2",c2,6c,b8,47)) ||  (_hx_switch_0==HX_("lpt3",c3,6c,b8,47)) ||  (_hx_switch_0==HX_("lpt4",c4,6c,b8,47)) ||  (_hx_switch_0==HX_("lpt5",c5,6c,b8,47)) ||  (_hx_switch_0==HX_("lpt6",c6,6c,b8,47)) ||  (_hx_switch_0==HX_("lpt7",c7,6c,b8,47)) ||  (_hx_switch_0==HX_("lpt8",c8,6c,b8,47)) ||  (_hx_switch_0==HX_("lpt9",c9,6c,b8,47)) ||  (_hx_switch_0==HX_("nul",45,de,53,00)) ||  (_hx_switch_0==HX_("prn",2c,60,55,00)) ){
HXLINE(  89)			this->canOK = false;
HXLINE(  90)			this->resultText->set_text(HX_("It is illegal to make a filename like that based on a device's name. Try thinking of something else.",b7,ea,f3,26));
HXLINE(  87)			goto _hx_goto_0;
            		}
            		/* default */{
            		}
            		_hx_goto_0:;
HXLINE(  98)		::String library = null();
HXDLIN(  98)		if (::sys::FileSystem_obj::exists(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (HX_("easterEgg_Data/",61,22,2f,21) + this->eggText)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library))) {
HXLINE( 100)			 ::flixel::text::FlxText _hx_tmp = this->resultText;
HXDLIN( 100)			::String library = null();
HXDLIN( 100)			_hx_tmp->set_text(::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (HX_("easterEgg_Data/",61,22,2f,21) + this->eggText)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library)));
            		}
HXLINE( 102)		::String library1 = null();
HXDLIN( 102)		if (::sys::FileSystem_obj::exists(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + (HX_("easterEgg_Music/",ce,d4,a5,04) + this->eggText)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library1))) {
HXLINE( 104)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 104)			::String library = null();
HXDLIN( 104)			::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + (HX_("easterEgg_Music/",ce,d4,a5,04) + this->eggText)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN( 104)			_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
            		}
HXLINE( 106)		if (::sys::FileSystem_obj::exists(::Paths_obj::sound((HX_("easterEgg_Sounds/",87,35,ed,c9) + this->eggText),null()))) {
HXLINE( 108)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 108)			::String _hx_tmp1 = ::Paths_obj::sound((HX_("easterEgg_Sounds/",87,35,ed,c9) + this->eggText),null());
HXDLIN( 108)			_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
            		}
HXLINE( 110)		::String library2 = null();
HXDLIN( 110)		if (::sys::FileSystem_obj::exists(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("easterEgg_Images/",13,83,bc,d4) + this->eggText)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2))) {
HXLINE( 112)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 112)			::String library = null();
HXDLIN( 112)			this->eggImage = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("easterEgg_Images/",13,83,bc,d4) + this->eggText)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 113)			this->eggImage->set_antialiasing(true);
HXLINE( 115)			if ((this->eggImage->get_width() <= 256)) {
HXLINE( 116)				this->eggImage->set_antialiasing(false);
            			}
HXLINE( 118)			this->eggImage->setGraphicSize(400,null());
HXLINE( 119)			this->eggImage->updateHitbox();
HXLINE( 121)			if ((this->eggImage->get_height() > 400)) {
HXLINE( 123)				this->eggImage->setGraphicSize(0,400);
HXLINE( 124)				this->eggImage->updateHitbox();
            			}
HXLINE( 127)			this->eggImage->screenCenter(null());
HXLINE( 128)			this->add(this->eggImage);
HXLINE( 130)			 ::flixel::FlxSprite _hx_tmp1 = this->eggImage;
HXDLIN( 130)			_hx_tmp1->set_x((( (Float)(450) ) - this->eggImage->get_width()));
HXLINE( 131)			this->eggImage->set_y(( (Float)(270) ));
HXLINE( 133)			this->easterImage = true;
            		}
HXLINE( 136)		if (this->easterImage) {
HXLINE( 138)			::flixel::tweens::FlxTween_obj::tween(this->resultName, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("x",78,00,00,00),300)
            				->setFixed(1,HX_("y",79,00,00,00),350)
            				->setFixed(2,HX_("size",c1,a0,53,4c),40)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())));
            		}
            		else {
HXLINE( 142)			::flixel::tweens::FlxTween_obj::tween(this->resultName, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("y",79,00,00,00),280)
            				->setFixed(1,HX_("size",c1,a0,53,4c),150)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())));
            		}
HXLINE( 145)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.25), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}

Dynamic Substate_PresetSaveOK_obj::__CreateEmpty() { return new Substate_PresetSaveOK_obj; }

void *Substate_PresetSaveOK_obj::_hx_vtable = 0;

Dynamic Substate_PresetSaveOK_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Substate_PresetSaveOK_obj > _hx_result = new Substate_PresetSaveOK_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Substate_PresetSaveOK_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x37289f62) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x37289f62;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void Substate_PresetSaveOK_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_5af40165cfc92d5d_156_update)
HXLINE( 157)		this->super::update(elapsed);
HXLINE( 159)		 ::flixel::FlxSprite _hx_tmp = this->blackBarThingie;
HXDLIN( 159)		_hx_tmp->set_y((( (Float)(360) ) - (this->blackBarThingie->get_height() / ( (Float)(2) ))));
HXLINE( 160)		 ::flixel::FlxSprite _hx_tmp1 = this->blackBarThingie;
HXDLIN( 160)		_hx_tmp1->set_x((( (Float)(640) ) - (this->blackBarThingie->get_width() / ( (Float)(2) ))));
HXLINE( 162)		bool _hx_tmp2;
HXDLIN( 162)		if (this->selectable) {
HXLINE( 162)			_hx_tmp2 = !(this->goingBack);
            		}
            		else {
HXLINE( 162)			_hx_tmp2 = false;
            		}
HXDLIN( 162)		if (_hx_tmp2) {
HXLINE( 164)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 166)				::flixel::FlxG_obj::game->_state->closeSubState();
HXLINE( 167)				 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 167)				_hx_tmp->openSubState( ::Substate_PresetSave_obj::__alloc( HX_CTX ));
            			}
HXLINE( 170)			bool _hx_tmp;
HXDLIN( 170)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 170)				_hx_tmp = this->canOK;
            			}
            			else {
HXLINE( 170)				_hx_tmp = false;
            			}
HXDLIN( 170)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_5af40165cfc92d5d_187_update)
HXLINE( 188)					::flixel::FlxG_obj::game->_state->closeSubState();
HXLINE( 189)					if ((::Substate_PresetSave_obj::coming == HX_("Modifiers",1c,f1,ea,79))) {
HXLINE( 190)						 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 190)						_hx_tmp->openSubState( ::Substate_Preset_obj::__alloc( HX_CTX ));
            					}
            					else {
HXLINE( 191)						if ((::Substate_PresetSave_obj::coming == HX_("Marathon",36,c5,57,b1))) {
HXLINE( 192)							 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 192)							_hx_tmp->openSubState( ::Marathon_Substate_obj::__alloc( HX_CTX ));
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 172)				if ((::Substate_PresetSave_obj::coming == HX_("Modifiers",1c,f1,ea,79))) {
HXLINE( 173)					::ModifierVariables_obj::savePreset(this->eggText);
            				}
            				else {
HXLINE( 174)					if ((::Substate_PresetSave_obj::coming == HX_("Marathon",36,c5,57,b1))) {
HXLINE( 175)						::MenuMarathon_obj::savePreset(this->eggText);
            					}
            				}
HXLINE( 177)				this->goingBack = true;
HXLINE( 179)				::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("scale.x",94,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 180)				::flixel::tweens::FlxTween_obj::tween(this->resultText, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("scale.x",94,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 181)				::flixel::tweens::FlxTween_obj::tween(this->resultName, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("scale.x",94,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 182)				if (this->easterImage) {
HXLINE( 183)					::flixel::tweens::FlxTween_obj::tween(this->eggImage, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("scale.x",94,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
            				}
HXLINE( 185)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 185)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 185)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 186)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_0()),null());
            			}
            		}
            	}


int Substate_PresetSaveOK_obj::curSelected;


::hx::ObjectPtr< Substate_PresetSaveOK_obj > Substate_PresetSaveOK_obj::__new() {
	::hx::ObjectPtr< Substate_PresetSaveOK_obj > __this = new Substate_PresetSaveOK_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Substate_PresetSaveOK_obj > Substate_PresetSaveOK_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Substate_PresetSaveOK_obj *__this = (Substate_PresetSaveOK_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Substate_PresetSaveOK_obj), true, "Substate_PresetSaveOK"));
	*(void **)__this = Substate_PresetSaveOK_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Substate_PresetSaveOK_obj::Substate_PresetSaveOK_obj()
{
}

void Substate_PresetSaveOK_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Substate_PresetSaveOK);
	HX_MARK_MEMBER_NAME(goingBack,"goingBack");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_MARK_MEMBER_NAME(resultText,"resultText");
	HX_MARK_MEMBER_NAME(resultName,"resultName");
	HX_MARK_MEMBER_NAME(eggText,"eggText");
	HX_MARK_MEMBER_NAME(eggImage,"eggImage");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(canOK,"canOK");
	HX_MARK_MEMBER_NAME(easterImage,"easterImage");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Substate_PresetSaveOK_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(goingBack,"goingBack");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_VISIT_MEMBER_NAME(resultText,"resultText");
	HX_VISIT_MEMBER_NAME(resultName,"resultName");
	HX_VISIT_MEMBER_NAME(eggText,"eggText");
	HX_VISIT_MEMBER_NAME(eggImage,"eggImage");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(canOK,"canOK");
	HX_VISIT_MEMBER_NAME(easterImage,"easterImage");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Substate_PresetSaveOK_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"canOK") ) { return ::hx::Val( canOK ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		if (HX_FIELD_EQ(inName,"eggText") ) { return ::hx::Val( eggText ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"eggImage") ) { return ::hx::Val( eggImage ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"goingBack") ) { return ::hx::Val( goingBack ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"resultText") ) { return ::hx::Val( resultText ); }
		if (HX_FIELD_EQ(inName,"resultName") ) { return ::hx::Val( resultName ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"easterImage") ) { return ::hx::Val( easterImage ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { return ::hx::Val( blackBarThingie ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Substate_PresetSaveOK_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val Substate_PresetSaveOK_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"canOK") ) { canOK=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eggText") ) { eggText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"eggImage") ) { eggImage=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"goingBack") ) { goingBack=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"resultText") ) { resultText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resultName") ) { resultName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"easterImage") ) { easterImage=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { blackBarThingie=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Substate_PresetSaveOK_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Substate_PresetSaveOK_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("goingBack",01,e7,bf,2f));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("blackBarThingie",56,00,c2,d2));
	outFields->push(HX_("resultText",2a,94,39,be));
	outFields->push(HX_("resultName",c8,39,3f,ba));
	outFields->push(HX_("eggText",12,bd,d2,1c));
	outFields->push(HX_("eggImage",56,87,62,cb));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("canOK",2c,dd,1c,41));
	outFields->push(HX_("easterImage",51,29,83,ae));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Substate_PresetSaveOK_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Substate_PresetSaveOK_obj,goingBack),HX_("goingBack",01,e7,bf,2f)},
	{::hx::fsFloat,(int)offsetof(Substate_PresetSaveOK_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Substate_PresetSaveOK_obj,blackBarThingie),HX_("blackBarThingie",56,00,c2,d2)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Substate_PresetSaveOK_obj,resultText),HX_("resultText",2a,94,39,be)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Substate_PresetSaveOK_obj,resultName),HX_("resultName",c8,39,3f,ba)},
	{::hx::fsString,(int)offsetof(Substate_PresetSaveOK_obj,eggText),HX_("eggText",12,bd,d2,1c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Substate_PresetSaveOK_obj,eggImage),HX_("eggImage",56,87,62,cb)},
	{::hx::fsBool,(int)offsetof(Substate_PresetSaveOK_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{::hx::fsBool,(int)offsetof(Substate_PresetSaveOK_obj,canOK),HX_("canOK",2c,dd,1c,41)},
	{::hx::fsBool,(int)offsetof(Substate_PresetSaveOK_obj,easterImage),HX_("easterImage",51,29,83,ae)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Substate_PresetSaveOK_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Substate_PresetSaveOK_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Substate_PresetSaveOK_obj_sMemberFields[] = {
	HX_("goingBack",01,e7,bf,2f),
	HX_("camLerp",26,66,a1,d2),
	HX_("blackBarThingie",56,00,c2,d2),
	HX_("resultText",2a,94,39,be),
	HX_("resultName",c8,39,3f,ba),
	HX_("eggText",12,bd,d2,1c),
	HX_("eggImage",56,87,62,cb),
	HX_("selectable",96,b6,2a,c4),
	HX_("canOK",2c,dd,1c,41),
	HX_("easterImage",51,29,83,ae),
	HX_("update",09,86,05,87),
	::String(null()) };

static void Substate_PresetSaveOK_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Substate_PresetSaveOK_obj::curSelected,"curSelected");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Substate_PresetSaveOK_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Substate_PresetSaveOK_obj::curSelected,"curSelected");
};

#endif

::hx::Class Substate_PresetSaveOK_obj::__mClass;

static ::String Substate_PresetSaveOK_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	::String(null())
};

void Substate_PresetSaveOK_obj::__register()
{
	Substate_PresetSaveOK_obj _hx_dummy;
	Substate_PresetSaveOK_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Substate_PresetSaveOK",06,be,22,6a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Substate_PresetSaveOK_obj::__GetStatic;
	__mClass->mSetStaticField = &Substate_PresetSaveOK_obj::__SetStatic;
	__mClass->mMarkFunc = Substate_PresetSaveOK_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Substate_PresetSaveOK_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Substate_PresetSaveOK_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Substate_PresetSaveOK_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Substate_PresetSaveOK_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Substate_PresetSaveOK_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Substate_PresetSaveOK_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Substate_PresetSaveOK_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5af40165cfc92d5d_33_boot)
HXDLIN(  33)		curSelected = 0;
            	}
}


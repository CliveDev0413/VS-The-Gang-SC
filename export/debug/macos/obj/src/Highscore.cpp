// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_NGio
#include <NGio.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_io_newgrounds_NG
#include <io/newgrounds/NG.h>
#endif
#ifndef INCLUDED_io_newgrounds_NGLite
#include <io/newgrounds/NGLite.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Object
#include <io/newgrounds/objects/Object.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_ScoreBoard
#include <io/newgrounds/objects/ScoreBoard.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_19_saveScore,"Highscore","saveScore",0xbac27177,"Highscore.saveScore","Highscore.hx",19,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_38_saveRank,"Highscore","saveRank",0xa32f1b27,"Highscore.saveRank","Highscore.hx",38,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_51_saveWeekScore,"Highscore","saveWeekScore",0x4660a363,"Highscore.saveWeekScore","Highscore.hx",51,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_71_saveMarathonScore,"Highscore","saveMarathonScore",0x29b55581,"Highscore.saveMarathonScore","Highscore.hx",71,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_79_saveEndlessScore,"Highscore","saveEndlessScore",0x4dc17679,"Highscore.saveEndlessScore","Highscore.hx",79,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_95_setScore,"Highscore","setScore",0x2adf0fee,"Highscore.setScore","Highscore.hx",95,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_103_setEndless,"Highscore","setEndless",0xb3169c50,"Highscore.setEndless","Highscore.hx",103,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_111_setRank,"Highscore","setRank",0x648c3890,"Highscore.setRank","Highscore.hx",111,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_119_formatSong,"Highscore","formatSong",0x2cf91dca,"Highscore.formatSong","Highscore.hx",119,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_137_getScore,"Highscore","getScore",0x7c81b67a,"Highscore.getScore","Highscore.hx",137,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_145_getEndless,"Highscore","getEndless",0xaf98fddc,"Highscore.getEndless","Highscore.hx",145,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_153_getRank,"Highscore","getRank",0x718aa784,"Highscore.getRank","Highscore.hx",153,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_161_getWeekScore,"Highscore","getWeekScore",0xb3da25e6,"Highscore.getWeekScore","Highscore.hx",161,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_169_load,"Highscore","load",0x978326c4,"Highscore.load","Highscore.hx",169,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_8_boot,"Highscore","boot",0x90e710d0,"Highscore.boot","Highscore.hx",8,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_9_boot,"Highscore","boot",0x90e710d0,"Highscore.boot","Highscore.hx",9,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_10_boot,"Highscore","boot",0x90e710d0,"Highscore.boot","Highscore.hx",10,0x77c0e42e)

void Highscore_obj::__construct() { }

Dynamic Highscore_obj::__CreateEmpty() { return new Highscore_obj; }

void *Highscore_obj::_hx_vtable = 0;

Dynamic Highscore_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Highscore_obj > _hx_result = new Highscore_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Highscore_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x55f38dd0;
}

 ::haxe::ds::StringMap Highscore_obj::songScores;

 ::haxe::ds::StringMap Highscore_obj::endlessScores;

 ::haxe::ds::StringMap Highscore_obj::songRanks;

void Highscore_obj::saveScore(::String song,::hx::Null< int >  __o_score, ::Dynamic __o_diff){
            		int score = __o_score.Default(0);
            		 ::Dynamic diff = __o_diff;
            		if (::hx::IsNull(__o_diff)) diff = 0;
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_19_saveScore)
HXLINE(  20)		::String daSong = ::Highscore_obj::formatSong(song,( (int)(diff) ));
HXLINE(  24)		if (::NGio_obj::isLoggedIn) {
HXLINE(  24)			 ::Dynamic id = ::io::newgrounds::NG_obj::core->scoreBoards->keys();
HXDLIN(  24)			while(( (bool)(id->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  24)				int id1 = ( (int)(id->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  24)				 ::io::newgrounds::objects::ScoreBoard board = ( ( ::io::newgrounds::objects::ScoreBoard)(::io::newgrounds::NG_obj::core->scoreBoards->get(id1)) );
HXDLIN(  24)				if (::hx::IsEq( song,board->_data->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic) )) {
HXLINE(  24)					board->postScore(score,HX_("Uhh meow?",f4,6d,8e,fc));
            				}
            			}
            		}
HXLINE(  28)		if (::Highscore_obj::songScores->exists(daSong)) {
HXLINE(  30)			if (::hx::IsLess( ::Highscore_obj::songScores->get(daSong),score )) {
HXLINE(  31)				::Highscore_obj::setScore(daSong,score);
            			}
            		}
            		else {
HXLINE(  34)			::Highscore_obj::setScore(daSong,score);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Highscore_obj,saveScore,(void))

void Highscore_obj::saveRank(::String song,::hx::Null< int >  __o_score, ::Dynamic __o_diff){
            		int score = __o_score.Default(0);
            		 ::Dynamic diff = __o_diff;
            		if (::hx::IsNull(__o_diff)) diff = 0;
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_38_saveRank)
HXLINE(  39)		::String daSong = ::Highscore_obj::formatSong(song,( (int)(diff) ));
HXLINE(  41)		if (::Highscore_obj::songRanks->exists(daSong)) {
HXLINE(  43)			if (::hx::IsGreater( ::Highscore_obj::songRanks->get(daSong),score )) {
HXLINE(  44)				::Highscore_obj::setRank(daSong,score);
            			}
            		}
            		else {
HXLINE(  47)			::Highscore_obj::setRank(daSong,score);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Highscore_obj,saveRank,(void))

void Highscore_obj::saveWeekScore(::hx::Null< int >  __o_week,::hx::Null< int >  __o_score, ::Dynamic __o_diff){
            		int week = __o_week.Default(1);
            		int score = __o_score.Default(0);
            		 ::Dynamic diff = __o_diff;
            		if (::hx::IsNull(__o_diff)) diff = 0;
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_51_saveWeekScore)
HXLINE(  54)		{
HXLINE(  54)			::String song = (HX_("Week ",8c,05,ec,5a) + week);
HXDLIN(  54)			if (::NGio_obj::isLoggedIn) {
HXLINE(  54)				 ::Dynamic id = ::io::newgrounds::NG_obj::core->scoreBoards->keys();
HXDLIN(  54)				while(( (bool)(id->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  54)					int id1 = ( (int)(id->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  54)					 ::io::newgrounds::objects::ScoreBoard board = ( ( ::io::newgrounds::objects::ScoreBoard)(::io::newgrounds::NG_obj::core->scoreBoards->get(id1)) );
HXDLIN(  54)					if (::hx::IsEq( song,board->_data->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic) )) {
HXLINE(  54)						board->postScore(score,HX_("Uhh meow?",f4,6d,8e,fc));
            					}
            				}
            			}
            		}
HXLINE(  58)		::String daWeek = ::Highscore_obj::formatSong((HX_("week",f4,5f,f5,4e) + week),( (int)(diff) ));
HXLINE(  60)		if (::Highscore_obj::songScores->exists(daWeek)) {
HXLINE(  62)			if (::hx::IsLess( ::Highscore_obj::songScores->get(daWeek),score )) {
HXLINE(  63)				::Highscore_obj::setScore(daWeek,score);
            			}
            		}
            		else {
HXLINE(  66)			::Highscore_obj::setScore(daWeek,score);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Highscore_obj,saveWeekScore,(void))

void Highscore_obj::saveMarathonScore(::hx::Null< int >  __o_score){
            		int score = __o_score.Default(0);
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_71_saveMarathonScore)
HXDLIN(  71)		bool _hx_tmp;
HXDLIN(  71)		if (!(::hx::IsGreater( score,::flixel::FlxG_obj::save->data->__Field(HX_("marathonScore",5c,2a,ba,bc),::hx::paccDynamic) ))) {
HXDLIN(  71)			_hx_tmp = ::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("marathonScore",5c,2a,ba,bc),::hx::paccDynamic) );
            		}
            		else {
HXDLIN(  71)			_hx_tmp = true;
            		}
HXDLIN(  71)		if (_hx_tmp) {
HXLINE(  73)			::flixel::FlxG_obj::save->data->__SetField(HX_("marathonScore",5c,2a,ba,bc),score,::hx::paccDynamic);
HXLINE(  74)			::flixel::FlxG_obj::save->flush(null(),null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Highscore_obj,saveMarathonScore,(void))

void Highscore_obj::saveEndlessScore(::String song,::hx::Null< int >  __o_score){
            		int score = __o_score.Default(0);
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_79_saveEndlessScore)
HXLINE(  80)		::String daSong = song;
HXLINE(  82)		if (::Highscore_obj::endlessScores->exists(daSong)) {
HXLINE(  84)			if (::hx::IsLess( ::Highscore_obj::endlessScores->get(daSong),score )) {
HXLINE(  85)				::Highscore_obj::setEndless(daSong,score);
            			}
            		}
            		else {
HXLINE(  88)			::Highscore_obj::setEndless(daSong,score);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,saveEndlessScore,(void))

void Highscore_obj::setScore(::String song,int score){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_95_setScore)
HXLINE(  97)		::Highscore_obj::songScores->set(song,score);
HXLINE(  98)		::flixel::FlxG_obj::save->data->__SetField(HX_("songScores",96,1a,f0,a0),::Highscore_obj::songScores,::hx::paccDynamic);
HXLINE(  99)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,setScore,(void))

void Highscore_obj::setEndless(::String song,int score){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_103_setEndless)
HXLINE( 105)		::Highscore_obj::endlessScores->set(song,score);
HXLINE( 106)		::flixel::FlxG_obj::save->data->__SetField(HX_("endlessScores",b5,08,8b,4e),::Highscore_obj::endlessScores,::hx::paccDynamic);
HXLINE( 107)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,setEndless,(void))

void Highscore_obj::setRank(::String song,int score){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_111_setRank)
HXLINE( 113)		::Highscore_obj::songRanks->set(song,score);
HXLINE( 114)		::flixel::FlxG_obj::save->data->__SetField(HX_("songRanks",32,f1,99,13),::Highscore_obj::songRanks,::hx::paccDynamic);
HXLINE( 115)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,setRank,(void))

::String Highscore_obj::formatSong(::String song,int diff){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_119_formatSong)
HXLINE( 120)		::String daSong = song;
HXLINE( 122)		if ((diff == 0)) {
HXLINE( 123)			daSong = (daSong + HX_("-noob",41,2e,12,32));
            		}
            		else {
HXLINE( 124)			if ((diff == 1)) {
HXLINE( 125)				daSong = (daSong + HX_("-easy",af,a6,14,2c));
            			}
            			else {
HXLINE( 126)				if ((diff == 3)) {
HXLINE( 127)					daSong = (daSong + HX_("-hard",98,49,10,2e));
            				}
            				else {
HXLINE( 128)					if ((diff == 4)) {
HXLINE( 129)						daSong = (daSong + HX_("-expert",d7,da,bb,13));
            					}
            					else {
HXLINE( 130)						if ((diff == 5)) {
HXLINE( 131)							daSong = (daSong + HX_("-insane",97,16,20,ed));
            						}
            					}
            				}
            			}
            		}
HXLINE( 133)		return daSong;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,formatSong,return )

int Highscore_obj::getScore(::String song,int diff){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_137_getScore)
HXLINE( 138)		::Dynamic this1 = ::Highscore_obj::songScores;
HXDLIN( 138)		if (!(( ( ::haxe::ds::StringMap)(this1) )->exists(::Highscore_obj::formatSong(song,diff)))) {
HXLINE( 139)			::Highscore_obj::setScore(::Highscore_obj::formatSong(song,diff),0);
            		}
HXLINE( 141)		::Dynamic this2 = ::Highscore_obj::songScores;
HXDLIN( 141)		return ( ( ::haxe::ds::StringMap)(this2) )->get_int(::Highscore_obj::formatSong(song,diff));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,getScore,return )

int Highscore_obj::getEndless(::String song){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_145_getEndless)
HXLINE( 146)		if (!(::Highscore_obj::endlessScores->exists(song))) {
HXLINE( 147)			::Highscore_obj::setEndless(song,0);
            		}
HXLINE( 149)		return ::Highscore_obj::endlessScores->get_int(song);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Highscore_obj,getEndless,return )

int Highscore_obj::getRank(::String song,int diff){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_153_getRank)
HXLINE( 154)		::Dynamic this1 = ::Highscore_obj::songRanks;
HXDLIN( 154)		if (!(( ( ::haxe::ds::StringMap)(this1) )->exists(::Highscore_obj::formatSong(song,diff)))) {
HXLINE( 155)			::Highscore_obj::setRank(::Highscore_obj::formatSong(song,diff),16);
            		}
HXLINE( 157)		::Dynamic this2 = ::Highscore_obj::songRanks;
HXDLIN( 157)		return ( ( ::haxe::ds::StringMap)(this2) )->get_int(::Highscore_obj::formatSong(song,diff));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,getRank,return )

int Highscore_obj::getWeekScore(int week,int diff){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_161_getWeekScore)
HXLINE( 162)		::Dynamic this1 = ::Highscore_obj::songScores;
HXDLIN( 162)		if (!(( ( ::haxe::ds::StringMap)(this1) )->exists(::Highscore_obj::formatSong((HX_("week",f4,5f,f5,4e) + week),diff)))) {
HXLINE( 163)			::Highscore_obj::setScore(::Highscore_obj::formatSong((HX_("week",f4,5f,f5,4e) + week),diff),0);
            		}
HXLINE( 165)		::Dynamic this2 = ::Highscore_obj::songScores;
HXDLIN( 165)		return ( ( ::haxe::ds::StringMap)(this2) )->get_int(::Highscore_obj::formatSong((HX_("week",f4,5f,f5,4e) + week),diff));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,getWeekScore,return )

void Highscore_obj::load(){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_169_load)
HXLINE( 170)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("songScores",96,1a,f0,a0),::hx::paccDynamic) )) {
HXLINE( 172)			::Highscore_obj::songScores = ( ( ::haxe::ds::StringMap)(::flixel::FlxG_obj::save->data->__Field(HX_("songScores",96,1a,f0,a0),::hx::paccDynamic)) );
            		}
HXLINE( 174)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("endlessScores",b5,08,8b,4e),::hx::paccDynamic) )) {
HXLINE( 176)			::Highscore_obj::endlessScores = ( ( ::haxe::ds::StringMap)(::flixel::FlxG_obj::save->data->__Field(HX_("endlessScores",b5,08,8b,4e),::hx::paccDynamic)) );
            		}
HXLINE( 178)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("songRanks",32,f1,99,13),::hx::paccDynamic) )) {
HXLINE( 180)			::Highscore_obj::songRanks = ( ( ::haxe::ds::StringMap)(::flixel::FlxG_obj::save->data->__Field(HX_("songRanks",32,f1,99,13),::hx::paccDynamic)) );
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Highscore_obj,load,(void))


Highscore_obj::Highscore_obj()
{
}

bool Highscore_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setRank") ) { outValue = setRank_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getRank") ) { outValue = getRank_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"saveRank") ) { outValue = saveRank_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setScore") ) { outValue = setScore_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getScore") ) { outValue = getScore_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"songRanks") ) { outValue = ( songRanks ); return true; }
		if (HX_FIELD_EQ(inName,"saveScore") ) { outValue = saveScore_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songScores") ) { outValue = ( songScores ); return true; }
		if (HX_FIELD_EQ(inName,"setEndless") ) { outValue = setEndless_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatSong") ) { outValue = formatSong_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getEndless") ) { outValue = getEndless_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getWeekScore") ) { outValue = getWeekScore_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"endlessScores") ) { outValue = ( endlessScores ); return true; }
		if (HX_FIELD_EQ(inName,"saveWeekScore") ) { outValue = saveWeekScore_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"saveEndlessScore") ) { outValue = saveEndlessScore_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"saveMarathonScore") ) { outValue = saveMarathonScore_dyn(); return true; }
	}
	return false;
}

bool Highscore_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"songRanks") ) { songRanks=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songScores") ) { songScores=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"endlessScores") ) { endlessScores=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Highscore_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Highscore_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Highscore_obj::songScores,HX_("songScores",96,1a,f0,a0)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Highscore_obj::endlessScores,HX_("endlessScores",b5,08,8b,4e)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Highscore_obj::songRanks,HX_("songRanks",32,f1,99,13)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Highscore_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Highscore_obj::songScores,"songScores");
	HX_MARK_MEMBER_NAME(Highscore_obj::endlessScores,"endlessScores");
	HX_MARK_MEMBER_NAME(Highscore_obj::songRanks,"songRanks");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Highscore_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Highscore_obj::songScores,"songScores");
	HX_VISIT_MEMBER_NAME(Highscore_obj::endlessScores,"endlessScores");
	HX_VISIT_MEMBER_NAME(Highscore_obj::songRanks,"songRanks");
};

#endif

::hx::Class Highscore_obj::__mClass;

static ::String Highscore_obj_sStaticFields[] = {
	HX_("songScores",96,1a,f0,a0),
	HX_("endlessScores",b5,08,8b,4e),
	HX_("songRanks",32,f1,99,13),
	HX_("saveScore",d5,7a,86,07),
	HX_("saveRank",89,e7,5d,ff),
	HX_("saveWeekScore",c1,b3,07,00),
	HX_("saveMarathonScore",df,ec,ce,cb),
	HX_("saveEndlessScore",db,74,06,a8),
	HX_("setScore",50,dc,0d,87),
	HX_("setEndless",32,c5,da,91),
	HX_("setRank",6e,8e,28,11),
	HX_("formatSong",ac,46,bd,0b),
	HX_("getScore",dc,82,b0,d8),
	HX_("getEndless",be,26,5d,8e),
	HX_("getRank",62,fd,26,1e),
	HX_("getWeekScore",48,cb,a3,ea),
	HX_("load",26,9a,b7,47),
	::String(null())
};

void Highscore_obj::__register()
{
	Highscore_obj _hx_dummy;
	Highscore_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Highscore",90,18,b0,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Highscore_obj::__GetStatic;
	__mClass->mSetStaticField = &Highscore_obj::__SetStatic;
	__mClass->mMarkFunc = Highscore_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Highscore_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Highscore_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Highscore_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Highscore_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Highscore_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Highscore_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_59d01746e3baf250_8_boot)
HXDLIN(   8)		songScores =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_59d01746e3baf250_9_boot)
HXDLIN(   9)		endlessScores =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_59d01746e3baf250_10_boot)
HXDLIN(  10)		songRanks =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}


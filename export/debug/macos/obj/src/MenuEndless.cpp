// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_Endless_Substate
#include <Endless_Substate.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_MenuEndless
#include <MenuEndless.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlaySelection
#include <PlaySelection.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_SongTitlesE
#include <SongTitlesE.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2e824e85d541ed3b_30_new,"MenuEndless","new",0x3f9e3c27,"MenuEndless.new","MenuEndless.hx",30,0x78d2c529)
HX_LOCAL_STACK_FRAME(_hx_pos_2e824e85d541ed3b_138_create,"MenuEndless","create",0xa4635195,"MenuEndless.create","MenuEndless.hx",138,0x78d2c529)
HX_LOCAL_STACK_FRAME(_hx_pos_2e824e85d541ed3b_54_create,"MenuEndless","create",0xa4635195,"MenuEndless.create","MenuEndless.hx",54,0x78d2c529)
static const int _hx_array_data_745d9cb5_6[] = {
	(int)16711680,(int)1433850879,(int)-1426072321,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2e824e85d541ed3b_156_update,"MenuEndless","update",0xaf5970a2,"MenuEndless.update","MenuEndless.hx",156,0x78d2c529)
HX_LOCAL_STACK_FRAME(_hx_pos_2e824e85d541ed3b_227_changeSelection,"MenuEndless","changeSelection",0xfc161303,"MenuEndless.changeSelection","MenuEndless.hx",227,0x78d2c529)
HX_LOCAL_STACK_FRAME(_hx_pos_2e824e85d541ed3b_37_boot,"MenuEndless","boot",0x62ef668b,"MenuEndless.boot","MenuEndless.hx",37,0x78d2c529)
HX_LOCAL_STACK_FRAME(_hx_pos_2e824e85d541ed3b_41_boot,"MenuEndless","boot",0x62ef668b,"MenuEndless.boot","MenuEndless.hx",41,0x78d2c529)
HX_LOCAL_STACK_FRAME(_hx_pos_2e824e85d541ed3b_42_boot,"MenuEndless","boot",0x62ef668b,"MenuEndless.boot","MenuEndless.hx",42,0x78d2c529)
HX_LOCAL_STACK_FRAME(_hx_pos_2e824e85d541ed3b_43_boot,"MenuEndless","boot",0x62ef668b,"MenuEndless.boot","MenuEndless.hx",43,0x78d2c529)

void MenuEndless_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_2e824e85d541ed3b_30_new)
HXLINE(  49)		this->intendedScore = 0;
HXLINE(  48)		this->lerpScore = 0;
HXLINE(  45)		this->songs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  39)		this->selectable = false;
HXLINE(  38)		this->camLerp = ((Float)0.1);
HXLINE(  35)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,null(),null());
HXDLIN(  35)		::String library = null();
HXDLIN(  35)		this->side = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("End_Side",fb,b3,bf,2e)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  34)		this->gradientBar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null())->makeGraphic(::flixel::FlxG_obj::width,300,-5635926,null(),null());
HXLINE(  33)		::String library1 = null();
HXDLIN(  33)		this->checker =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("End_Checker",51,a3,6d,dc)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),((Float)0.2),((Float)0.2),true,true,null(),null());
HXLINE(  32)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-89,null(),null());
HXDLIN(  32)		::String library2 = null();
HXDLIN(  32)		this->bg = _hx_tmp1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("EndBG_Main",f8,bd,a1,d1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE(  30)		super::__construct(TransIn,TransOut);
            	}

Dynamic MenuEndless_obj::__CreateEmpty() { return new MenuEndless_obj; }

void *MenuEndless_obj::_hx_vtable = 0;

Dynamic MenuEndless_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuEndless_obj > _hx_result = new MenuEndless_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MenuEndless_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x2758e1f5) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2758e1f5;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void MenuEndless_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MenuEndless,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_2e824e85d541ed3b_138_create)
HXLINE( 138)			_gthis->selectable = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_2e824e85d541ed3b_54_create)
HXLINE(  53)		 ::MenuEndless _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  55)		::MenuEndless_obj::substated = false;
HXLINE(  57)		::flixel::FlxG_obj::game->set_scaleX(( (Float)(1) ));
HXLINE(  58)		::flixel::FlxG_obj::game->set_x(( (Float)(0) ));
HXLINE(  59)		::flixel::FlxG_obj::game->set_scaleY(( (Float)(1) ));
HXLINE(  60)		::flixel::FlxG_obj::game->set_y(( (Float)(0) ));
HXLINE(  62)		::MenuEndless_obj::no = false;
HXLINE(  63)		::MenuEndless_obj::goingBack = false;
HXLINE(  65)		this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(  66)		this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(  68)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  70)		::String library = null();
HXDLIN(  70)		::Array< ::String > initSonglist = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("freeplaySonglist",73,3b,dc,de)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  72)		{
HXLINE(  72)			int _g = 0;
HXDLIN(  72)			int _g1 = initSonglist->length;
HXDLIN(  72)			while((_g < _g1)){
HXLINE(  72)				_g = (_g + 1);
HXDLIN(  72)				int i = (_g - 1);
HXLINE(  74)				::Array< ::String > data = initSonglist->__get(i).split(HX_(":",3a,00,00,00));
HXLINE(  75)				::Array< ::Dynamic> _hx_tmp = this->songs;
HXDLIN(  75)				_hx_tmp->push( ::SongTitlesE_obj::__alloc( HX_CTX ,data->__get(0)));
            			}
            		}
HXLINE(  78)		this->bg->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  79)		this->bg->scrollFactor->set_y(((Float)0.03));
HXLINE(  80)		 ::flixel::FlxSprite _hx_tmp = this->bg;
HXDLIN(  80)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->bg->get_width() * ((Float)1.1))),null());
HXLINE(  81)		this->bg->updateHitbox();
HXLINE(  82)		this->bg->screenCenter(null());
HXLINE(  83)		this->bg->set_antialiasing(true);
HXLINE(  84)		this->add(this->bg);
HXLINE(  86)		this->gradientBar = ::flixel::util::FlxGradient_obj::createGradientFlxSprite(::Math_obj::round(( (Float)(::flixel::FlxG_obj::width) )),512,::Array_obj< int >::fromData( _hx_array_data_745d9cb5_6,3),1,90,true);
HXLINE(  87)		 ::flixel::FlxSprite _hx_tmp1 = this->gradientBar;
HXDLIN(  87)		int _hx_tmp2 = ::flixel::FlxG_obj::height;
HXDLIN(  87)		_hx_tmp1->set_y((( (Float)(_hx_tmp2) ) - this->gradientBar->get_height()));
HXLINE(  88)		this->add(this->gradientBar);
HXLINE(  89)		this->gradientBar->scrollFactor->set(0,0);
HXLINE(  91)		this->add(this->checker);
HXLINE(  92)		this->checker->scrollFactor->set(((Float)0.07),((Float)0.07));
HXLINE(  94)		this->grpSongs =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  95)		this->add(this->grpSongs);
HXLINE(  97)		{
HXLINE(  97)			int _g2 = 0;
HXDLIN(  97)			int _g3 = this->songs->length;
HXDLIN(  97)			while((_g2 < _g3)){
HXLINE(  97)				_g2 = (_g2 + 1);
HXDLIN(  97)				int i = (_g2 - 1);
HXLINE(  99)				 ::Alphabet songText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((90 * i) + 50)) ),this->songs->__get(i).StaticCast<  ::SongTitlesE >()->songName,true,false);
HXLINE( 100)				songText->itemType = HX_("D-Shape",f8,1a,0d,19);
HXLINE( 101)				songText->targetY = ( (Float)(i) );
HXLINE( 102)				this->grpSongs->add(songText).StaticCast<  ::Alphabet >();
            			}
            		}
HXLINE( 108)		this->side->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 109)		this->side->scrollFactor->set_y(( (Float)(0) ));
HXLINE( 110)		this->side->set_antialiasing(true);
HXLINE( 111)		this->side->screenCenter(null());
HXLINE( 112)		this->add(this->side);
HXLINE( 114)		this->side->screenCenter(::flixel::util::FlxAxes_obj::Y_dyn());
HXLINE( 115)		 ::flixel::FlxSprite _hx_tmp3 = this->side;
HXDLIN( 115)		_hx_tmp3->set_x((( (Float)(500) ) - this->side->get_width()));
HXLINE( 116)		::flixel::tweens::FlxTween_obj::tween(this->side, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("x",78,00,00,00),0)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 118)		::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 119)		::flixel::FlxG_obj::camera->set_zoom(((Float)0.6));
HXLINE( 120)		::flixel::FlxG_obj::camera->set_alpha(( (Float)(0) ));
HXLINE( 121)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)
            			->setFixed(1,HX_("zoom",13,a3,f8,50),1)),((Float)0.7), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 123)		this->scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),5,0,HX_("",00,00,00,00),32,null());
HXLINE( 124)		this->scoreText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 125)		this->scoreText->set_alignment(HX_("left",07,08,b0,47));
HXLINE( 126)		{
HXLINE( 126)			 ::flixel::text::FlxText _this = this->scoreText;
HXDLIN( 126)			_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 126)			_this->set_borderColor(-16777216);
HXDLIN( 126)			_this->set_borderSize(( (Float)(5) ));
HXDLIN( 126)			_this->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 127)		this->scoreText->screenCenter(::flixel::util::FlxAxes_obj::Y_dyn());
HXLINE( 128)		this->scoreText->set_x(( (Float)(10) ));
HXLINE( 129)		this->scoreText->set_alpha(( (Float)(0) ));
HXLINE( 130)		this->add(this->scoreText);
HXLINE( 132)		::flixel::tweens::FlxTween_obj::tween(this->scoreText, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 134)		this->changeSelection(null());
HXLINE( 136)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.7), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 141)		if (::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE( 142)			::String _hx_switch_0 = ( (::String)(::MainVariables_obj::_variables->__Field(HX_("music",a5,d0,5a,10),::hx::paccDynamic)) );
            			if (  (_hx_switch_0==HX_("classic",12,52,91,69)) ){
HXLINE( 145)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 145)				::String library = null();
HXDLIN( 145)				::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN( 145)				_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE( 146)				::Conductor_obj::changeBPM(( (Float)(102) ));
HXLINE( 144)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("funky",ad,f7,88,08)) ){
HXLINE( 148)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 148)				::String library = null();
HXDLIN( 148)				::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("funkyMenu",ec,43,55,b5)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN( 148)				_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE( 149)				::Conductor_obj::changeBPM(( (Float)(140) ));
HXLINE( 147)				goto _hx_goto_3;
            			}
            			_hx_goto_3:;
            		}
HXLINE( 152)		this->super::create();
            	}


void MenuEndless_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_2e824e85d541ed3b_156_update)
HXLINE( 157)		{
HXLINE( 157)			 ::flixel::addons::display::FlxBackdrop _g = this->checker;
HXDLIN( 157)			_g->set_x((_g->x - (((Float)0.27) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 158)		{
HXLINE( 158)			 ::flixel::addons::display::FlxBackdrop _g1 = this->checker;
HXDLIN( 158)			_g1->set_y((_g1->y - (((Float)-0.2) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 160)		this->super::update(elapsed);
HXLINE( 162)		if ((::flixel::FlxG_obj::sound->music->_volume < ((((Float)0.7) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) )) / ( (Float)(100) )))) {
HXLINE( 164)			 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 164)			_g->set_volume((_g->_volume + (((((Float)0.5) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) )) / ( (Float)(100) )) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 167)		Float a = ( (Float)(this->lerpScore) );
HXDLIN( 167)		this->lerpScore = ::Math_obj::floor((a + ((((Float)0.5) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(this->intendedScore) ) - a))));
HXLINE( 169)		if ((::Math_obj::abs(( (Float)((this->lerpScore - this->intendedScore)) )) <= 10)) {
HXLINE( 170)			this->lerpScore = this->intendedScore;
            		}
HXLINE( 172)		this->scoreText->set_text((HX_("PERSONAL BEST:\n",14,a1,aa,1d) + this->lerpScore));
HXLINE( 174)		bool upP = ::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE( 175)		bool downP = ::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE( 176)		bool accepted = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE( 177)		bool back = ::PlayerSettings_obj::player1->controls->_back->check();
HXLINE( 179)		bool _hx_tmp;
HXDLIN( 179)		bool _hx_tmp1;
HXDLIN( 179)		bool _hx_tmp2;
HXDLIN( 179)		if (!(::MenuEndless_obj::substated)) {
HXLINE( 179)			_hx_tmp2 = this->selectable;
            		}
            		else {
HXLINE( 179)			_hx_tmp2 = false;
            		}
HXDLIN( 179)		if (_hx_tmp2) {
HXLINE( 179)			_hx_tmp1 = !(::MenuEndless_obj::goingBack);
            		}
            		else {
HXLINE( 179)			_hx_tmp1 = false;
            		}
HXDLIN( 179)		if (_hx_tmp1) {
HXLINE( 179)			_hx_tmp = !(::MenuEndless_obj::substated);
            		}
            		else {
HXLINE( 179)			_hx_tmp = false;
            		}
HXDLIN( 179)		if (_hx_tmp) {
HXLINE( 181)			if (upP) {
HXLINE( 182)				this->changeSelection(-1);
            			}
HXLINE( 183)			if (downP) {
HXLINE( 184)				this->changeSelection(1);
            			}
HXLINE( 186)			if (back) {
HXLINE( 188)				{
HXLINE( 188)					 ::flixel::FlxState nextState =  ::PlaySelection_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 188)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 188)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE( 189)				::MenuEndless_obj::goingBack = true;
HXLINE( 190)				::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)-0.6))
            					->setFixed(1,HX_("zoom",13,a3,f8,50),((Float)0.6))),((Float)0.7), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 191)				::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.7), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 192)				::flixel::tweens::FlxTween_obj::tween(this->checker, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 193)				::flixel::tweens::FlxTween_obj::tween(this->gradientBar, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 194)				 ::flixel::FlxSprite _hx_tmp = this->side;
HXDLIN( 194)				Float _hx_tmp1 = (( (Float)(-500) ) - this->side->get_width());
HXDLIN( 194)				::flixel::tweens::FlxTween_obj::tween(_hx_tmp, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),_hx_tmp1)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 195)				::flixel::tweens::FlxTween_obj::tween(this->scoreText, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 198)				::DiscordClient_obj::changePresence(HX_("Going back!",14,2f,e7,6a),null(),null(),null(),null());
HXLINE( 201)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 201)				::String _hx_tmp3 = ::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null());
HXDLIN( 201)				_hx_tmp2->play(_hx_tmp3,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
            			}
HXLINE( 204)			if (accepted) {
HXLINE( 206)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 206)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 206)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 208)				::Endless_Substate_obj::song = this->songs->__get(::MenuEndless_obj::curSelected).StaticCast<  ::SongTitlesE >()->songName.toLowerCase();
HXLINE( 210)				::MenuEndless_obj::substated = true;
HXLINE( 211)				 ::flixel::FlxState _hx_tmp2 = ::flixel::FlxG_obj::game->_state;
HXDLIN( 211)				_hx_tmp2->openSubState( ::Endless_Substate_obj::__alloc( HX_CTX ));
            			}
            		}
HXLINE( 215)		if (::MenuEndless_obj::no) {
HXLINE( 217)			this->bg->kill();
HXLINE( 218)			this->side->kill();
HXLINE( 219)			this->gradientBar->kill();
HXLINE( 220)			this->checker->kill();
HXLINE( 221)			this->scoreText->kill();
HXLINE( 222)			this->grpSongs->clear();
            		}
            	}


void MenuEndless_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_2e824e85d541ed3b_227_changeSelection)
HXLINE( 230)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 230)		::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 230)		_hx_tmp->play(_hx_tmp1,((((Float)0.4) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 232)		 ::Dynamic _hx_tmp2 = ::hx::ClassOf< ::MenuEndless >();
HXDLIN( 232)		::MenuEndless_obj::curSelected = (::MenuEndless_obj::curSelected + change);
HXLINE( 234)		if ((::MenuEndless_obj::curSelected < 0)) {
HXLINE( 235)			::MenuEndless_obj::curSelected = (this->songs->length - 1);
            		}
HXLINE( 236)		if ((::MenuEndless_obj::curSelected >= this->songs->length)) {
HXLINE( 237)			::MenuEndless_obj::curSelected = 0;
            		}
HXLINE( 242)		this->intendedScore = ::Highscore_obj::getEndless(this->songs->__get(::MenuEndless_obj::curSelected).StaticCast<  ::SongTitlesE >()->songName.toLowerCase());
HXLINE( 246)		::DiscordClient_obj::changePresence(((HX_("Do I choose ",dd,f1,d8,8a) + this->songs->__get(::MenuEndless_obj::curSelected).StaticCast<  ::SongTitlesE >()->songName) + HX_(" on Endless?",2c,90,6d,cd)),null(),null(),null(),null());
HXLINE( 249)		int bullShit = 0;
HXLINE( 251)		{
HXLINE( 251)			int _g = 0;
HXDLIN( 251)			::Array< ::Dynamic> _g1 = this->grpSongs->members;
HXDLIN( 251)			while((_g < _g1->length)){
HXLINE( 251)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 251)				_g = (_g + 1);
HXLINE( 253)				item->targetY = ( (Float)((bullShit - ::MenuEndless_obj::curSelected)) );
HXLINE( 254)				bullShit = (bullShit + 1);
HXLINE( 256)				item->set_alpha(((Float)0.6));
HXLINE( 259)				if ((item->targetY == 0)) {
HXLINE( 261)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuEndless_obj,changeSelection,(void))

int MenuEndless_obj::curSelected;

bool MenuEndless_obj::substated;

bool MenuEndless_obj::no;

bool MenuEndless_obj::goingBack;


::hx::ObjectPtr< MenuEndless_obj > MenuEndless_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< MenuEndless_obj > __this = new MenuEndless_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< MenuEndless_obj > MenuEndless_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MenuEndless_obj *__this = (MenuEndless_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuEndless_obj), true, "MenuEndless"));
	*(void **)__this = MenuEndless_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MenuEndless_obj::MenuEndless_obj()
{
}

void MenuEndless_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuEndless);
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(checker,"checker");
	HX_MARK_MEMBER_NAME(gradientBar,"gradientBar");
	HX_MARK_MEMBER_NAME(side,"side");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(songs,"songs");
	HX_MARK_MEMBER_NAME(scoreText,"scoreText");
	HX_MARK_MEMBER_NAME(lerpScore,"lerpScore");
	HX_MARK_MEMBER_NAME(intendedScore,"intendedScore");
	HX_MARK_MEMBER_NAME(grpSongs,"grpSongs");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuEndless_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(checker,"checker");
	HX_VISIT_MEMBER_NAME(gradientBar,"gradientBar");
	HX_VISIT_MEMBER_NAME(side,"side");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(songs,"songs");
	HX_VISIT_MEMBER_NAME(scoreText,"scoreText");
	HX_VISIT_MEMBER_NAME(lerpScore,"lerpScore");
	HX_VISIT_MEMBER_NAME(intendedScore,"intendedScore");
	HX_VISIT_MEMBER_NAME(grpSongs,"grpSongs");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuEndless_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"side") ) { return ::hx::Val( side ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { return ::hx::Val( songs ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { return ::hx::Val( checker ); }
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"grpSongs") ) { return ::hx::Val( grpSongs ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { return ::hx::Val( scoreText ); }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { return ::hx::Val( lerpScore ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { return ::hx::Val( gradientBar ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedScore") ) { return ::hx::Val( intendedScore ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MenuEndless_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"no") ) { outValue = ( no ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"substated") ) { outValue = ( substated ); return true; }
		if (HX_FIELD_EQ(inName,"goingBack") ) { outValue = ( goingBack ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val MenuEndless_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"side") ) { side=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { songs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { checker=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"grpSongs") ) { grpSongs=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { lerpScore=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { gradientBar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedScore") ) { intendedScore=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MenuEndless_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"no") ) { no=ioValue.Cast< bool >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"substated") ) { substated=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"goingBack") ) { goingBack=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void MenuEndless_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("checker",35,b3,24,13));
	outFields->push(HX_("gradientBar",c3,05,20,d3));
	outFields->push(HX_("side",97,8d,53,4c));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("songs",fe,36,c7,80));
	outFields->push(HX_("scoreText",1f,7d,bd,dc));
	outFields->push(HX_("lerpScore",5b,81,4d,e7));
	outFields->push(HX_("intendedScore",a7,fd,7c,89));
	outFields->push(HX_("grpSongs",d9,dc,c7,63));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuEndless_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuEndless_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(MenuEndless_obj,checker),HX_("checker",35,b3,24,13)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuEndless_obj,gradientBar),HX_("gradientBar",c3,05,20,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuEndless_obj,side),HX_("side",97,8d,53,4c)},
	{::hx::fsFloat,(int)offsetof(MenuEndless_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsBool,(int)offsetof(MenuEndless_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MenuEndless_obj,songs),HX_("songs",fe,36,c7,80)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuEndless_obj,scoreText),HX_("scoreText",1f,7d,bd,dc)},
	{::hx::fsInt,(int)offsetof(MenuEndless_obj,lerpScore),HX_("lerpScore",5b,81,4d,e7)},
	{::hx::fsInt,(int)offsetof(MenuEndless_obj,intendedScore),HX_("intendedScore",a7,fd,7c,89)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MenuEndless_obj,grpSongs),HX_("grpSongs",d9,dc,c7,63)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MenuEndless_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &MenuEndless_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsBool,(void *) &MenuEndless_obj::substated,HX_("substated",b3,a2,b3,d7)},
	{::hx::fsBool,(void *) &MenuEndless_obj::no,HX_("no",41,60,00,00)},
	{::hx::fsBool,(void *) &MenuEndless_obj::goingBack,HX_("goingBack",01,e7,bf,2f)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MenuEndless_obj_sMemberFields[] = {
	HX_("bg",c5,55,00,00),
	HX_("checker",35,b3,24,13),
	HX_("gradientBar",c3,05,20,d3),
	HX_("side",97,8d,53,4c),
	HX_("camLerp",26,66,a1,d2),
	HX_("selectable",96,b6,2a,c4),
	HX_("songs",fe,36,c7,80),
	HX_("scoreText",1f,7d,bd,dc),
	HX_("lerpScore",5b,81,4d,e7),
	HX_("intendedScore",a7,fd,7c,89),
	HX_("grpSongs",d9,dc,c7,63),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("changeSelection",bc,98,b5,48),
	::String(null()) };

static void MenuEndless_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuEndless_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(MenuEndless_obj::substated,"substated");
	HX_MARK_MEMBER_NAME(MenuEndless_obj::no,"no");
	HX_MARK_MEMBER_NAME(MenuEndless_obj::goingBack,"goingBack");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuEndless_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuEndless_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(MenuEndless_obj::substated,"substated");
	HX_VISIT_MEMBER_NAME(MenuEndless_obj::no,"no");
	HX_VISIT_MEMBER_NAME(MenuEndless_obj::goingBack,"goingBack");
};

#endif

::hx::Class MenuEndless_obj::__mClass;

static ::String MenuEndless_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("substated",b3,a2,b3,d7),
	HX_("no",41,60,00,00),
	HX_("goingBack",01,e7,bf,2f),
	::String(null())
};

void MenuEndless_obj::__register()
{
	MenuEndless_obj _hx_dummy;
	MenuEndless_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MenuEndless",b5,9c,5d,74);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MenuEndless_obj::__GetStatic;
	__mClass->mSetStaticField = &MenuEndless_obj::__SetStatic;
	__mClass->mMarkFunc = MenuEndless_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MenuEndless_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuEndless_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuEndless_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuEndless_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuEndless_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuEndless_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MenuEndless_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2e824e85d541ed3b_37_boot)
HXDLIN(  37)		curSelected = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2e824e85d541ed3b_41_boot)
HXDLIN(  41)		substated = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2e824e85d541ed3b_42_boot)
HXDLIN(  42)		no = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2e824e85d541ed3b_43_boot)
HXDLIN(  43)		goingBack = false;
            	}
}


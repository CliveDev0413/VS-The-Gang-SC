// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_AnimationDebug
#include <AnimationDebug.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_SettingsState
#include <SettingsState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <haxe/iterators/MapKeyValueIterator.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_20_new,"AnimationDebug","new",0xa1e22d41,"AnimationDebug.new","AnimationDebug.hx",20,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_105_create,"AnimationDebug","create",0x2b9b8cbb,"AnimationDebug.create","AnimationDebug.hx",105,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_131_create,"AnimationDebug","create",0x2b9b8cbb,"AnimationDebug.create","AnimationDebug.hx",131,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_47_create,"AnimationDebug","create",0x2b9b8cbb,"AnimationDebug.create","AnimationDebug.hx",47,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_148_genBoyOffsets,"AnimationDebug","genBoyOffsets",0xa90e05a5,"AnimationDebug.genBoyOffsets","AnimationDebug.hx",148,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_169_updateTexts,"AnimationDebug","updateTexts",0xfaa95a3e,"AnimationDebug.updateTexts","AnimationDebug.hx",169,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_167_updateTexts,"AnimationDebug","updateTexts",0xfaa95a3e,"AnimationDebug.updateTexts","AnimationDebug.hx",167,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_178_update,"AnimationDebug","update",0x3691abc8,"AnimationDebug.update","AnimationDebug.hx",178,0x57f8f54f)
static const int _hx_array_data_919878cf_9[] = {
	(int)38,
};
static const int _hx_array_data_919878cf_10[] = {
	(int)39,
};
static const int _hx_array_data_919878cf_11[] = {
	(int)40,
};
static const int _hx_array_data_919878cf_12[] = {
	(int)37,
};
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_265_generateCharacter,"AnimationDebug","generateCharacter",0x94481255,"AnimationDebug.generateCharacter","AnimationDebug.hx",265,0x57f8f54f)

void AnimationDebug_obj::__construct(::String __o_daAnim){
            		::String daAnim = __o_daAnim;
            		if (::hx::IsNull(__o_daAnim)) daAnim = HX_("spooky",eb,bd,9e,c1);
            	HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_20_new)
HXLINE( 175)		this->multiplier = 1;
HXLINE(  33)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,-5,null());
HXDLIN(  33)		::String library = null();
HXDLIN(  33)		this->controlsD = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Debug_Controls",62,19,e5,02)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  30)		this->daAnim = HX_("spooky",eb,bd,9e,c1);
HXLINE(  29)		this->isDad = true;
HXLINE(  28)		this->curAnim = 0;
HXLINE(  27)		this->animList = ::Array_obj< ::String >::__new(0);
HXLINE(  42)		super::__construct(null(),null());
HXLINE(  43)		this->daAnim = daAnim;
            	}

Dynamic AnimationDebug_obj::__CreateEmpty() { return new AnimationDebug_obj; }

void *AnimationDebug_obj::_hx_vtable = 0;

Dynamic AnimationDebug_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AnimationDebug_obj > _hx_result = new AnimationDebug_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AnimationDebug_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x7383fb8f || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void AnimationDebug_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::AnimationDebug,_gthis,::Array< ::String >,characters, ::flixel::addons::ui::FlxUICheckBox,check_isPlayer) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_105_create)
HXLINE( 106)			::Array< ::String > characters1 = characters;
HXDLIN( 106)			 ::Dynamic player1DropDown = ::Std_obj::parseInt(character);
HXDLIN( 106)			_gthis->daAnim = characters1->__get(( (int)(player1DropDown) ));
HXLINE( 107)			_gthis->remove(_gthis->dad,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 108)			_gthis->remove(_gthis->bf,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 110)			_gthis->animList = ::Array_obj< ::String >::__new(0);
HXLINE( 111)			_gthis->generateCharacter();
HXLINE( 112)			if (_gthis->isDad) {
HXLINE( 113)				_gthis->dad->set_flipX(check_isPlayer->checked);
            			}
            			else {
HXLINE( 115)				_gthis->bf->set_flipX(!(check_isPlayer->checked));
            			}
HXLINE( 117)			_gthis->dumbTexts->clear();
HXLINE( 118)			_gthis->updateTexts();
HXLINE( 119)			_gthis->genBoyOffsets(null());
HXLINE( 121)			_gthis->_hx_char->playAnim(_gthis->animList->__get(0),null(),null(),null());
HXLINE( 123)			_gthis->updateTexts();
HXLINE( 124)			_gthis->genBoyOffsets(false);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::AnimationDebug,_gthis, ::flixel::addons::ui::FlxUICheckBox,check_isPlayer) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_131_create)
HXLINE( 131)			if (_gthis->isDad) {
HXLINE( 132)				_gthis->dad->set_flipX(check_isPlayer->checked);
            			}
            			else {
HXLINE( 134)				_gthis->bf->set_flipX(!(check_isPlayer->checked));
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_47_create)
HXLINE(  46)		 ::AnimationDebug _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  48)		this->camBG =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  49)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  51)		::flixel::FlxG_obj::cameras->reset(this->camBG);
HXLINE(  53)		{
HXLINE(  53)			 ::flixel::FlxCamera _hx_tmp = this->camHUD;
HXDLIN(  53)			_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN(  53)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN(  53)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            		}
HXLINE(  54)		::flixel::FlxG_obj::cameras->add(this->camHUD).StaticCast<  ::flixel::FlxCamera >();
HXLINE(  56)		::flixel::FlxCamera_obj::defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camBG);
HXLINE(  58)		{
HXLINE(  58)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  58)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(  60)		 ::flixel::FlxSprite _hx_tmp2 = this->controlsD;
HXDLIN(  60)		int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN(  60)		_hx_tmp2->set_x((( (Float)(_hx_tmp3) ) - this->controlsD->get_width()));
HXLINE(  61)		this->add(this->controlsD);
HXLINE(  63)		 ::flixel::FlxSprite gridBG = ::flixel::addons::display::FlxGridOverlay_obj::create(10,10,null(),null(),null(),null(),null());
HXLINE(  64)		gridBG->scrollFactor->set(((Float)0.5),((Float)0.5));
HXLINE(  65)		this->add(gridBG);
HXLINE(  67)		this->generateCharacter();
HXLINE(  69)		this->dumbTexts =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  70)		this->add(this->dumbTexts);
HXLINE(  72)		this->textAnim =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,600,16,null(),null(),null(),null());
HXLINE(  73)		this->textAnim->set_size(26);
HXLINE(  74)		this->textAnim->scrollFactor->set(null(),null());
HXLINE(  75)		{
HXLINE(  75)			 ::flixel::text::FlxText _this1 = this->textAnim;
HXDLIN(  75)			_this1->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(  75)			_this1->set_borderColor(-16777216);
HXDLIN(  75)			_this1->set_borderSize(( (Float)(3) ));
HXDLIN(  75)			_this1->set_borderQuality(( (Float)(1) ));
            		}
HXLINE(  76)		this->add(this->textAnim);
HXLINE(  78)		this->genBoyOffsets(null());
HXLINE(  80)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,2,2);
HXLINE(  81)		this->camFollow->screenCenter(null());
HXLINE(  82)		this->add(this->camFollow);
HXLINE(  84)		::flixel::FlxG_obj::camera->follow(this->camFollow,null(),null());
HXLINE(  85)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  87)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Character",89,bb,a4,e3))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Character",89,bb,a4,e3))));
HXLINE(  91)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE(  93)		this->UI_box->resize(( (Float)(340) ),( (Float)(60) ));
HXLINE(  94)		this->UI_box->set_x(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(38) )));
HXLINE(  95)		this->UI_box->set_y(( (Float)(70) ));
HXLINE(  96)		this->add(this->UI_box);
HXLINE(  98)		 ::flixel::addons::ui::FlxUI tab_group_character =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(  99)		 ::flixel::addons::ui::FlxUICheckBox check_isPlayer =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,200,10,null(),null(),HX_("Is Player",d7,6c,7c,77),100,null(),null());
HXLINE( 100)		tab_group_character->name = HX_("Character",89,bb,a4,e3);
HXLINE( 102)		::String library = null();
HXDLIN( 102)		::Array< ::String > characters = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("characterList",a7,ac,9f,40)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 104)		 ::flixel::addons::ui::FlxUIDropDownMenu player1DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,10,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_0(_gthis,characters,check_isPlayer)),null(),null(),null(),null());
HXLINE( 126)		player1DropDown->set_selectedLabel(this->daAnim);
HXLINE( 128)		check_isPlayer->set_checked(false);
HXLINE( 129)		check_isPlayer->callback =  ::Dynamic(new _hx_Closure_1(_gthis,check_isPlayer));
HXLINE( 137)		tab_group_character->add(player1DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 138)		tab_group_character->add(check_isPlayer).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 140)		this->UI_box->addGroup(tab_group_character);
HXLINE( 142)		 ::flixel::addons::ui::FlxUITabMenu _hx_tmp4 = this->UI_box;
HXDLIN( 142)		 ::flixel::FlxSprite _hx_tmp5 = this->controlsD;
HXDLIN( 142)		 ::flixel::group::FlxTypedGroup _hx_tmp6 = this->dumbTexts;
HXDLIN( 142)		_hx_tmp4->set_cameras(_hx_tmp5->set_cameras(_hx_tmp6->set_cameras(this->textAnim->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD)))));
HXLINE( 144)		this->super::create();
            	}


void AnimationDebug_obj::genBoyOffsets(::hx::Null< bool >  __o_pushList){
            		bool pushList = __o_pushList.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_148_genBoyOffsets)
HXLINE( 149)		int daLoop = 0;
HXLINE( 151)		{
HXLINE( 151)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,this->_hx_char->animOffsets);
HXDLIN( 151)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 151)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 151)				::String anim = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN( 151)				::cpp::VirtualArray offsets = ( (::cpp::VirtualArray)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE( 152)				{
HXLINE( 153)					 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,300,(20 + (18 * daLoop)),0,((anim + HX_(": ",a6,32,00,00)) + ::Std_obj::string(offsets)),15,null());
HXLINE( 154)					text->scrollFactor->set(null(),null());
HXLINE( 155)					text->set_color(-13574145);
HXLINE( 156)					{
HXLINE( 156)						text->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 156)						text->set_borderColor(-16777216);
HXDLIN( 156)						text->set_borderSize(( (Float)(2) ));
HXDLIN( 156)						text->set_borderQuality(( (Float)(1) ));
            					}
HXLINE( 157)					this->dumbTexts->add(text).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 159)					if (pushList) {
HXLINE( 160)						this->animList->push(anim);
            					}
HXLINE( 162)					daLoop = (daLoop + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimationDebug_obj,genBoyOffsets,(void))

void AnimationDebug_obj::updateTexts(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::AnimationDebug,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::text::FlxText text){
            			HX_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_169_updateTexts)
HXLINE( 170)			text->kill();
HXLINE( 171)			_gthis->dumbTexts->remove(text,true).StaticCast<  ::flixel::text::FlxText >();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_167_updateTexts)
HXLINE( 166)		 ::AnimationDebug _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 168)		this->dumbTexts->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimationDebug_obj,updateTexts,(void))

void AnimationDebug_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_178_update)
HXLINE( 179)		this->textAnim->set_text((HX_("CURRENT: ",ff,9a,86,3c) + this->_hx_char->animation->_curAnim->name));
HXLINE( 181)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 181)		if (_this->keyManager->checkStatus(69,_this->status)) {
HXLINE( 182)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 182)			_g->set_zoom((_g->zoom + (((Float)0.02) * ( (Float)(this->multiplier) ))));
            		}
HXLINE( 183)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 183)		if (_this1->keyManager->checkStatus(81,_this1->status)) {
HXLINE( 184)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 184)			_g->set_zoom((_g->zoom - (((Float)0.02) * ( (Float)(this->multiplier) ))));
            		}
HXLINE( 186)		bool _hx_tmp;
HXDLIN( 186)		bool _hx_tmp1;
HXDLIN( 186)		bool _hx_tmp2;
HXDLIN( 186)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 186)		if (!(_this2->keyManager->checkStatus(73,_this2->status))) {
HXLINE( 186)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 186)			_hx_tmp2 = _this->keyManager->checkStatus(74,_this->status);
            		}
            		else {
HXLINE( 186)			_hx_tmp2 = true;
            		}
HXDLIN( 186)		if (!(_hx_tmp2)) {
HXLINE( 186)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 186)			_hx_tmp1 = _this->keyManager->checkStatus(75,_this->status);
            		}
            		else {
HXLINE( 186)			_hx_tmp1 = true;
            		}
HXDLIN( 186)		if (!(_hx_tmp1)) {
HXLINE( 186)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 186)			_hx_tmp = _this->keyManager->checkStatus(76,_this->status);
            		}
            		else {
HXLINE( 186)			_hx_tmp = true;
            		}
HXDLIN( 186)		if (_hx_tmp) {
HXLINE( 188)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 188)			if (_this->keyManager->checkStatus(73,_this->status)) {
HXLINE( 189)				 ::flixel::FlxObject _g = this->camFollow;
HXDLIN( 189)				_g->set_y((_g->y + (-5 * this->multiplier)));
            			}
            			else {
HXLINE( 190)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 190)				if (_this->keyManager->checkStatus(75,_this->status)) {
HXLINE( 191)					 ::flixel::FlxObject _g = this->camFollow;
HXDLIN( 191)					_g->set_y((_g->y + (5 * this->multiplier)));
            				}
            			}
HXLINE( 193)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 193)			if (_this1->keyManager->checkStatus(74,_this1->status)) {
HXLINE( 194)				 ::flixel::FlxObject _g = this->camFollow;
HXDLIN( 194)				_g->set_x((_g->x + (-5 * this->multiplier)));
            			}
            			else {
HXLINE( 195)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 195)				if (_this->keyManager->checkStatus(76,_this->status)) {
HXLINE( 196)					 ::flixel::FlxObject _g = this->camFollow;
HXDLIN( 196)					_g->set_x((_g->x + (5 * this->multiplier)));
            				}
            			}
            		}
            		else {
HXLINE( 200)			this->camFollow->velocity->set(null(),null());
            		}
HXLINE( 203)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 203)		if (_this3->keyManager->checkStatus(87,_this3->status)) {
HXLINE( 205)			 ::AnimationDebug _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 205)			_hx_tmp->curAnim = (_hx_tmp->curAnim - 1);
            		}
HXLINE( 208)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 208)		if (_this4->keyManager->checkStatus(83,_this4->status)) {
HXLINE( 210)			 ::AnimationDebug _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 210)			_hx_tmp->curAnim = (_hx_tmp->curAnim + 1);
            		}
HXLINE( 213)		if ((this->curAnim < 0)) {
HXLINE( 214)			this->curAnim = (this->animList->length - 1);
            		}
HXLINE( 216)		if ((this->curAnim >= this->animList->length)) {
HXLINE( 217)			this->curAnim = 0;
            		}
HXLINE( 219)		bool _hx_tmp3;
HXDLIN( 219)		bool _hx_tmp4;
HXDLIN( 219)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 219)		if (!(_this5->keyManager->checkStatus(83,_this5->status))) {
HXLINE( 219)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 219)			_hx_tmp4 = _this->keyManager->checkStatus(87,_this->status);
            		}
            		else {
HXLINE( 219)			_hx_tmp4 = true;
            		}
HXDLIN( 219)		if (!(_hx_tmp4)) {
HXLINE( 219)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 219)			_hx_tmp3 = _this->keyManager->checkStatus(32,_this->status);
            		}
            		else {
HXLINE( 219)			_hx_tmp3 = true;
            		}
HXDLIN( 219)		if (_hx_tmp3) {
HXLINE( 221)			this->_hx_char->playAnim(this->animList->__get(this->curAnim),null(),null(),null());
HXLINE( 223)			this->updateTexts();
HXLINE( 224)			this->genBoyOffsets(false);
            		}
HXLINE( 227)		bool upP = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_919878cf_9,1),2);
HXLINE( 228)		bool rightP = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_919878cf_10,1),2);
HXLINE( 229)		bool downP = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_919878cf_11,1),2);
HXLINE( 230)		bool leftP = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_919878cf_12,1),2);
HXLINE( 232)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 232)		bool holdShift = _this6->keyManager->checkStatus(16,_this6->status);
HXLINE( 233)		if (holdShift) {
HXLINE( 234)			this->multiplier = 10;
            		}
            		else {
HXLINE( 236)			this->multiplier = 1;
            		}
HXLINE( 238)		bool _hx_tmp5;
HXDLIN( 238)		bool _hx_tmp6;
HXDLIN( 238)		bool _hx_tmp7;
HXDLIN( 238)		if (!(upP)) {
HXLINE( 238)			_hx_tmp7 = rightP;
            		}
            		else {
HXLINE( 238)			_hx_tmp7 = true;
            		}
HXDLIN( 238)		if (!(_hx_tmp7)) {
HXLINE( 238)			_hx_tmp6 = downP;
            		}
            		else {
HXLINE( 238)			_hx_tmp6 = true;
            		}
HXDLIN( 238)		if (!(_hx_tmp6)) {
HXLINE( 238)			_hx_tmp5 = leftP;
            		}
            		else {
HXLINE( 238)			_hx_tmp5 = true;
            		}
HXDLIN( 238)		if (_hx_tmp5) {
HXLINE( 240)			this->updateTexts();
HXLINE( 241)			if (upP) {
HXLINE( 242)				::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)(this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))) );
HXDLIN( 242)				int _hx_tmp1 = 1;
HXDLIN( 242)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) + this->multiplier));
            			}
HXLINE( 243)			if (downP) {
HXLINE( 244)				::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)(this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))) );
HXDLIN( 244)				int _hx_tmp1 = 1;
HXDLIN( 244)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) - this->multiplier));
            			}
HXLINE( 245)			if (leftP) {
HXLINE( 246)				::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)(this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))) );
HXDLIN( 246)				int _hx_tmp1 = 0;
HXDLIN( 246)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) + this->multiplier));
            			}
HXLINE( 247)			if (rightP) {
HXLINE( 248)				::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)(this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))) );
HXDLIN( 248)				int _hx_tmp1 = 0;
HXDLIN( 248)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) - this->multiplier));
            			}
HXLINE( 250)			this->updateTexts();
HXLINE( 251)			this->genBoyOffsets(false);
HXLINE( 252)			this->_hx_char->playAnim(this->animList->__get(this->curAnim),null(),null(),null());
            		}
HXLINE( 255)		 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 255)		if (_this7->keyManager->checkStatus(27,_this7->status)) {
HXLINE( 257)			{
HXLINE( 257)				 ::flixel::FlxState nextState =  ::SettingsState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 257)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 257)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE( 258)			::flixel::FlxG_obj::mouse->set_visible(false);
            		}
HXLINE( 261)		this->super::update(elapsed);
            	}


void AnimationDebug_obj::generateCharacter(){
            	HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_265_generateCharacter)
HXLINE( 266)		if ((this->daAnim == HX_("bf",c4,55,00,00))) {
HXLINE( 267)			this->isDad = false;
            		}
            		else {
HXLINE( 269)			this->isDad = true;
            		}
HXLINE( 271)		if (this->isDad) {
HXLINE( 273)			this->dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),this->daAnim,null());
HXLINE( 274)			this->dad->screenCenter(null());
HXLINE( 275)			this->dad->debugMode = true;
HXLINE( 276)			this->add(this->dad);
HXLINE( 278)			this->_hx_char = this->dad;
HXLINE( 279)			this->dad->set_flipX(false);
            		}
            		else {
HXLINE( 283)			this->bf =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),null());
HXLINE( 284)			this->bf->screenCenter(null());
HXLINE( 285)			this->bf->debugMode = true;
HXLINE( 286)			this->add(this->bf);
HXLINE( 288)			this->_hx_char = this->bf;
HXLINE( 289)			this->bf->set_flipX(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimationDebug_obj,generateCharacter,(void))


::hx::ObjectPtr< AnimationDebug_obj > AnimationDebug_obj::__new(::String __o_daAnim) {
	::hx::ObjectPtr< AnimationDebug_obj > __this = new AnimationDebug_obj();
	__this->__construct(__o_daAnim);
	return __this;
}

::hx::ObjectPtr< AnimationDebug_obj > AnimationDebug_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o_daAnim) {
	AnimationDebug_obj *__this = (AnimationDebug_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AnimationDebug_obj), true, "AnimationDebug"));
	*(void **)__this = AnimationDebug_obj::_hx_vtable;
	__this->__construct(__o_daAnim);
	return __this;
}

AnimationDebug_obj::AnimationDebug_obj()
{
}

void AnimationDebug_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AnimationDebug);
	HX_MARK_MEMBER_NAME(bf,"bf");
	HX_MARK_MEMBER_NAME(dad,"dad");
	HX_MARK_MEMBER_NAME(_hx_char,"char");
	HX_MARK_MEMBER_NAME(textAnim,"textAnim");
	HX_MARK_MEMBER_NAME(dumbTexts,"dumbTexts");
	HX_MARK_MEMBER_NAME(animList,"animList");
	HX_MARK_MEMBER_NAME(curAnim,"curAnim");
	HX_MARK_MEMBER_NAME(isDad,"isDad");
	HX_MARK_MEMBER_NAME(daAnim,"daAnim");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(controlsD,"controlsD");
	HX_MARK_MEMBER_NAME(camBG,"camBG");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(multiplier,"multiplier");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AnimationDebug_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bf,"bf");
	HX_VISIT_MEMBER_NAME(dad,"dad");
	HX_VISIT_MEMBER_NAME(_hx_char,"char");
	HX_VISIT_MEMBER_NAME(textAnim,"textAnim");
	HX_VISIT_MEMBER_NAME(dumbTexts,"dumbTexts");
	HX_VISIT_MEMBER_NAME(animList,"animList");
	HX_VISIT_MEMBER_NAME(curAnim,"curAnim");
	HX_VISIT_MEMBER_NAME(isDad,"isDad");
	HX_VISIT_MEMBER_NAME(daAnim,"daAnim");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(controlsD,"controlsD");
	HX_VISIT_MEMBER_NAME(camBG,"camBG");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(multiplier,"multiplier");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val AnimationDebug_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bf") ) { return ::hx::Val( bf ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { return ::hx::Val( dad ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"char") ) { return ::hx::Val( _hx_char ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"isDad") ) { return ::hx::Val( isDad ); }
		if (HX_FIELD_EQ(inName,"camBG") ) { return ::hx::Val( camBG ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"daAnim") ) { return ::hx::Val( daAnim ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curAnim") ) { return ::hx::Val( curAnim ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textAnim") ) { return ::hx::Val( textAnim ); }
		if (HX_FIELD_EQ(inName,"animList") ) { return ::hx::Val( animList ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dumbTexts") ) { return ::hx::Val( dumbTexts ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"controlsD") ) { return ::hx::Val( controlsD ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"multiplier") ) { return ::hx::Val( multiplier ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"updateTexts") ) { return ::hx::Val( updateTexts_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"genBoyOffsets") ) { return ::hx::Val( genBoyOffsets_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"generateCharacter") ) { return ::hx::Val( generateCharacter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AnimationDebug_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bf") ) { bf=inValue.Cast<  ::Boyfriend >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { dad=inValue.Cast<  ::Character >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"char") ) { _hx_char=inValue.Cast<  ::Character >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"isDad") ) { isDad=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camBG") ) { camBG=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"daAnim") ) { daAnim=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curAnim") ) { curAnim=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textAnim") ) { textAnim=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animList") ) { animList=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dumbTexts") ) { dumbTexts=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"controlsD") ) { controlsD=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"multiplier") ) { multiplier=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AnimationDebug_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bf",c4,55,00,00));
	outFields->push(HX_("dad",47,36,4c,00));
	outFields->push(HX_("char",d6,5e,bf,41));
	outFields->push(HX_("textAnim",5e,d9,6c,43));
	outFields->push(HX_("dumbTexts",20,d4,be,0e));
	outFields->push(HX_("animList",0f,ab,08,7b));
	outFields->push(HX_("curAnim",b1,f7,86,ab));
	outFields->push(HX_("isDad",7d,60,4a,c1));
	outFields->push(HX_("daAnim",2e,0c,d9,00));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("controlsD",0e,21,39,8d));
	outFields->push(HX_("camBG",94,0f,1c,41));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("multiplier",81,e7,18,01));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AnimationDebug_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Boyfriend */ ,(int)offsetof(AnimationDebug_obj,bf),HX_("bf",c4,55,00,00)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(AnimationDebug_obj,dad),HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(AnimationDebug_obj,_hx_char),HX_("char",d6,5e,bf,41)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(AnimationDebug_obj,textAnim),HX_("textAnim",5e,d9,6c,43)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(AnimationDebug_obj,dumbTexts),HX_("dumbTexts",20,d4,be,0e)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(AnimationDebug_obj,animList),HX_("animList",0f,ab,08,7b)},
	{::hx::fsInt,(int)offsetof(AnimationDebug_obj,curAnim),HX_("curAnim",b1,f7,86,ab)},
	{::hx::fsBool,(int)offsetof(AnimationDebug_obj,isDad),HX_("isDad",7d,60,4a,c1)},
	{::hx::fsString,(int)offsetof(AnimationDebug_obj,daAnim),HX_("daAnim",2e,0c,d9,00)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(AnimationDebug_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(AnimationDebug_obj,controlsD),HX_("controlsD",0e,21,39,8d)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(AnimationDebug_obj,camBG),HX_("camBG",94,0f,1c,41)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(AnimationDebug_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(AnimationDebug_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsInt,(int)offsetof(AnimationDebug_obj,multiplier),HX_("multiplier",81,e7,18,01)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AnimationDebug_obj_sStaticStorageInfo = 0;
#endif

static ::String AnimationDebug_obj_sMemberFields[] = {
	HX_("bf",c4,55,00,00),
	HX_("dad",47,36,4c,00),
	HX_("char",d6,5e,bf,41),
	HX_("textAnim",5e,d9,6c,43),
	HX_("dumbTexts",20,d4,be,0e),
	HX_("animList",0f,ab,08,7b),
	HX_("curAnim",b1,f7,86,ab),
	HX_("isDad",7d,60,4a,c1),
	HX_("daAnim",2e,0c,d9,00),
	HX_("camFollow",e0,6e,47,22),
	HX_("controlsD",0e,21,39,8d),
	HX_("camBG",94,0f,1c,41),
	HX_("camHUD",e8,2b,76,b7),
	HX_("UI_box",60,07,ac,43),
	HX_("create",fc,66,0f,7c),
	HX_("genBoyOffsets",84,65,f8,17),
	HX_("updateTexts",5d,b4,31,f3),
	HX_("multiplier",81,e7,18,01),
	HX_("update",09,86,05,87),
	HX_("generateCharacter",b4,4d,a9,37),
	::String(null()) };

::hx::Class AnimationDebug_obj::__mClass;

void AnimationDebug_obj::__register()
{
	AnimationDebug_obj _hx_dummy;
	AnimationDebug_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("AnimationDebug",cf,78,98,91);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AnimationDebug_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AnimationDebug_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnimationDebug_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnimationDebug_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}


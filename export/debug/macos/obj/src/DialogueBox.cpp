// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_DialogueBox
#include <DialogueBox.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_ModifierVariables
#include <ModifierVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTypeText
#include <flixel/addons/text/FlxTypeText.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_130_new,"DialogueBox","new",0x1f391625,"DialogueBox.new","DialogueBox.hx",130,0x0149b4eb)
HX_DEFINE_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_26_new,"DialogueBox","new",0x1f391625,"DialogueBox.new","DialogueBox.hx",26,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_207_update,"DialogueBox","update",0x23306964,"DialogueBox.update","DialogueBox.hx",207,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_250_update,"DialogueBox","update",0x23306964,"DialogueBox.update","DialogueBox.hx",250,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_260_update,"DialogueBox","update",0x23306964,"DialogueBox.update","DialogueBox.hx",260,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_280_setUp,"DialogueBox","setUp",0x114593a2,"DialogueBox.setUp","DialogueBox.hx",280,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_360_startDialogue,"DialogueBox","startDialogue",0x59859d9f,"DialogueBox.startDialogue","DialogueBox.hx",360,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_364_startDialogue,"DialogueBox","startDialogue",0x59859d9f,"DialogueBox.startDialogue","DialogueBox.hx",364,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_349_startDialogue,"DialogueBox","startDialogue",0x59859d9f,"DialogueBox.startDialogue","DialogueBox.hx",349,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_402_startDialogue,"DialogueBox","startDialogue",0x59859d9f,"DialogueBox.startDialogue","DialogueBox.hx",402,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_457_startDialogue,"DialogueBox","startDialogue",0x59859d9f,"DialogueBox.startDialogue","DialogueBox.hx",457,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_468_cleanDialog,"DialogueBox","cleanDialog",0x0fc249f6,"DialogueBox.cleanDialog","DialogueBox.hx",468,0x0149b4eb)

void DialogueBox_obj::__construct(::hx::Null< bool >  __o_talkingRight,::Array< ::String > dialogueList){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::DialogueBox,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_130_new)
HXLINE( 131)			{
HXLINE( 131)				 ::flixel::FlxSprite _g = _gthis->bgFade;
HXDLIN( 131)				_g->set_alpha((_g->alpha + (( (Float)(1) ) / ( (Float)(_gthis->bgFIL) ))));
            			}
HXLINE( 132)			if ((_gthis->bgFade->alpha > 1)) {
HXLINE( 133)				_gthis->bgFade->set_alpha(( (Float)(1) ));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		bool talkingRight = __o_talkingRight.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_26_new)
HXLINE( 276)		this->isEnding = false;
HXLINE( 204)		this->dialogueStarted = false;
HXLINE( 203)		this->dialogueOpened = false;
HXLINE(  77)		this->dialogueList = ::Array_obj< ::String >::__new(0);
HXLINE(  71)		this->curSound = HX_("pixelText",53,7a,83,06);
HXLINE(  70)		this->oldBox = HX_("",00,00,00,00);
HXLINE(  69)		this->curBox = HX_("pixel_normal",00,3a,49,bb);
HXLINE(  68)		this->curFontScale = HX_("32",9f,2c,00,00);
HXLINE(  67)		this->curFont = HX_("Pixel Arial 11 Bold",ae,17,c6,45);
HXLINE(  66)		this->curFlip = HX_("false",a3,35,4f,fb);
HXLINE(  65)		this->curSpeed = HX_("0.04",82,4f,dd,1f);
HXLINE(  64)		this->curFlashDelay = HX_("0",30,00,00,00);
HXLINE(  63)		this->curFlashTime = HX_("0",30,00,00,00);
HXLINE(  62)		this->curShakeDelay = HX_("0",30,00,00,00);
HXLINE(  61)		this->curShakeTime = HX_("0",30,00,00,00);
HXLINE(  60)		this->curShake = HX_("0",30,00,00,00);
HXLINE(  59)		this->curEmotion = HX_("",00,00,00,00);
HXLINE(  58)		this->curVolume = HX_("100",71,58,25,00);
HXLINE(  57)		this->oldCharacter = HX_("",00,00,00,00);
HXLINE(  56)		this->curCharacter = HX_("",00,00,00,00);
HXLINE(  53)		this->clickSound = HX_("#FF000000",63,06,e7,cd);
HXLINE(  52)		this->handSprite = HX_("#FFFFFFFF",23,30,2d,53);
HXLINE(  45)		this->portraitColor = HX_("#FF000000",63,06,e7,cd);
HXLINE(  44)		this->shadowColor = HX_("#FFFFFFFF",23,30,2d,53);
HXLINE(  43)		this->dialogueColor = HX_("",00,00,00,00);
HXLINE(  41)		this->curMusic = HX_("",00,00,00,00);
HXLINE(  32)		this->camLerp = ((Float)0.14);
HXLINE(  91)		 ::DialogueBox _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  93)		super::__construct(null(),null(),null());
HXLINE(  95)		if (::hx::IsNull( ::PlayState_obj::dialogue )) {
HXLINE(  96)			return;
            		}
HXLINE(  98)		::DialogueBox_obj::_dialogue =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("addY",18,eb,69,40),0)
            			->setFixed(1,HX_("canFlip",dd,fa,15,62),true));
HXLINE( 103)		this->dialogueList = dialogueList;
HXLINE( 105)		this->setUp();
HXLINE( 107)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("VibeSwitch",6a,9e,5d,65),::hx::paccDynamic)) )) {
HXLINE( 109)			Float _hx_switch_0 = ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Vibe",d6,5b,28,39),::hx::paccDynamic)) );
            			if (  (_hx_switch_0==((Float)0.8)) ){
HXLINE( 112)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 112)				::String library = null();
HXDLIN( 112)				_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + ((HX_("dialogueMusic/",22,43,27,2e) + this->curMusic) + HX_("_HIFI",63,1a,e0,e2))) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),0,null(),null());
HXDLIN( 112)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==((Float)1.2)) ){
HXLINE( 114)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 114)				::String library = null();
HXDLIN( 114)				_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + ((HX_("dialogueMusic/",22,43,27,2e) + this->curMusic) + HX_("_LOFI",65,82,89,e5))) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),0,null(),null());
HXDLIN( 114)				goto _hx_goto_0;
            			}
            			/* default */{
HXLINE( 116)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 116)				::String library = null();
HXDLIN( 116)				_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + (HX_("dialogueMusic/",22,43,27,2e) + this->curMusic)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),0,null(),null());
            			}
            			_hx_goto_0:;
            		}
            		else {
HXLINE( 120)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 120)			::String library = null();
HXDLIN( 120)			_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + (HX_("dialogueMusic/",22,43,27,2e) + this->curMusic)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),0,null(),null());
            		}
HXLINE( 122)		{
HXLINE( 122)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 122)			Float To = ((((Float)0.8) * ( (Float)(::Std_obj::parseInt(this->curVolume)) )) / ( (Float)(100) ));
HXDLIN( 122)			Float To1 = ((To * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) )) / ( (Float)(100) ));
HXDLIN( 122)			 ::Dynamic onComplete = null();
HXDLIN( 122)			if (::hx::IsNull( _this->_channel )) {
HXLINE( 122)				_this->play(null(),null(),null());
            			}
HXDLIN( 122)			if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 122)				_this->fadeTween->cancel();
            			}
HXDLIN( 122)			_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),To1,1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            		}
HXLINE( 124)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,-200,null());
HXDLIN( 124)		int _hx_tmp1 = ::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)1.3)));
HXDLIN( 124)		int _hx_tmp2 = ::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)1.3)));
HXDLIN( 124)		int Red = this->bgRED;
HXDLIN( 124)		int Green = this->bgGREEN;
HXDLIN( 124)		int Blue = this->bgBLUE;
HXDLIN( 124)		int Alpha = this->bgALPHA;
HXDLIN( 124)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 124)		{
HXLINE( 124)			color = (color & -16711681);
HXDLIN( 124)			int color1;
HXDLIN( 124)			if ((Red > 255)) {
HXLINE( 124)				color1 = 255;
            			}
            			else {
HXLINE( 124)				if ((Red < 0)) {
HXLINE( 124)					color1 = 0;
            				}
            				else {
HXLINE( 124)					color1 = Red;
            				}
            			}
HXDLIN( 124)			color = (color | (color1 << 16));
            		}
HXDLIN( 124)		{
HXLINE( 124)			color = (color & -65281);
HXDLIN( 124)			int color2;
HXDLIN( 124)			if ((Green > 255)) {
HXLINE( 124)				color2 = 255;
            			}
            			else {
HXLINE( 124)				if ((Green < 0)) {
HXLINE( 124)					color2 = 0;
            				}
            				else {
HXLINE( 124)					color2 = Green;
            				}
            			}
HXDLIN( 124)			color = (color | (color2 << 8));
            		}
HXDLIN( 124)		{
HXLINE( 124)			color = (color & -256);
HXDLIN( 124)			int color3;
HXDLIN( 124)			if ((Blue > 255)) {
HXLINE( 124)				color3 = 255;
            			}
            			else {
HXLINE( 124)				if ((Blue < 0)) {
HXLINE( 124)					color3 = 0;
            				}
            				else {
HXLINE( 124)					color3 = Blue;
            				}
            			}
HXDLIN( 124)			color = (color | color3);
            		}
HXDLIN( 124)		{
HXLINE( 124)			color = (color & 16777215);
HXDLIN( 124)			int color4;
HXDLIN( 124)			if ((Alpha > 255)) {
HXLINE( 124)				color4 = 255;
            			}
            			else {
HXLINE( 124)				if ((Alpha < 0)) {
HXLINE( 124)					color4 = 0;
            				}
            				else {
HXLINE( 124)					color4 = Alpha;
            				}
            			}
HXDLIN( 124)			color = (color | (color4 << 24));
            		}
HXDLIN( 124)		this->bgFade = _hx_tmp->makeGraphic(_hx_tmp1,_hx_tmp2,color,null(),null());
HXLINE( 125)		this->bgFade->scrollFactor->set(null(),null());
HXLINE( 126)		this->bgFade->set_alpha(( (Float)(0) ));
HXLINE( 127)		this->add(this->bgFade);
HXLINE( 129)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(this->bgFIT, ::Dynamic(new _hx_Closure_0(_gthis)),this->bgFIL);
HXLINE( 136)		if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
HXLINE( 139)			 ::flixel::FlxSprite face =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,320,170,null());
HXDLIN( 139)			::String library = null();
HXDLIN( 139)			 ::flixel::FlxSprite face1 = face->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/spiritFaceForward",93,1c,29,2a)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 140)			face1->setGraphicSize(::Std_obj::_hx_int((face1->get_width() * ( (Float)(6) ))),null());
HXLINE( 141)			this->add(face1);
            		}
HXLINE( 144)		this->portrait =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-20,40,null());
HXLINE( 145)		 ::flixel::FlxSprite _hx_tmp3 = this->portrait;
HXDLIN( 145)		::String key = (HX_("portraits/",77,d2,be,9b) + this->curCharacter);
HXDLIN( 145)		::String library = null();
HXDLIN( 145)		::String _hx_tmp4 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 145)		_hx_tmp3->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp4,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 146)		this->portrait->animation->addByPrefix(HX_("neutral",47,ed,29,eb),HX_("neutral",47,ed,29,eb),24,false,null(),null());
HXLINE( 147)		 ::flixel::FlxSprite _hx_tmp5 = this->portrait;
HXDLIN( 147)		Float _hx_tmp6 = this->portrait->get_width();
HXDLIN( 147)		_hx_tmp5->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp6 * ::PlayState_obj::daPixelZoom) * ((Float)0.9))),null());
HXLINE( 148)		this->portrait->updateHitbox();
HXLINE( 149)		this->portrait->scale->set(this->charScale,this->charScale);
HXLINE( 150)		this->portrait->updateHitbox();
HXLINE( 151)		this->portrait->scrollFactor->set(null(),null());
HXLINE( 152)		this->add(this->portrait);
HXLINE( 153)		this->portrait->set_visible(false);
HXLINE( 155)		this->box =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-20,45,null());
HXLINE( 156)		 ::flixel::FlxSprite _hx_tmp7 = this->box;
HXDLIN( 156)		::String key1 = (HX_("dialogueBoxes/",0e,e6,1d,57) + this->curBox);
HXDLIN( 156)		::String library1 = null();
HXDLIN( 156)		::String _hx_tmp8 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key1) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1);
HXDLIN( 156)		_hx_tmp7->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp8,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key1) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library1)));
HXLINE( 157)		this->box->animation->addByPrefix(HX_("open",ca,03,b4,49),HX_("open",ca,03,b4,49),24,false,null(),null());
HXLINE( 158)		this->box->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("normal",27,72,69,30),24,true,null(),null());
HXLINE( 159)		this->box->animation->play(HX_("open",ca,03,b4,49),null(),null(),null());
HXLINE( 160)		 ::flixel::FlxSprite _hx_tmp9 = this->box;
HXDLIN( 160)		_hx_tmp9->setGraphicSize(::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.9))),null());
HXLINE( 161)		this->box->updateHitbox();
HXLINE( 162)		this->add(this->box);
HXLINE( 164)		if (( (bool)(::DialogueBox_obj::_dialogue->__Field(HX_("canFlip",dd,fa,15,62),::hx::paccDynamic)) )) {
HXLINE( 165)			this->box->set_flipX(this->portrait->flipX);
            		}
HXLINE( 167)		this->box->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 168)		 ::flixel::FlxSprite _hx_tmp10 = this->box;
HXDLIN( 168)		_hx_tmp10->set_y((( (Float)(710) ) - this->box->get_height()));
HXLINE( 170)		if (::hx::IsNotNull( this->curBox )) {
HXLINE( 172)			::String library = null();
HXDLIN( 172)			::String data = ::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (HX_("dialogueBoxes/",0e,e6,1d,57) + this->curBox)) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 173)			::DialogueBox_obj::_dialogue =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
            		}
HXLINE( 176)		{
HXLINE( 176)			 ::flixel::FlxSprite _g = this->box;
HXDLIN( 176)			_g->set_y(( (Float)((_g->y + ::DialogueBox_obj::_dialogue->__Field(HX_("addY",18,eb,69,40),::hx::paccDynamic))) ));
            		}
HXLINE( 178)		this->portrait->screenCenter(::flixel::util::FlxAxes_obj::Y_dyn());
HXLINE( 180)		 ::flixel::FlxSprite _hx_tmp11 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1240,680,null());
HXDLIN( 180)		::String library2 = null();
HXDLIN( 180)		this->handSelect = _hx_tmp11->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("dialogueHands/",c3,0c,09,a7) + this->handSprite)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE( 181)		this->handSelect->setGraphicSize(100,null());
HXLINE( 182)		this->handSelect->updateHitbox();
HXLINE( 183)		{
HXLINE( 183)			 ::flixel::FlxSprite _g1 = this->handSelect;
HXDLIN( 183)			Float _g2 = _g1->x;
HXDLIN( 183)			_g1->set_x((_g2 - this->handSelect->get_width()));
            		}
HXLINE( 184)		{
HXLINE( 184)			 ::flixel::FlxSprite _g3 = this->handSelect;
HXDLIN( 184)			Float _g4 = _g3->y;
HXDLIN( 184)			_g3->set_y((_g4 - this->handSelect->get_height()));
            		}
HXLINE( 185)		this->add(this->handSelect);
HXLINE( 187)		int _hx_tmp12 = ::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.6)));
HXDLIN( 187)		this->dropText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,242,482,_hx_tmp12,HX_("",00,00,00,00),::Std_obj::parseInt(this->curFontScale),null());
HXLINE( 188)		this->dropText->set_font(this->curFont);
HXLINE( 189)		 ::flixel::text::FlxText _hx_tmp13 = this->dropText;
HXDLIN( 189)		_hx_tmp13->set_color(( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(this->shadowColor)) ));
HXLINE( 190)		this->add(this->dropText);
HXLINE( 192)		int _hx_tmp14 = ::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.6)));
HXDLIN( 192)		this->swagDialogue =  ::flixel::addons::text::FlxTypeText_obj::__alloc( HX_CTX ,( (Float)(240) ),( (Float)(480) ),_hx_tmp14,HX_("",00,00,00,00),::Std_obj::parseInt(this->curFontScale),null());
HXLINE( 193)		this->swagDialogue->set_font(this->curFont);
HXLINE( 194)		 ::flixel::addons::text::FlxTypeText _hx_tmp15 = this->swagDialogue;
HXDLIN( 194)		_hx_tmp15->set_color(( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(this->dialogueColor)) ));
HXLINE( 195)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp16 = ::flixel::FlxG_obj::sound;
HXDLIN( 195)		::String _hx_tmp17 = ::Paths_obj::sound(this->curSound,null());
HXDLIN( 195)		 ::flixel::_hx_system::FlxSound _hx_tmp18 = _hx_tmp16->load(_hx_tmp17,((((Float)0.6) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null(),null(),null());
HXDLIN( 195)		this->swagDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp18);
HXLINE( 196)		this->add(this->swagDialogue);
HXLINE( 198)		this->dialogue =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(80) ),HX_("",00,00,00,00),false,true);
            	}

Dynamic DialogueBox_obj::__CreateEmpty() { return new DialogueBox_obj; }

void *DialogueBox_obj::_hx_vtable = 0;

Dynamic DialogueBox_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DialogueBox_obj > _hx_result = new DialogueBox_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool DialogueBox_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x288ce903) {
			if (inClassId<=(int)0x04b35cb7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x04b35cb7;
			} else {
				return inClassId==(int)0x288ce903;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void DialogueBox_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_207_update)
HXLINE( 206)		 ::DialogueBox _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 209)		if (this->dialogueStarted) {
HXLINE( 211)			 ::flixel::_hx_system::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN( 211)			Float a = ::flixel::FlxG_obj::sound->music->_volume;
HXDLIN( 211)			Float b = ((((Float)0.8) * ( (Float)(::Std_obj::parseInt(this->curVolume)) )) / ( (Float)(100) ));
HXDLIN( 211)			_hx_tmp->set_volume((a + ((this->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((b * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) )) / ( (Float)(100) )) - a))));
HXLINE( 212)			if ((this->curFlip == HX_("true",4e,a7,03,4d))) {
HXLINE( 213)				 ::flixel::FlxSprite _hx_tmp = this->portrait;
HXDLIN( 213)				Float a = this->portrait->x;
HXDLIN( 213)				Float b = (( (Float)(580) ) - this->portrait->get_width());
HXDLIN( 213)				_hx_tmp->set_x((a + (((this->camLerp * ( (Float)(2) )) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b - a))));
            			}
            			else {
HXLINE( 215)				Float a = this->portrait->x;
HXDLIN( 215)				this->portrait->set_x((a + (((this->camLerp * ( (Float)(2) )) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(700) ) - a))));
            			}
            		}
HXLINE( 218)		this->dropText->set_text(this->swagDialogue->text);
HXLINE( 220)		if (::hx::IsNotNull( this->box->animation->_curAnim )) {
HXLINE( 222)			bool _hx_tmp;
HXDLIN( 222)			if ((this->box->animation->_curAnim->name == HX_("open",ca,03,b4,49))) {
HXLINE( 222)				_hx_tmp = this->box->animation->_curAnim->finished;
            			}
            			else {
HXLINE( 222)				_hx_tmp = false;
            			}
HXDLIN( 222)			if (_hx_tmp) {
HXLINE( 224)				this->box->animation->play(HX_("normal",27,72,69,30),null(),null(),null());
HXLINE( 225)				this->dialogueOpened = true;
            			}
            		}
HXLINE( 229)		bool _hx_tmp;
HXDLIN( 229)		if (this->dialogueOpened) {
HXLINE( 229)			_hx_tmp = !(this->dialogueStarted);
            		}
            		else {
HXLINE( 229)			_hx_tmp = false;
            		}
HXDLIN( 229)		if (_hx_tmp) {
HXLINE( 231)			this->startDialogue();
HXLINE( 232)			this->dialogueStarted = true;
            		}
HXLINE( 235)		bool _hx_tmp1;
HXDLIN( 235)		if (( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY()) {
HXLINE( 235)			_hx_tmp1 = (this->dialogueStarted == true);
            		}
            		else {
HXLINE( 235)			_hx_tmp1 = false;
            		}
HXDLIN( 235)		if (_hx_tmp1) {
HXLINE( 237)			this->remove(this->dialogue,null());
HXLINE( 239)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 239)			::String _hx_tmp1 = ::Paths_obj::sound((HX_("dialogueClicks/",6c,d0,33,35) + this->clickSound),null());
HXDLIN( 239)			_hx_tmp->play(_hx_tmp1,((((Float)0.8) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 241)			bool _hx_tmp2;
HXDLIN( 241)			if (::hx::IsNull( this->dialogueList->__get(1) )) {
HXLINE( 241)				_hx_tmp2 = ::hx::IsNotNull( this->dialogueList->__get(0) );
            			}
            			else {
HXLINE( 241)				_hx_tmp2 = false;
            			}
HXDLIN( 241)			if (_hx_tmp2) {
HXLINE( 243)				if (!(this->isEnding)) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::DialogueBox,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_250_update)
HXLINE( 251)						{
HXLINE( 251)							 ::flixel::FlxSprite _g = _gthis->box;
HXDLIN( 251)							_g->set_alpha((_g->alpha - (( (Float)(1) ) / ( (Float)(_gthis->fadeOutLoop) ))));
            						}
HXLINE( 252)						{
HXLINE( 252)							 ::flixel::FlxSprite _g1 = _gthis->bgFade;
HXDLIN( 252)							_g1->set_alpha((_g1->alpha - ((( (Float)(1) ) / ( (Float)(_gthis->fadeOutLoop) )) * ((Float)0.7))));
            						}
HXLINE( 253)						_gthis->portrait->set_visible(false);
HXLINE( 254)						{
HXLINE( 254)							 ::flixel::addons::text::FlxTypeText _g2 = _gthis->swagDialogue;
HXDLIN( 254)							_g2->set_alpha((_g2->alpha - (( (Float)(1) ) / ( (Float)(_gthis->fadeOutLoop) ))));
            						}
HXLINE( 255)						{
HXLINE( 255)							 ::flixel::FlxSprite _g3 = _gthis->handSelect;
HXDLIN( 255)							_g3->set_alpha((_g3->alpha - (( (Float)(1) ) / ( (Float)(_gthis->fadeOutLoop) ))));
            						}
HXLINE( 256)						_gthis->dropText->set_alpha(_gthis->swagDialogue->alpha);
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::DialogueBox,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_260_update)
HXLINE( 261)						_gthis->finishThing();
HXLINE( 262)						_gthis->kill();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 245)					this->isEnding = true;
HXLINE( 247)					{
HXLINE( 247)						 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 247)						 ::Dynamic To = 0;
HXDLIN( 247)						 ::Dynamic onComplete = null();
HXDLIN( 247)						if (::hx::IsNull( To )) {
HXLINE( 247)							To = 0;
            						}
HXDLIN( 247)						if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 247)							_this->fadeTween->cancel();
            						}
HXDLIN( 247)						_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),((Float)2.2), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            					}
HXLINE( 249)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(this->fadeOutTime, ::Dynamic(new _hx_Closure_0(_gthis)),this->fadeOutLoop);
HXLINE( 259)					 ::flixel::util::FlxTimer _hx_tmp =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN( 259)					_hx_tmp->start((this->fadeOutTime * ( (Float)((this->fadeOutLoop + 1)) )), ::Dynamic(new _hx_Closure_1(_gthis)),null());
            				}
            			}
            			else {
HXLINE( 268)				this->dialogueList->remove(this->dialogueList->__get(0));
HXLINE( 269)				this->startDialogue();
            			}
            		}
HXLINE( 273)		this->super::update(elapsed);
            	}


void DialogueBox_obj::setUp(){
            	HX_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_280_setUp)
HXLINE( 281)		this->splitData = this->dialogueList->__get(0).split(HX_("[",5b,00,00,00));
HXLINE( 282)		this->bgALPHA = ( (int)(::Std_obj::parseInt(this->splitData->__get(1))) );
HXLINE( 283)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 285)		this->splitData = this->dialogueList->__get(0).split(HX_("[",5b,00,00,00));
HXLINE( 286)		this->bgRED = ( (int)(::Std_obj::parseInt(this->splitData->__get(1))) );
HXLINE( 287)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 289)		this->splitData = this->dialogueList->__get(0).split(HX_("[",5b,00,00,00));
HXLINE( 290)		this->bgGREEN = ( (int)(::Std_obj::parseInt(this->splitData->__get(1))) );
HXLINE( 291)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 293)		this->splitData = this->dialogueList->__get(0).split(HX_("[",5b,00,00,00));
HXLINE( 294)		this->bgBLUE = ( (int)(::Std_obj::parseInt(this->splitData->__get(1))) );
HXLINE( 295)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 297)		this->splitData = this->dialogueList->__get(0).split(HX_("|",7c,00,00,00));
HXLINE( 298)		this->curMusic = this->splitData->__get(1);
HXLINE( 299)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 301)		this->splitData = this->dialogueList->__get(0).split(HX_("*",2a,00,00,00));
HXLINE( 302)		this->curVolume = this->splitData->__get(1);
HXLINE( 303)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 305)		this->splitData = this->dialogueList->__get(0).split(HX_("=",3d,00,00,00));
HXLINE( 306)		this->charScale = ::Std_obj::parseFloat(this->splitData->__get(1));
HXLINE( 307)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 309)		this->splitData = this->dialogueList->__get(0).split(HX_("#",23,00,00,00));
HXLINE( 310)		this->curBox = this->splitData->__get(1);
HXLINE( 311)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 313)		this->splitData = this->dialogueList->__get(0).split(HX_("<",3c,00,00,00));
HXLINE( 314)		this->fadeInTime = ::Std_obj::parseFloat(this->splitData->__get(1));
HXLINE( 315)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 317)		this->splitData = this->dialogueList->__get(0).split(HX_(">",3e,00,00,00));
HXLINE( 318)		this->fadeInLoop = ( (int)(::Std_obj::parseInt(this->splitData->__get(1))) );
HXLINE( 319)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 321)		this->splitData = this->dialogueList->__get(0).split(HX_("(",28,00,00,00));
HXLINE( 322)		this->fadeOutTime = ::Std_obj::parseFloat(this->splitData->__get(1));
HXLINE( 323)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 325)		this->splitData = this->dialogueList->__get(0).split(HX_(")",29,00,00,00));
HXLINE( 326)		this->fadeOutLoop = ( (int)(::Std_obj::parseInt(this->splitData->__get(1))) );
HXLINE( 327)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 329)		this->splitData = this->dialogueList->__get(0).split(HX_("{",7b,00,00,00));
HXLINE( 330)		this->bgFIT = ::Std_obj::parseFloat(this->splitData->__get(1));
HXLINE( 331)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 333)		this->splitData = this->dialogueList->__get(0).split(HX_("}",7d,00,00,00));
HXLINE( 334)		this->bgFIL = ( (int)(::Std_obj::parseInt(this->splitData->__get(1))) );
HXLINE( 335)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 337)		this->splitData = this->dialogueList->__get(0).split(HX_("`",60,00,00,00));
HXLINE( 338)		this->handSprite = this->splitData->__get(1);
HXLINE( 339)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 341)		this->splitData = this->dialogueList->__get(0).split(HX_("~",7e,00,00,00));
HXLINE( 342)		this->clickSound = this->splitData->__get(1);
HXLINE( 343)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 345)		this->dialogueList->remove(this->dialogueList->__get(0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueBox_obj,setUp,(void))

void DialogueBox_obj::startDialogue(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::DialogueBox,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_360_startDialogue)
HXLINE( 360)			 ::flixel::_hx_system::frontEnds::CameraFrontEnd _hx_tmp = ::flixel::FlxG_obj::cameras;
HXDLIN( 360)			Float _hx_tmp1 = ::Std_obj::parseFloat(_gthis->curShake);
HXDLIN( 360)			 ::Dynamic _hx_tmp2 = ::Std_obj::parseInt(_gthis->curShakeTime);
HXDLIN( 360)			_hx_tmp->shake(_hx_tmp1,(( (Float)(_hx_tmp2) ) * ::Std_obj::parseFloat(_gthis->curSpeed)),null(),null(),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::DialogueBox,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_364_startDialogue)
HXLINE( 365)			 ::flixel::_hx_system::frontEnds::CameraFrontEnd _hx_tmp = ::flixel::FlxG_obj::cameras;
HXDLIN( 365)			 ::Dynamic _hx_tmp1 = ::Std_obj::parseInt(_gthis->curFlashTime);
HXDLIN( 365)			_hx_tmp->flash(-1,(( (Float)(_hx_tmp1) ) * ::Std_obj::parseFloat(_gthis->curSpeed)),null(),null());
HXLINE( 366)			if (::hx::IsGreater( ::Std_obj::parseInt(_gthis->curFlashTime),0 )) {
HXLINE( 368)				::String _hx_switch_0 = ::PlayState_obj::curStage;
            				if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ||  (_hx_switch_0==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 371)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 371)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("shocker-pixel",c8,94,89,49),null());
HXDLIN( 371)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXDLIN( 371)					goto _hx_goto_7;
            				}
            				/* default */{
HXLINE( 373)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 373)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("shocker",4f,ec,7d,6e),null());
HXDLIN( 373)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
            				}
            				_hx_goto_7:;
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_349_startDialogue)
HXLINE( 348)		 ::DialogueBox _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 350)		this->cleanDialog();
HXLINE( 356)		this->swagDialogue->resetText(this->dialogueList->__get(0));
HXLINE( 358)		 ::flixel::util::FlxTimer _hx_tmp =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN( 358)		 ::Dynamic _hx_tmp1 = ::Std_obj::parseInt(this->curShakeDelay);
HXDLIN( 358)		_hx_tmp->start((( (Float)(_hx_tmp1) ) * ::Std_obj::parseFloat(this->curSpeed)), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 363)		 ::flixel::util::FlxTimer _hx_tmp2 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN( 363)		 ::Dynamic _hx_tmp3 = ::Std_obj::parseInt(this->curFlashDelay);
HXDLIN( 363)		_hx_tmp2->start((( (Float)(_hx_tmp3) ) * ::Std_obj::parseFloat(this->curSpeed)), ::Dynamic(new _hx_Closure_1(_gthis)),null());
HXLINE( 378)		 ::flixel::FlxSprite _hx_tmp4 = this->portrait;
HXDLIN( 378)		::String key = (HX_("portraits/",77,d2,be,9b) + this->curCharacter);
HXDLIN( 378)		::String library = null();
HXDLIN( 378)		::String _hx_tmp5 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 378)		_hx_tmp4->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp5,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 379)		this->portrait->set_visible(true);
HXLINE( 381)		if ((this->portrait->get_width() < 256)) {
HXLINE( 383)			 ::flixel::FlxSprite _hx_tmp = this->portrait;
HXDLIN( 383)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->portrait->get_width() * ( (Float)(6) ))),null());
HXLINE( 384)			this->portrait->set_antialiasing(false);
            		}
            		else {
HXLINE( 387)			this->portrait->set_antialiasing(true);
            		}
HXLINE( 389)		this->portrait->updateHitbox();
HXLINE( 391)		if ((this->curFlip == HX_("true",4e,a7,03,4d))) {
HXLINE( 392)			this->portrait->set_flipX(true);
            		}
            		else {
HXLINE( 394)			this->portrait->set_flipX(false);
            		}
HXLINE( 396)		if ((this->curCharacter != this->oldCharacter)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::DialogueBox,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_402_startDialogue)
HXLINE( 402)				 ::flixel::FlxSprite _g = _gthis->portrait;
HXDLIN( 402)				_g->set_alpha((_g->alpha + (( (Float)(1) ) / ( (Float)(_gthis->fadeInLoop) ))));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 398)			this->portrait->set_alpha(( (Float)(0) ));
HXLINE( 400)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(this->fadeInTime, ::Dynamic(new _hx_Closure_2(_gthis)),this->fadeInLoop);
HXLINE( 405)			if ((this->curFlip == HX_("true",4e,a7,03,4d))) {
HXLINE( 406)				 ::flixel::FlxSprite _hx_tmp = this->portrait;
HXDLIN( 406)				_hx_tmp->set_x((( (Float)(280) ) - this->portrait->get_width()));
            			}
            			else {
HXLINE( 408)				this->portrait->set_x(( (Float)(1000) ));
            			}
HXLINE( 410)			 ::flixel::FlxSprite _hx_tmp = this->portrait;
HXDLIN( 410)			_hx_tmp->set_y((( (Float)(441) ) - this->portrait->get_height()));
            		}
HXLINE( 413)		if ((this->curBox != this->oldBox)) {
HXLINE( 415)			this->remove(this->box,null());
HXLINE( 416)			this->box =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-20,45,null());
HXLINE( 418)			 ::flixel::FlxSprite _hx_tmp = this->box;
HXDLIN( 418)			::String key = (HX_("dialogueBoxes/",0e,e6,1d,57) + this->curBox);
HXDLIN( 418)			::String library = null();
HXDLIN( 418)			::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 418)			_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 419)			this->box->animation->addByPrefix(HX_("open",ca,03,b4,49),HX_("open",ca,03,b4,49),24,false,null(),null());
HXLINE( 420)			this->box->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("normal",27,72,69,30),24,true,null(),null());
HXLINE( 422)			this->dialogueOpened = false;
HXLINE( 423)			this->box->animation->play(HX_("open",ca,03,b4,49),null(),null(),null());
HXLINE( 424)			 ::flixel::FlxSprite _hx_tmp2 = this->box;
HXDLIN( 424)			_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.9))),null());
HXLINE( 425)			this->box->updateHitbox();
HXLINE( 426)			this->add(this->box);
HXLINE( 428)			this->box->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 429)			 ::flixel::FlxSprite _hx_tmp3 = this->box;
HXDLIN( 429)			_hx_tmp3->set_y((( (Float)(710) ) - this->box->get_height()));
HXLINE( 431)			::String library1 = null();
HXDLIN( 431)			::String data = ::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (HX_("dialogueBoxes/",0e,e6,1d,57) + this->curBox)) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library1));
HXLINE( 432)			::DialogueBox_obj::_dialogue =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
HXLINE( 434)			{
HXLINE( 434)				 ::flixel::FlxSprite _g = this->box;
HXDLIN( 434)				_g->set_y(( (Float)((_g->y + ::DialogueBox_obj::_dialogue->__Field(HX_("addY",18,eb,69,40),::hx::paccDynamic))) ));
            			}
            		}
HXLINE( 437)		if (( (bool)(::DialogueBox_obj::_dialogue->__Field(HX_("canFlip",dd,fa,15,62),::hx::paccDynamic)) )) {
HXLINE( 438)			this->box->set_flipX(this->portrait->flipX);
            		}
HXLINE( 440)		this->portrait->animation->addByPrefix(this->curEmotion,this->curEmotion,24,false,null(),null());
HXLINE( 441)		this->portrait->animation->play(this->curEmotion,null(),null(),null());
HXLINE( 443)		 ::flixel::text::FlxText _hx_tmp6 = this->dropText;
HXDLIN( 443)		_hx_tmp6->set_font(this->swagDialogue->set_font(this->curFont));
HXLINE( 444)		 ::flixel::text::FlxText _hx_tmp7 = this->dropText;
HXDLIN( 444)		 ::flixel::addons::text::FlxTypeText _hx_tmp8 = this->swagDialogue;
HXDLIN( 444)		_hx_tmp7->set_size(_hx_tmp8->set_size(( (int)(::Std_obj::parseInt(this->curFontScale)) )));
HXLINE( 446)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp9 = ::flixel::FlxG_obj::sound;
HXDLIN( 446)		::String _hx_tmp10 = ::Paths_obj::sound((HX_("dialogueSounds/",b3,50,ac,f1) + this->curSound),null());
HXDLIN( 446)		 ::flixel::_hx_system::FlxSound _hx_tmp11 = _hx_tmp9->load(_hx_tmp10,((((Float)0.6) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null(),null(),null());
HXDLIN( 446)		this->swagDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp11);
HXLINE( 448)		 ::flixel::text::FlxText _hx_tmp12 = this->dropText;
HXDLIN( 448)		_hx_tmp12->set_color(( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(this->shadowColor)) ));
HXLINE( 449)		 ::flixel::addons::text::FlxTypeText _hx_tmp13 = this->swagDialogue;
HXDLIN( 449)		_hx_tmp13->set_color(( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(this->dialogueColor)) ));
HXLINE( 451)		if ((this->portraitColor != HX_("",00,00,00,00))) {
HXLINE( 452)			 ::flixel::FlxSprite _hx_tmp = this->portrait;
HXDLIN( 452)			_hx_tmp->set_color(( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(this->portraitColor)) ));
            		}
HXLINE( 454)		if ((this->timeCut > 0)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::DialogueBox,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_457_startDialogue)
HXLINE( 458)				_gthis->dialogueList->remove(_gthis->dialogueList->__get(0));
HXLINE( 459)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 459)				::String _hx_tmp1 = ::Paths_obj::sound((HX_("dialogueClicks/",6c,d0,33,35) + _gthis->clickSound),null());
HXDLIN( 459)				_hx_tmp->play(_hx_tmp1,((((Float)0.8) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 460)				_gthis->startDialogue();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 456)			 ::flixel::util::FlxTimer _hx_tmp =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN( 456)			Float _hx_tmp1 = ::Std_obj::parseFloat(this->curSpeed);
HXDLIN( 456)			_hx_tmp->start((_hx_tmp1 * ( (Float)(this->timeCut) )), ::Dynamic(new _hx_Closure_3(_gthis)),1);
            		}
HXLINE( 464)		 ::flixel::addons::text::FlxTypeText _hx_tmp14 = this->swagDialogue;
HXDLIN( 464)		_hx_tmp14->start(::Std_obj::parseFloat(this->curSpeed),true,null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueBox_obj,startDialogue,(void))

void DialogueBox_obj::cleanDialog(){
            	HX_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_468_cleanDialog)
HXLINE( 469)		this->splitData = this->dialogueList->__get(0).split(HX_(":",3a,00,00,00));
HXLINE( 470)		this->oldCharacter = this->curCharacter;
HXLINE( 471)		this->curCharacter = this->splitData->__get(1);
HXLINE( 472)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 474)		this->splitData = this->dialogueList->__get(0).split(HX_("!",21,00,00,00));
HXLINE( 475)		this->curEmotion = this->splitData->__get(1);
HXLINE( 476)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 478)		this->splitData = this->dialogueList->__get(0).split(HX_("[",5b,00,00,00));
HXLINE( 479)		this->curFont = this->splitData->__get(1);
HXLINE( 480)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 482)		this->splitData = this->dialogueList->__get(0).split(HX_("]",5d,00,00,00));
HXLINE( 483)		this->curFontScale = this->splitData->__get(1);
HXLINE( 484)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 486)		this->splitData = this->dialogueList->__get(0).split(HX_("*",2a,00,00,00));
HXLINE( 487)		this->curVolume = this->splitData->__get(1);
HXLINE( 488)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 490)		this->splitData = this->dialogueList->__get(0).split(HX_("=",3d,00,00,00));
HXLINE( 491)		this->curShake = this->splitData->__get(1);
HXLINE( 492)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 494)		this->splitData = this->dialogueList->__get(0).split(HX_("+",2b,00,00,00));
HXLINE( 495)		this->curShakeTime = this->splitData->__get(1);
HXLINE( 496)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 498)		this->splitData = this->dialogueList->__get(0).split(HX_("-",2d,00,00,00));
HXLINE( 499)		this->curShakeDelay = this->splitData->__get(1);
HXLINE( 500)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 502)		this->splitData = this->dialogueList->__get(0).split(HX_("<",3c,00,00,00));
HXLINE( 503)		this->curFlashTime = this->splitData->__get(1);
HXLINE( 504)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 506)		this->splitData = this->dialogueList->__get(0).split(HX_(">",3e,00,00,00));
HXLINE( 507)		this->curFlashDelay = this->splitData->__get(1);
HXLINE( 508)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 510)		this->splitData = this->dialogueList->__get(0).split(HX_(";",3b,00,00,00));
HXLINE( 511)		this->curSpeed = this->splitData->__get(1);
HXLINE( 512)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 514)		this->splitData = this->dialogueList->__get(0).split(HX_("|",7c,00,00,00));
HXLINE( 515)		this->curFlip = this->splitData->__get(1);
HXLINE( 516)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 518)		this->splitData = this->dialogueList->__get(0).split(HX_("#",23,00,00,00));
HXLINE( 519)		this->oldBox = this->curBox;
HXLINE( 520)		this->curBox = this->splitData->__get(1);
HXLINE( 521)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 523)		this->splitData = this->dialogueList->__get(0).split(HX_("^",5e,00,00,00));
HXLINE( 524)		this->curSound = this->splitData->__get(1);
HXLINE( 525)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 527)		this->splitData = this->dialogueList->__get(0).split(HX_("!",21,00,00,00));
HXLINE( 528)		this->dialogueColor = this->splitData->__get(1);
HXLINE( 529)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 531)		this->splitData = this->dialogueList->__get(0).split(HX_("?",3f,00,00,00));
HXLINE( 532)		this->shadowColor = this->splitData->__get(1);
HXLINE( 533)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 535)		this->splitData = this->dialogueList->__get(0).split(HX_(".",2e,00,00,00));
HXLINE( 536)		this->portraitColor = this->splitData->__get(1);
HXLINE( 537)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
HXLINE( 539)		this->splitData = this->dialogueList->__get(0).split(HX_("~",7e,00,00,00));
HXLINE( 540)		this->timeCut = ( (int)(::Std_obj::parseInt(this->splitData->__get(1))) );
HXLINE( 541)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((this->splitData->__get(1).length + 2),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueBox_obj,cleanDialog,(void))

 ::Dynamic DialogueBox_obj::_dialogue;


::hx::ObjectPtr< DialogueBox_obj > DialogueBox_obj::__new(::hx::Null< bool >  __o_talkingRight,::Array< ::String > dialogueList) {
	::hx::ObjectPtr< DialogueBox_obj > __this = new DialogueBox_obj();
	__this->__construct(__o_talkingRight,dialogueList);
	return __this;
}

::hx::ObjectPtr< DialogueBox_obj > DialogueBox_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< bool >  __o_talkingRight,::Array< ::String > dialogueList) {
	DialogueBox_obj *__this = (DialogueBox_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DialogueBox_obj), true, "DialogueBox"));
	*(void **)__this = DialogueBox_obj::_hx_vtable;
	__this->__construct(__o_talkingRight,dialogueList);
	return __this;
}

DialogueBox_obj::DialogueBox_obj()
{
}

void DialogueBox_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DialogueBox);
	HX_MARK_MEMBER_NAME(box,"box");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(bgALPHA,"bgALPHA");
	HX_MARK_MEMBER_NAME(bgRED,"bgRED");
	HX_MARK_MEMBER_NAME(bgGREEN,"bgGREEN");
	HX_MARK_MEMBER_NAME(bgBLUE,"bgBLUE");
	HX_MARK_MEMBER_NAME(curMusic,"curMusic");
	HX_MARK_MEMBER_NAME(charScale,"charScale");
	HX_MARK_MEMBER_NAME(dialogueColor,"dialogueColor");
	HX_MARK_MEMBER_NAME(shadowColor,"shadowColor");
	HX_MARK_MEMBER_NAME(portraitColor,"portraitColor");
	HX_MARK_MEMBER_NAME(fadeInTime,"fadeInTime");
	HX_MARK_MEMBER_NAME(fadeInLoop,"fadeInLoop");
	HX_MARK_MEMBER_NAME(fadeOutTime,"fadeOutTime");
	HX_MARK_MEMBER_NAME(fadeOutLoop,"fadeOutLoop");
	HX_MARK_MEMBER_NAME(bgFIT,"bgFIT");
	HX_MARK_MEMBER_NAME(bgFIL,"bgFIL");
	HX_MARK_MEMBER_NAME(handSprite,"handSprite");
	HX_MARK_MEMBER_NAME(clickSound,"clickSound");
	HX_MARK_MEMBER_NAME(curCharacter,"curCharacter");
	HX_MARK_MEMBER_NAME(oldCharacter,"oldCharacter");
	HX_MARK_MEMBER_NAME(curVolume,"curVolume");
	HX_MARK_MEMBER_NAME(curEmotion,"curEmotion");
	HX_MARK_MEMBER_NAME(curShake,"curShake");
	HX_MARK_MEMBER_NAME(curShakeTime,"curShakeTime");
	HX_MARK_MEMBER_NAME(curShakeDelay,"curShakeDelay");
	HX_MARK_MEMBER_NAME(curFlashTime,"curFlashTime");
	HX_MARK_MEMBER_NAME(curFlashDelay,"curFlashDelay");
	HX_MARK_MEMBER_NAME(curSpeed,"curSpeed");
	HX_MARK_MEMBER_NAME(curFlip,"curFlip");
	HX_MARK_MEMBER_NAME(curFont,"curFont");
	HX_MARK_MEMBER_NAME(curFontScale,"curFontScale");
	HX_MARK_MEMBER_NAME(curBox,"curBox");
	HX_MARK_MEMBER_NAME(oldBox,"oldBox");
	HX_MARK_MEMBER_NAME(curSound,"curSound");
	HX_MARK_MEMBER_NAME(timeCut,"timeCut");
	HX_MARK_MEMBER_NAME(dialogue,"dialogue");
	HX_MARK_MEMBER_NAME(dialogueList,"dialogueList");
	HX_MARK_MEMBER_NAME(swagDialogue,"swagDialogue");
	HX_MARK_MEMBER_NAME(dropText,"dropText");
	HX_MARK_MEMBER_NAME(finishThing,"finishThing");
	HX_MARK_MEMBER_NAME(portrait,"portrait");
	HX_MARK_MEMBER_NAME(handSelect,"handSelect");
	HX_MARK_MEMBER_NAME(bgFade,"bgFade");
	HX_MARK_MEMBER_NAME(dialogueOpened,"dialogueOpened");
	HX_MARK_MEMBER_NAME(dialogueStarted,"dialogueStarted");
	HX_MARK_MEMBER_NAME(isEnding,"isEnding");
	HX_MARK_MEMBER_NAME(splitData,"splitData");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DialogueBox_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(box,"box");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(bgALPHA,"bgALPHA");
	HX_VISIT_MEMBER_NAME(bgRED,"bgRED");
	HX_VISIT_MEMBER_NAME(bgGREEN,"bgGREEN");
	HX_VISIT_MEMBER_NAME(bgBLUE,"bgBLUE");
	HX_VISIT_MEMBER_NAME(curMusic,"curMusic");
	HX_VISIT_MEMBER_NAME(charScale,"charScale");
	HX_VISIT_MEMBER_NAME(dialogueColor,"dialogueColor");
	HX_VISIT_MEMBER_NAME(shadowColor,"shadowColor");
	HX_VISIT_MEMBER_NAME(portraitColor,"portraitColor");
	HX_VISIT_MEMBER_NAME(fadeInTime,"fadeInTime");
	HX_VISIT_MEMBER_NAME(fadeInLoop,"fadeInLoop");
	HX_VISIT_MEMBER_NAME(fadeOutTime,"fadeOutTime");
	HX_VISIT_MEMBER_NAME(fadeOutLoop,"fadeOutLoop");
	HX_VISIT_MEMBER_NAME(bgFIT,"bgFIT");
	HX_VISIT_MEMBER_NAME(bgFIL,"bgFIL");
	HX_VISIT_MEMBER_NAME(handSprite,"handSprite");
	HX_VISIT_MEMBER_NAME(clickSound,"clickSound");
	HX_VISIT_MEMBER_NAME(curCharacter,"curCharacter");
	HX_VISIT_MEMBER_NAME(oldCharacter,"oldCharacter");
	HX_VISIT_MEMBER_NAME(curVolume,"curVolume");
	HX_VISIT_MEMBER_NAME(curEmotion,"curEmotion");
	HX_VISIT_MEMBER_NAME(curShake,"curShake");
	HX_VISIT_MEMBER_NAME(curShakeTime,"curShakeTime");
	HX_VISIT_MEMBER_NAME(curShakeDelay,"curShakeDelay");
	HX_VISIT_MEMBER_NAME(curFlashTime,"curFlashTime");
	HX_VISIT_MEMBER_NAME(curFlashDelay,"curFlashDelay");
	HX_VISIT_MEMBER_NAME(curSpeed,"curSpeed");
	HX_VISIT_MEMBER_NAME(curFlip,"curFlip");
	HX_VISIT_MEMBER_NAME(curFont,"curFont");
	HX_VISIT_MEMBER_NAME(curFontScale,"curFontScale");
	HX_VISIT_MEMBER_NAME(curBox,"curBox");
	HX_VISIT_MEMBER_NAME(oldBox,"oldBox");
	HX_VISIT_MEMBER_NAME(curSound,"curSound");
	HX_VISIT_MEMBER_NAME(timeCut,"timeCut");
	HX_VISIT_MEMBER_NAME(dialogue,"dialogue");
	HX_VISIT_MEMBER_NAME(dialogueList,"dialogueList");
	HX_VISIT_MEMBER_NAME(swagDialogue,"swagDialogue");
	HX_VISIT_MEMBER_NAME(dropText,"dropText");
	HX_VISIT_MEMBER_NAME(finishThing,"finishThing");
	HX_VISIT_MEMBER_NAME(portrait,"portrait");
	HX_VISIT_MEMBER_NAME(handSelect,"handSelect");
	HX_VISIT_MEMBER_NAME(bgFade,"bgFade");
	HX_VISIT_MEMBER_NAME(dialogueOpened,"dialogueOpened");
	HX_VISIT_MEMBER_NAME(dialogueStarted,"dialogueStarted");
	HX_VISIT_MEMBER_NAME(isEnding,"isEnding");
	HX_VISIT_MEMBER_NAME(splitData,"splitData");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DialogueBox_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { return ::hx::Val( box ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"bgRED") ) { return ::hx::Val( bgRED ); }
		if (HX_FIELD_EQ(inName,"bgFIT") ) { return ::hx::Val( bgFIT ); }
		if (HX_FIELD_EQ(inName,"bgFIL") ) { return ::hx::Val( bgFIL ); }
		if (HX_FIELD_EQ(inName,"setUp") ) { return ::hx::Val( setUp_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bgBLUE") ) { return ::hx::Val( bgBLUE ); }
		if (HX_FIELD_EQ(inName,"curBox") ) { return ::hx::Val( curBox ); }
		if (HX_FIELD_EQ(inName,"oldBox") ) { return ::hx::Val( oldBox ); }
		if (HX_FIELD_EQ(inName,"bgFade") ) { return ::hx::Val( bgFade ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		if (HX_FIELD_EQ(inName,"bgALPHA") ) { return ::hx::Val( bgALPHA ); }
		if (HX_FIELD_EQ(inName,"bgGREEN") ) { return ::hx::Val( bgGREEN ); }
		if (HX_FIELD_EQ(inName,"curFlip") ) { return ::hx::Val( curFlip ); }
		if (HX_FIELD_EQ(inName,"curFont") ) { return ::hx::Val( curFont ); }
		if (HX_FIELD_EQ(inName,"timeCut") ) { return ::hx::Val( timeCut ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curMusic") ) { return ::hx::Val( curMusic ); }
		if (HX_FIELD_EQ(inName,"curShake") ) { return ::hx::Val( curShake ); }
		if (HX_FIELD_EQ(inName,"curSpeed") ) { return ::hx::Val( curSpeed ); }
		if (HX_FIELD_EQ(inName,"curSound") ) { return ::hx::Val( curSound ); }
		if (HX_FIELD_EQ(inName,"dialogue") ) { return ::hx::Val( dialogue ); }
		if (HX_FIELD_EQ(inName,"dropText") ) { return ::hx::Val( dropText ); }
		if (HX_FIELD_EQ(inName,"portrait") ) { return ::hx::Val( portrait ); }
		if (HX_FIELD_EQ(inName,"isEnding") ) { return ::hx::Val( isEnding ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"charScale") ) { return ::hx::Val( charScale ); }
		if (HX_FIELD_EQ(inName,"curVolume") ) { return ::hx::Val( curVolume ); }
		if (HX_FIELD_EQ(inName,"splitData") ) { return ::hx::Val( splitData ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fadeInTime") ) { return ::hx::Val( fadeInTime ); }
		if (HX_FIELD_EQ(inName,"fadeInLoop") ) { return ::hx::Val( fadeInLoop ); }
		if (HX_FIELD_EQ(inName,"handSprite") ) { return ::hx::Val( handSprite ); }
		if (HX_FIELD_EQ(inName,"clickSound") ) { return ::hx::Val( clickSound ); }
		if (HX_FIELD_EQ(inName,"curEmotion") ) { return ::hx::Val( curEmotion ); }
		if (HX_FIELD_EQ(inName,"handSelect") ) { return ::hx::Val( handSelect ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"shadowColor") ) { return ::hx::Val( shadowColor ); }
		if (HX_FIELD_EQ(inName,"fadeOutTime") ) { return ::hx::Val( fadeOutTime ); }
		if (HX_FIELD_EQ(inName,"fadeOutLoop") ) { return ::hx::Val( fadeOutLoop ); }
		if (HX_FIELD_EQ(inName,"finishThing") ) { return ::hx::Val( finishThing ); }
		if (HX_FIELD_EQ(inName,"cleanDialog") ) { return ::hx::Val( cleanDialog_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curCharacter") ) { return ::hx::Val( curCharacter ); }
		if (HX_FIELD_EQ(inName,"oldCharacter") ) { return ::hx::Val( oldCharacter ); }
		if (HX_FIELD_EQ(inName,"curShakeTime") ) { return ::hx::Val( curShakeTime ); }
		if (HX_FIELD_EQ(inName,"curFlashTime") ) { return ::hx::Val( curFlashTime ); }
		if (HX_FIELD_EQ(inName,"curFontScale") ) { return ::hx::Val( curFontScale ); }
		if (HX_FIELD_EQ(inName,"dialogueList") ) { return ::hx::Val( dialogueList ); }
		if (HX_FIELD_EQ(inName,"swagDialogue") ) { return ::hx::Val( swagDialogue ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dialogueColor") ) { return ::hx::Val( dialogueColor ); }
		if (HX_FIELD_EQ(inName,"portraitColor") ) { return ::hx::Val( portraitColor ); }
		if (HX_FIELD_EQ(inName,"curShakeDelay") ) { return ::hx::Val( curShakeDelay ); }
		if (HX_FIELD_EQ(inName,"curFlashDelay") ) { return ::hx::Val( curFlashDelay ); }
		if (HX_FIELD_EQ(inName,"startDialogue") ) { return ::hx::Val( startDialogue_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dialogueOpened") ) { return ::hx::Val( dialogueOpened ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dialogueStarted") ) { return ::hx::Val( dialogueStarted ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DialogueBox_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_dialogue") ) { outValue = ( _dialogue ); return true; }
	}
	return false;
}

::hx::Val DialogueBox_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { box=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"bgRED") ) { bgRED=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgFIT") ) { bgFIT=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgFIL") ) { bgFIL=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bgBLUE") ) { bgBLUE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curBox") ) { curBox=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oldBox") ) { oldBox=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgFade") ) { bgFade=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgALPHA") ) { bgALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgGREEN") ) { bgGREEN=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curFlip") ) { curFlip=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curFont") ) { curFont=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeCut") ) { timeCut=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curMusic") ) { curMusic=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curShake") ) { curShake=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSpeed") ) { curSpeed=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSound") ) { curSound=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogue") ) { dialogue=inValue.Cast<  ::Alphabet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dropText") ) { dropText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"portrait") ) { portrait=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isEnding") ) { isEnding=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"charScale") ) { charScale=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curVolume") ) { curVolume=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"splitData") ) { splitData=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fadeInTime") ) { fadeInTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fadeInLoop") ) { fadeInLoop=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"handSprite") ) { handSprite=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clickSound") ) { clickSound=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curEmotion") ) { curEmotion=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"handSelect") ) { handSelect=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"shadowColor") ) { shadowColor=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fadeOutTime") ) { fadeOutTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fadeOutLoop") ) { fadeOutLoop=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finishThing") ) { finishThing=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curCharacter") ) { curCharacter=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oldCharacter") ) { oldCharacter=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curShakeTime") ) { curShakeTime=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curFlashTime") ) { curFlashTime=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curFontScale") ) { curFontScale=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogueList") ) { dialogueList=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"swagDialogue") ) { swagDialogue=inValue.Cast<  ::flixel::addons::text::FlxTypeText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dialogueColor") ) { dialogueColor=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"portraitColor") ) { portraitColor=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curShakeDelay") ) { curShakeDelay=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curFlashDelay") ) { curFlashDelay=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dialogueOpened") ) { dialogueOpened=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dialogueStarted") ) { dialogueStarted=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DialogueBox_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_dialogue") ) { _dialogue=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void DialogueBox_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("box",0b,be,4a,00));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("bgALPHA",59,7f,7e,b9));
	outFields->push(HX_("bgRED",8c,48,98,b1));
	outFields->push(HX_("bgGREEN",be,e6,d4,31));
	outFields->push(HX_("bgBLUE",df,26,19,a9));
	outFields->push(HX_("curMusic",05,cb,08,58));
	outFields->push(HX_("charScale",d4,57,27,32));
	outFields->push(HX_("dialogueColor",2b,3d,43,e5));
	outFields->push(HX_("shadowColor",63,8d,28,c1));
	outFields->push(HX_("portraitColor",08,f6,dc,73));
	outFields->push(HX_("fadeInTime",2e,19,c8,08));
	outFields->push(HX_("fadeInLoop",85,f3,82,03));
	outFields->push(HX_("fadeOutTime",9f,51,3c,cb));
	outFields->push(HX_("fadeOutLoop",f6,2b,f7,c5));
	outFields->push(HX_("bgFIT",0c,31,8f,b1));
	outFields->push(HX_("bgFIL",04,31,8f,b1));
	outFields->push(HX_("handSprite",d4,38,f3,d5));
	outFields->push(HX_("clickSound",67,fb,4b,c1));
	outFields->push(HX_("curCharacter",09,86,7c,d7));
	outFields->push(HX_("oldCharacter",02,56,91,e0));
	outFields->push(HX_("curVolume",7a,43,e0,cf));
	outFields->push(HX_("curEmotion",bb,b2,3e,3e));
	outFields->push(HX_("curShake",26,d9,ca,c3));
	outFields->push(HX_("curShakeTime",53,5c,bb,7d));
	outFields->push(HX_("curShakeDelay",7d,84,26,4d));
	outFields->push(HX_("curFlashTime",3d,70,51,99));
	outFields->push(HX_("curFlashDelay",53,dd,e1,54));
	outFields->push(HX_("curSpeed",e7,91,17,c9));
	outFields->push(HX_("curFlip",4d,84,d3,ae));
	outFields->push(HX_("curFont",6f,cf,d5,ae));
	outFields->push(HX_("curFontScale",9b,1c,55,ba));
	outFields->push(HX_("curBox",6b,60,c3,3e));
	outFields->push(HX_("oldBox",a4,7f,2f,d3));
	outFields->push(HX_("curSound",2f,87,7a,c8));
	outFields->push(HX_("timeCut",75,b7,d5,d8));
	outFields->push(HX_("dialogue",18,2d,94,a7));
	outFields->push(HX_("dialogueList",96,e1,d8,0d));
	outFields->push(HX_("swagDialogue",c2,ad,00,ad));
	outFields->push(HX_("dropText",7c,74,94,f2));
	outFields->push(HX_("portrait",5b,21,af,b8));
	outFields->push(HX_("handSelect",cb,77,90,7c));
	outFields->push(HX_("bgFade",e1,fd,cd,ab));
	outFields->push(HX_("dialogueOpened",e1,e5,9f,10));
	outFields->push(HX_("dialogueStarted",09,77,22,70));
	outFields->push(HX_("isEnding",71,3f,f2,52));
	outFields->push(HX_("splitData",24,e2,c2,46));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DialogueBox_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DialogueBox_obj,box),HX_("box",0b,be,4a,00)},
	{::hx::fsFloat,(int)offsetof(DialogueBox_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsInt,(int)offsetof(DialogueBox_obj,bgALPHA),HX_("bgALPHA",59,7f,7e,b9)},
	{::hx::fsInt,(int)offsetof(DialogueBox_obj,bgRED),HX_("bgRED",8c,48,98,b1)},
	{::hx::fsInt,(int)offsetof(DialogueBox_obj,bgGREEN),HX_("bgGREEN",be,e6,d4,31)},
	{::hx::fsInt,(int)offsetof(DialogueBox_obj,bgBLUE),HX_("bgBLUE",df,26,19,a9)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curMusic),HX_("curMusic",05,cb,08,58)},
	{::hx::fsFloat,(int)offsetof(DialogueBox_obj,charScale),HX_("charScale",d4,57,27,32)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,dialogueColor),HX_("dialogueColor",2b,3d,43,e5)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,shadowColor),HX_("shadowColor",63,8d,28,c1)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,portraitColor),HX_("portraitColor",08,f6,dc,73)},
	{::hx::fsFloat,(int)offsetof(DialogueBox_obj,fadeInTime),HX_("fadeInTime",2e,19,c8,08)},
	{::hx::fsInt,(int)offsetof(DialogueBox_obj,fadeInLoop),HX_("fadeInLoop",85,f3,82,03)},
	{::hx::fsFloat,(int)offsetof(DialogueBox_obj,fadeOutTime),HX_("fadeOutTime",9f,51,3c,cb)},
	{::hx::fsInt,(int)offsetof(DialogueBox_obj,fadeOutLoop),HX_("fadeOutLoop",f6,2b,f7,c5)},
	{::hx::fsFloat,(int)offsetof(DialogueBox_obj,bgFIT),HX_("bgFIT",0c,31,8f,b1)},
	{::hx::fsInt,(int)offsetof(DialogueBox_obj,bgFIL),HX_("bgFIL",04,31,8f,b1)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,handSprite),HX_("handSprite",d4,38,f3,d5)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,clickSound),HX_("clickSound",67,fb,4b,c1)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curCharacter),HX_("curCharacter",09,86,7c,d7)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,oldCharacter),HX_("oldCharacter",02,56,91,e0)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curVolume),HX_("curVolume",7a,43,e0,cf)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curEmotion),HX_("curEmotion",bb,b2,3e,3e)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curShake),HX_("curShake",26,d9,ca,c3)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curShakeTime),HX_("curShakeTime",53,5c,bb,7d)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curShakeDelay),HX_("curShakeDelay",7d,84,26,4d)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curFlashTime),HX_("curFlashTime",3d,70,51,99)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curFlashDelay),HX_("curFlashDelay",53,dd,e1,54)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curSpeed),HX_("curSpeed",e7,91,17,c9)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curFlip),HX_("curFlip",4d,84,d3,ae)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curFont),HX_("curFont",6f,cf,d5,ae)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curFontScale),HX_("curFontScale",9b,1c,55,ba)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curBox),HX_("curBox",6b,60,c3,3e)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,oldBox),HX_("oldBox",a4,7f,2f,d3)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curSound),HX_("curSound",2f,87,7a,c8)},
	{::hx::fsInt,(int)offsetof(DialogueBox_obj,timeCut),HX_("timeCut",75,b7,d5,d8)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(DialogueBox_obj,dialogue),HX_("dialogue",18,2d,94,a7)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(DialogueBox_obj,dialogueList),HX_("dialogueList",96,e1,d8,0d)},
	{::hx::fsObject /*  ::flixel::addons::text::FlxTypeText */ ,(int)offsetof(DialogueBox_obj,swagDialogue),HX_("swagDialogue",c2,ad,00,ad)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(DialogueBox_obj,dropText),HX_("dropText",7c,74,94,f2)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DialogueBox_obj,finishThing),HX_("finishThing",9b,aa,8e,36)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DialogueBox_obj,portrait),HX_("portrait",5b,21,af,b8)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DialogueBox_obj,handSelect),HX_("handSelect",cb,77,90,7c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DialogueBox_obj,bgFade),HX_("bgFade",e1,fd,cd,ab)},
	{::hx::fsBool,(int)offsetof(DialogueBox_obj,dialogueOpened),HX_("dialogueOpened",e1,e5,9f,10)},
	{::hx::fsBool,(int)offsetof(DialogueBox_obj,dialogueStarted),HX_("dialogueStarted",09,77,22,70)},
	{::hx::fsBool,(int)offsetof(DialogueBox_obj,isEnding),HX_("isEnding",71,3f,f2,52)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(DialogueBox_obj,splitData),HX_("splitData",24,e2,c2,46)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo DialogueBox_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &DialogueBox_obj::_dialogue,HX_("_dialogue",77,24,2a,ef)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String DialogueBox_obj_sMemberFields[] = {
	HX_("box",0b,be,4a,00),
	HX_("camLerp",26,66,a1,d2),
	HX_("bgALPHA",59,7f,7e,b9),
	HX_("bgRED",8c,48,98,b1),
	HX_("bgGREEN",be,e6,d4,31),
	HX_("bgBLUE",df,26,19,a9),
	HX_("curMusic",05,cb,08,58),
	HX_("charScale",d4,57,27,32),
	HX_("dialogueColor",2b,3d,43,e5),
	HX_("shadowColor",63,8d,28,c1),
	HX_("portraitColor",08,f6,dc,73),
	HX_("fadeInTime",2e,19,c8,08),
	HX_("fadeInLoop",85,f3,82,03),
	HX_("fadeOutTime",9f,51,3c,cb),
	HX_("fadeOutLoop",f6,2b,f7,c5),
	HX_("bgFIT",0c,31,8f,b1),
	HX_("bgFIL",04,31,8f,b1),
	HX_("handSprite",d4,38,f3,d5),
	HX_("clickSound",67,fb,4b,c1),
	HX_("curCharacter",09,86,7c,d7),
	HX_("oldCharacter",02,56,91,e0),
	HX_("curVolume",7a,43,e0,cf),
	HX_("curEmotion",bb,b2,3e,3e),
	HX_("curShake",26,d9,ca,c3),
	HX_("curShakeTime",53,5c,bb,7d),
	HX_("curShakeDelay",7d,84,26,4d),
	HX_("curFlashTime",3d,70,51,99),
	HX_("curFlashDelay",53,dd,e1,54),
	HX_("curSpeed",e7,91,17,c9),
	HX_("curFlip",4d,84,d3,ae),
	HX_("curFont",6f,cf,d5,ae),
	HX_("curFontScale",9b,1c,55,ba),
	HX_("curBox",6b,60,c3,3e),
	HX_("oldBox",a4,7f,2f,d3),
	HX_("curSound",2f,87,7a,c8),
	HX_("timeCut",75,b7,d5,d8),
	HX_("dialogue",18,2d,94,a7),
	HX_("dialogueList",96,e1,d8,0d),
	HX_("swagDialogue",c2,ad,00,ad),
	HX_("dropText",7c,74,94,f2),
	HX_("finishThing",9b,aa,8e,36),
	HX_("portrait",5b,21,af,b8),
	HX_("handSelect",cb,77,90,7c),
	HX_("bgFade",e1,fd,cd,ab),
	HX_("dialogueOpened",e1,e5,9f,10),
	HX_("dialogueStarted",09,77,22,70),
	HX_("update",09,86,05,87),
	HX_("isEnding",71,3f,f2,52),
	HX_("splitData",24,e2,c2,46),
	HX_("setUp",9d,92,2f,7a),
	HX_("startDialogue",9a,8f,4f,ac),
	HX_("cleanDialog",31,37,ca,9e),
	::String(null()) };

static void DialogueBox_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DialogueBox_obj::_dialogue,"_dialogue");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DialogueBox_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DialogueBox_obj::_dialogue,"_dialogue");
};

#endif

::hx::Class DialogueBox_obj::__mClass;

static ::String DialogueBox_obj_sStaticFields[] = {
	HX_("_dialogue",77,24,2a,ef),
	::String(null())
};

void DialogueBox_obj::__register()
{
	DialogueBox_obj _hx_dummy;
	DialogueBox_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("DialogueBox",b3,1f,c8,ff);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DialogueBox_obj::__GetStatic;
	__mClass->mSetStaticField = &DialogueBox_obj::__SetStatic;
	__mClass->mMarkFunc = DialogueBox_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(DialogueBox_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DialogueBox_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DialogueBox_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DialogueBox_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DialogueBox_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DialogueBox_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}


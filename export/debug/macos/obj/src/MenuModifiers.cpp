// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_MenuModifiers
#include <MenuModifiers.h>
#endif
#ifndef INCLUDED_ModifierVariables
#include <ModifierVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlaySelection
#include <PlaySelection.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Substate_Preset
#include <Substate_Preset.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_47_new,"MenuModifiers","new",0x7d5772ef,"MenuModifiers.new","MenuModifiers.hx",47,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_177_create,"MenuModifiers","create",0x360287cd,"MenuModifiers.create","MenuModifiers.hx",177,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_78_create,"MenuModifiers","create",0x360287cd,"MenuModifiers.create","MenuModifiers.hx",78,0xab9c7f61)
static const int _hx_array_data_a6f1cf7d_3[] = {
	(int)16711680,(int)1434828287,(int)-1427315969,
};
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_193_refreshModifiers,"MenuModifiers","refreshModifiers",0x52cc33f2,"MenuModifiers.refreshModifiers","MenuModifiers.hx",193,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_341_update,"MenuModifiers","update",0x40f8a6da,"MenuModifiers.update","MenuModifiers.hx",341,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_322_update,"MenuModifiers","update",0x40f8a6da,"MenuModifiers.update","MenuModifiers.hx",322,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_232_update,"MenuModifiers","update",0x40f8a6da,"MenuModifiers.update","MenuModifiers.hx",232,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_360_changeItem,"MenuModifiers","changeItem",0x78cb57f4,"MenuModifiers.changeItem","MenuModifiers.hx",360,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_351_changeItem,"MenuModifiers","changeItem",0x78cb57f4,"MenuModifiers.changeItem","MenuModifiers.hx",351,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_464_toggleSelection,"MenuModifiers","toggleSelection",0x163c4327,"MenuModifiers.toggleSelection","MenuModifiers.hx",464,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_484_scrollValue,"MenuModifiers","scrollValue",0xcce511b3,"MenuModifiers.scrollValue","MenuModifiers.hx",484,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_552_truncateFloat,"MenuModifiers","truncateFloat",0x320090a5,"MenuModifiers.truncateFloat","MenuModifiers.hx",552,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_372_calculateMultiplier,"MenuModifiers","calculateMultiplier",0xd6d96d16,"MenuModifiers.calculateMultiplier","MenuModifiers.hx",372,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_401_calculateStart,"MenuModifiers","calculateStart",0xefe2d6ed,"MenuModifiers.calculateStart","MenuModifiers.hx",401,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_68_boot,"MenuModifiers","boot",0x27461ec3,"MenuModifiers.boot","MenuModifiers.hx",68,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_70_boot,"MenuModifiers","boot",0x27461ec3,"MenuModifiers.boot","MenuModifiers.hx",70,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_74_boot,"MenuModifiers","boot",0x27461ec3,"MenuModifiers.boot","MenuModifiers.hx",74,0xab9c7f61)
HX_LOCAL_STACK_FRAME(_hx_pos_fde738bd76ff1e3c_75_boot,"MenuModifiers","boot",0x27461ec3,"MenuModifiers.boot","MenuModifiers.hx",75,0xab9c7f61)

void MenuModifiers_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_47_new)
HXLINE( 188)		this->goingBack = false;
HXLINE( 187)		this->selectable = false;
HXLINE(  72)		this->camLerp = ((Float)0.1);
HXLINE(  65)		this->checkmarks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  64)		this->items = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  57)		this->niceText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,69,::flixel::FlxG_obj::width,HX_("",00,00,00,00),48,null());
HXLINE(  56)		this->explain =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,69,1200,HX_("",00,00,00,00),48,null());
HXLINE(  55)		this->multi =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,69,::flixel::FlxG_obj::width,HX_("",00,00,00,00),48,null());
HXLINE(  54)		this->name =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,69,::flixel::FlxG_obj::width,HX_("",00,00,00,00),48,null());
HXLINE(  53)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,null(),null());
HXDLIN(  53)		::String library = null();
HXDLIN(  53)		this->arrs = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Modi_Arrows",a2,ab,34,5a)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  52)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,null(),null());
HXDLIN(  52)		::String library1 = null();
HXDLIN(  52)		this->side = _hx_tmp1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Modi_Bottom",03,7c,b2,07)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE(  51)		this->gradientBar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null())->makeGraphic(::flixel::FlxG_obj::width,300,-5635926,null(),null());
HXLINE(  50)		::String library2 = null();
HXDLIN(  50)		this->checker =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Modi_Checker",1d,93,4d,63)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),((Float)0.2),((Float)0.2),true,true,null(),null());
HXLINE(  49)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-89,null(),null());
HXDLIN(  49)		::String library3 = null();
HXDLIN(  49)		this->bg = _hx_tmp2->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("modiBG_Main",cc,33,1b,1d)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library3),null(),null(),null(),null(),null());
HXLINE(  47)		super::__construct(TransIn,TransOut);
            	}

Dynamic MenuModifiers_obj::__CreateEmpty() { return new MenuModifiers_obj; }

void *MenuModifiers_obj::_hx_vtable = 0;

Dynamic MenuModifiers_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuModifiers_obj > _hx_result = new MenuModifiers_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MenuModifiers_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5208f4d9) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x5208f4d9;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void MenuModifiers_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MenuModifiers,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_177_create)
HXLINE( 177)			_gthis->selectable = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_78_create)
HXLINE(  77)		 ::MenuModifiers _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  79)		::MenuModifiers_obj::substated = false;
HXLINE(  81)		this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(  82)		this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(  84)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  86)		this->menuItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  87)		this->menuChecks =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  89)		this->bg->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  90)		this->bg->scrollFactor->set_y(((Float)0.03));
HXLINE(  91)		 ::flixel::FlxSprite _hx_tmp = this->bg;
HXDLIN(  91)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->bg->get_width() * ((Float)1.1))),null());
HXLINE(  92)		this->bg->updateHitbox();
HXLINE(  93)		this->bg->screenCenter(null());
HXLINE(  94)		this->bg->set_antialiasing(true);
HXLINE(  95)		this->add(this->bg);
HXLINE(  97)		this->gradientBar = ::flixel::util::FlxGradient_obj::createGradientFlxSprite(::Math_obj::round(( (Float)(::flixel::FlxG_obj::width) )),512,::Array_obj< int >::fromData( _hx_array_data_a6f1cf7d_3,3),1,90,true);
HXLINE(  98)		 ::flixel::FlxSprite _hx_tmp1 = this->gradientBar;
HXDLIN(  98)		int _hx_tmp2 = ::flixel::FlxG_obj::height;
HXDLIN(  98)		_hx_tmp1->set_y((( (Float)(_hx_tmp2) ) - this->gradientBar->get_height()));
HXLINE(  99)		this->add(this->gradientBar);
HXLINE( 100)		this->gradientBar->scrollFactor->set(0,0);
HXLINE( 102)		this->add(this->checker);
HXLINE( 103)		this->checker->scrollFactor->set(((Float)0.07),((Float)0.07));
HXLINE( 105)		this->add(this->menuItems);
HXLINE( 106)		this->add(this->menuChecks);
HXLINE( 108)		this->refreshModifiers();
HXLINE( 110)		this->arrs->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 111)		this->arrs->scrollFactor->set_y(( (Float)(0) ));
HXLINE( 112)		this->arrs->set_antialiasing(true);
HXLINE( 113)		this->arrs->screenCenter(null());
HXLINE( 114)		this->add(this->arrs);
HXLINE( 116)		this->side->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 117)		this->side->scrollFactor->set_y(( (Float)(0) ));
HXLINE( 118)		this->side->set_antialiasing(true);
HXLINE( 119)		this->side->screenCenter(null());
HXLINE( 120)		this->add(this->side);
HXLINE( 121)		 ::flixel::FlxSprite _hx_tmp3 = this->side;
HXDLIN( 121)		int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 121)		_hx_tmp3->set_y((( (Float)(_hx_tmp4) ) - this->side->get_height()));
HXLINE( 123)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,-1420,360,1,1);
HXLINE( 124)		this->add(this->camFollow);
HXLINE( 126)		::MenuModifiers_obj::calculateStart();
HXLINE( 128)		this->add(this->name);
HXLINE( 129)		this->name->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 130)		this->name->scrollFactor->set_y(( (Float)(0) ));
HXLINE( 131)		this->name->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),48,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE( 132)		this->name->set_x(( (Float)(20) ));
HXLINE( 133)		this->name->set_y(( (Float)(600) ));
HXLINE( 134)		{
HXLINE( 134)			 ::flixel::text::FlxText _this = this->name;
HXDLIN( 134)			_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 134)			_this->set_borderColor(-16777216);
HXDLIN( 134)			_this->set_borderSize(( (Float)(5) ));
HXDLIN( 134)			_this->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 136)		this->add(this->multi);
HXLINE( 137)		this->multi->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 138)		this->multi->scrollFactor->set_y(( (Float)(0) ));
HXLINE( 139)		this->multi->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),30,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 140)		this->multi->set_x(( (Float)(20) ));
HXLINE( 141)		this->multi->set_y(( (Float)(618) ));
HXLINE( 142)		{
HXLINE( 142)			 ::flixel::text::FlxText _this1 = this->multi;
HXDLIN( 142)			_this1->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 142)			_this1->set_borderColor(-16777216);
HXDLIN( 142)			_this1->set_borderSize(( (Float)(5) ));
HXDLIN( 142)			_this1->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 144)		this->add(this->explain);
HXLINE( 145)		this->explain->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 146)		this->explain->scrollFactor->set_y(( (Float)(0) ));
HXLINE( 147)		this->explain->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),20,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE( 148)		this->explain->set_x(( (Float)(20) ));
HXLINE( 149)		this->explain->set_y(( (Float)(654) ));
HXLINE( 150)		{
HXLINE( 150)			 ::flixel::text::FlxText _this2 = this->explain;
HXDLIN( 150)			_this2->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 150)			_this2->set_borderColor(-16777216);
HXDLIN( 150)			_this2->set_borderSize(( (Float)(5) ));
HXDLIN( 150)			_this2->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 152)		this->super::create();
HXLINE( 153)		this->changeItem(null());
HXLINE( 155)		this->niceText->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),52,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 156)		this->niceText->set_x(( (Float)(350) ));
HXLINE( 157)		this->niceText->set_y(( (Float)(140) ));
HXLINE( 158)		this->niceText->scrollFactor->set(null(),null());
HXLINE( 159)		{
HXLINE( 159)			 ::flixel::text::FlxText _this3 = this->niceText;
HXDLIN( 159)			_this3->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 159)			_this3->set_borderColor(-16777216);
HXDLIN( 159)			_this3->set_borderSize(( (Float)(3) ));
HXDLIN( 159)			_this3->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 160)		this->add(this->niceText);
HXLINE( 162)		 ::flixel::text::FlxText _hx_tmp5 = this->explain;
HXDLIN( 162)		 ::flixel::text::FlxText _hx_tmp6 = this->niceText;
HXDLIN( 162)		 ::flixel::text::FlxText _hx_tmp7 = this->multi;
HXDLIN( 162)		_hx_tmp5->set_alpha(_hx_tmp6->set_alpha(_hx_tmp7->set_alpha(this->name->set_alpha(( (Float)(0) )))));
HXLINE( 163)		::flixel::tweens::FlxTween_obj::tween(this->name, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.7), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.4))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 164)		::flixel::tweens::FlxTween_obj::tween(this->multi, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.7), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.4))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 165)		::flixel::tweens::FlxTween_obj::tween(this->niceText, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.7), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.4))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 166)		::flixel::tweens::FlxTween_obj::tween(this->explain, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.7), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.4))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 167)		this->side->set_y(( (Float)(::flixel::FlxG_obj::height) ));
HXLINE( 168)		 ::flixel::FlxSprite _hx_tmp8 = this->side;
HXDLIN( 168)		int _hx_tmp9 = ::flixel::FlxG_obj::height;
HXDLIN( 168)		Float _hx_tmp10 = (( (Float)(_hx_tmp9) ) - this->side->get_height());
HXDLIN( 168)		::flixel::tweens::FlxTween_obj::tween(_hx_tmp8, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),_hx_tmp10)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 170)		::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 171)		::flixel::FlxG_obj::camera->set_zoom(((Float)0.6));
HXLINE( 172)		::flixel::FlxG_obj::camera->set_alpha(( (Float)(0) ));
HXLINE( 173)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)
            			->setFixed(1,HX_("zoom",13,a3,f8,50),1)),((Float)0.7), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 175)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.7), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 180)		::flixel::FlxG_obj::camera->follow(this->camFollow,null(),this->camLerp);
HXLINE( 183)		::DiscordClient_obj::changePresence(HX_("Settings up modifiers",74,e4,8b,d8),null(),null(),null(),null());
            	}


void MenuModifiers_obj::refreshModifiers(){
            	HX_GC_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_193_refreshModifiers)
HXLINE( 194)		::String library = null();
HXDLIN( 194)		::String tex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Modifiers",1c,f1,ea,79)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 194)		 ::flixel::graphics::frames::FlxAtlasFrames tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(tex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Modifiers",1c,f1,ea,79)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 196)		{
HXLINE( 196)			int _g = 0;
HXDLIN( 196)			int _g1 = ::MenuModifiers_obj::modifierList->length;
HXDLIN( 196)			while((_g < _g1)){
HXLINE( 196)				_g = (_g + 1);
HXDLIN( 196)				int i = (_g - 1);
HXLINE( 198)				 ::flixel::FlxSprite menuItem =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(300 + (i * 250)),100,null());
HXLINE( 199)				menuItem->set_frames(tex1);
HXLINE( 200)				menuItem->animation->addByPrefix(HX_("idle",14,a7,b3,45),( (::String)((::MenuModifiers_obj::modifierList->__get(i)->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic) + HX_(" Idle",54,63,5f,9d))) ),24,true,null(),null());
HXLINE( 201)				menuItem->animation->addByPrefix(HX_("select",fc,1a,33,6a),( (::String)((::MenuModifiers_obj::modifierList->__get(i)->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic) + HX_(" Select",3c,67,76,d1))) ),24,true,null(),null());
HXLINE( 202)				menuItem->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 203)				menuItem->ID = i;
HXLINE( 204)				menuItem->set_antialiasing(true);
HXLINE( 205)				menuItem->scrollFactor->set_x(( (Float)(1) ));
HXLINE( 206)				menuItem->scrollFactor->set_y(( (Float)(1) ));
HXLINE( 207)				menuItem->set_y(( (Float)(500) ));
HXLINE( 209)				 ::flixel::FlxSprite coolCheckmark =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,300,500,null());
HXDLIN( 209)				::String library = null();
HXDLIN( 209)				 ::flixel::FlxSprite coolCheckmark1 = coolCheckmark->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("checkmark",d5,dc,5c,b1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 210)				coolCheckmark1->set_visible(( (bool)(::MenuModifiers_obj::modifierList->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) ));
HXLINE( 212)				this->menuItems->add(menuItem).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 214)				this->items->push(menuItem);
HXLINE( 215)				this->checkmarks->push(coolCheckmark1);
            			}
            		}
HXLINE( 218)		{
HXLINE( 218)			int _g2 = 0;
HXDLIN( 218)			int _g3 = this->checkmarks->length;
HXDLIN( 218)			while((_g2 < _g3)){
HXLINE( 218)				_g2 = (_g2 + 1);
HXDLIN( 218)				int i = (_g2 - 1);
HXLINE( 220)				 ::flixel::FlxSprite awesomeCheckmark =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(350 + (i * 250)),500,null());
HXDLIN( 220)				::String library = null();
HXDLIN( 220)				 ::flixel::FlxSprite awesomeCheckmark1 = awesomeCheckmark->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("checkmark",d5,dc,5c,b1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 221)				awesomeCheckmark1->ID = i;
HXLINE( 222)				awesomeCheckmark1->set_antialiasing(true);
HXLINE( 223)				awesomeCheckmark1->scrollFactor->set_x(( (Float)(1) ));
HXLINE( 224)				awesomeCheckmark1->scrollFactor->set_y(( (Float)(1) ));
HXLINE( 225)				awesomeCheckmark1->set_y(( (Float)(500) ));
HXLINE( 227)				this->menuChecks->add(awesomeCheckmark1).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuModifiers_obj,refreshModifiers,(void))

void MenuModifiers_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::MenuModifiers,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,spr, ::MenuModifiers,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite check){
            				HX_GC_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_341_update)
HXLINE( 342)				check->set_visible(_gthis->checkmarks->__get(check->ID).StaticCast<  ::flixel::FlxSprite >()->visible);
HXLINE( 344)				Float _gthis1 = _gthis->items->__get(check->ID).StaticCast<  ::flixel::FlxSprite >()->y;
HXDLIN( 344)				Float _hx_tmp = (_gthis1 + spr->get_height());
HXDLIN( 344)				check->set_y((_hx_tmp - ((spr->get_height() / ( (Float)(8) )) * ( (Float)(2) ))));
HXLINE( 345)				Float _hx_tmp1 = _gthis->items->__get(check->ID).StaticCast<  ::flixel::FlxSprite >()->getGraphicMidpoint(null())->x;
HXDLIN( 345)				check->set_x((_hx_tmp1 - (check->get_width() / ( (Float)(2) ))));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_322_update)
HXLINE( 324)			if ((spr->ID == ::MenuModifiers_obj::curSelected)) {
HXLINE( 326)				 ::flixel::FlxObject _gthis1 = _gthis->camFollow;
HXDLIN( 326)				Float a = _gthis->camFollow->x;
HXDLIN( 326)				Float b = spr->getGraphicMidpoint(null())->x;
HXDLIN( 326)				_gthis1->set_x((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b - a))));
HXLINE( 327)				 ::flixel::FlxObject _gthis2 = _gthis->camFollow;
HXDLIN( 327)				Float a1 = _gthis->camFollow->y;
HXDLIN( 327)				Float b1 = spr->getGraphicMidpoint(null())->y;
HXDLIN( 327)				_gthis2->set_y((a1 + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b1 - a1))));
HXLINE( 328)				 ::flixel::text::FlxText _gthis3 = _gthis->name;
HXDLIN( 328)				_gthis3->set_text(( (::String)(::MenuModifiers_obj::modifierList->__get(spr->ID)->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ).toUpperCase());
HXLINE( 329)				_gthis->explain->set_text(( (::String)(::MenuModifiers_obj::modifierList->__get(spr->ID)->__Field(HX_("explanation",59,59,4d,49),::hx::paccDynamic)) ));
            			}
HXLINE( 332)			spr->updateHitbox();
HXLINE( 334)			 ::flixel::FlxSprite spr1 = spr;
HXDLIN( 334)			Float _hx_tmp = ((_gthis->camFollow->x - ( (Float)(30) )) - spr->x);
HXDLIN( 334)			spr1->set_y((( (Float)(360) ) - ::Math_obj::exp((::Math_obj::abs((_hx_tmp + (spr->get_width() / ( (Float)(2) )))) / ( (Float)(80) )))));
HXLINE( 335)			if ((spr->y > -500)) {
HXLINE( 336)				 ::flixel::FlxSprite spr1 = spr;
HXDLIN( 336)				Float _hx_tmp = ((_gthis->camFollow->x - ( (Float)(30) )) - spr->x);
HXDLIN( 336)				spr1->set_y((( (Float)(360) ) - ::Math_obj::exp((::Math_obj::abs((_hx_tmp + (spr->get_width() / ( (Float)(2) )))) / ( (Float)(80) )))));
            			}
            			else {
HXLINE( 338)				spr->set_y(( (Float)(-500) ));
            			}
HXLINE( 340)			_gthis->menuChecks->forEach( ::Dynamic(new _hx_Closure_0(spr,_gthis)),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_232_update)
HXLINE( 231)		 ::MenuModifiers _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 233)		{
HXLINE( 233)			 ::flixel::addons::display::FlxBackdrop _g = this->checker;
HXDLIN( 233)			_g->set_x((_g->x - (((Float)0.03) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 234)		{
HXLINE( 234)			 ::flixel::addons::display::FlxBackdrop _g1 = this->checker;
HXDLIN( 234)			_g1->set_y((_g1->y - (((Float)0.20) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 236)		 ::flixel::text::FlxText _hx_tmp = this->multi;
HXDLIN( 236)		int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 236)		_hx_tmp->set_x((( (Float)(_hx_tmp1) ) - (this->multi->get_width() + 60)));
HXLINE( 237)		this->multi->set_text((HX_("MULTIPLIER: ",67,30,11,c5) + ::MenuModifiers_obj::fakeMP));
HXLINE( 239)		this->niceText->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 241)		if (::hx::IsEq( ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic),HX_("number",c9,86,7a,a1) )) {
HXLINE( 242)			this->niceText->set_visible(true);
            		}
            		else {
HXLINE( 244)			this->niceText->set_visible(false);
            		}
HXLINE( 246)		this->niceText->set_text(( (::String)((::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic) + ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("string",d1,28,30,11),::hx::paccDynamic))) ));
HXLINE( 248)		::MenuModifiers_obj::fakeMP = this->truncateFloat(::MenuModifiers_obj::realMP,2);
HXLINE( 250)		bool _hx_tmp2;
HXDLIN( 250)		if ((::MenuModifiers_obj::fakeMP < ((Float)0.1))) {
HXLINE( 250)			_hx_tmp2 = !(( (bool)(::MenuModifiers_obj::modifierList->__get(0)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 250)			_hx_tmp2 = false;
            		}
HXDLIN( 250)		if (_hx_tmp2) {
HXLINE( 251)			::MenuModifiers_obj::fakeMP = ((Float)0.1);
            		}
HXLINE( 254)		this->super::update(elapsed);
HXLINE( 256)		bool _hx_tmp3;
HXDLIN( 256)		bool _hx_tmp4;
HXDLIN( 256)		if (this->selectable) {
HXLINE( 256)			_hx_tmp4 = !(this->goingBack);
            		}
            		else {
HXLINE( 256)			_hx_tmp4 = false;
            		}
HXDLIN( 256)		if (_hx_tmp4) {
HXLINE( 256)			_hx_tmp3 = !(::MenuModifiers_obj::substated);
            		}
            		else {
HXLINE( 256)			_hx_tmp3 = false;
            		}
HXDLIN( 256)		if (_hx_tmp3) {
HXLINE( 258)			if (::PlayerSettings_obj::player1->controls->_leftP->check()) {
HXLINE( 260)				this->changeItem(-1);
HXLINE( 261)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 261)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 261)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
            			}
HXLINE( 264)			if (::PlayerSettings_obj::player1->controls->_rightP->check()) {
HXLINE( 266)				this->changeItem(1);
HXLINE( 267)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 267)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 267)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
            			}
HXLINE( 270)			if (::PlayerSettings_obj::player1->controls->_upP->check()) {
HXLINE( 272)				if (::hx::IsEq( ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic),HX_("number",c9,86,7a,a1) )) {
HXLINE( 274)					this->scrollValue((( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("addChange",71,c6,96,6f),::hx::paccDynamic)) ) * ( (Float)(-1) )));
HXLINE( 275)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 275)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 275)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
            				}
            				else {
HXLINE( 278)					this->toggleSelection();
            				}
            			}
HXLINE( 281)			if (::PlayerSettings_obj::player1->controls->_downP->check()) {
HXLINE( 283)				if (::hx::IsEq( ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic),HX_("number",c9,86,7a,a1) )) {
HXLINE( 285)					this->scrollValue(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("addChange",71,c6,96,6f),::hx::paccDynamic));
HXLINE( 286)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 286)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 286)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
            				}
            				else {
HXLINE( 289)					this->toggleSelection();
            				}
            			}
HXLINE( 292)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 294)				{
HXLINE( 294)					 ::flixel::FlxState nextState =  ::PlaySelection_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 294)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 294)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE( 296)				::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)-0.6))
            					->setFixed(1,HX_("zoom",13,a3,f8,50),((Float)0.6))),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 297)				::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 298)				::flixel::tweens::FlxTween_obj::tween(this->checker, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 299)				::flixel::tweens::FlxTween_obj::tween(this->gradientBar, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 300)				::flixel::tweens::FlxTween_obj::tween(this->side, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 303)				::DiscordClient_obj::changePresence(HX_("Going Back!",f4,9e,14,fe),null(),null(),null(),null());
HXLINE( 306)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 306)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null());
HXDLIN( 306)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 308)				this->goingBack = true;
            			}
HXLINE( 311)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 313)				::MenuModifiers_obj::substated = true;
HXLINE( 315)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 315)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 315)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 317)				 ::flixel::FlxState _hx_tmp2 = ::flixel::FlxG_obj::game->_state;
HXDLIN( 317)				_hx_tmp2->openSubState( ::Substate_Preset_obj::__alloc( HX_CTX ));
            			}
            		}
HXLINE( 321)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_1(_gthis)),null());
            	}


void MenuModifiers_obj::changeItem(::hx::Null< int >  __o_huh){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_360_changeItem)
HXLINE( 361)			spr->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 363)			if ((spr->ID == ::MenuModifiers_obj::curSelected)) {
HXLINE( 365)				spr->animation->play(HX_("select",fc,1a,33,6a),null(),null(),null());
            			}
HXLINE( 368)			spr->updateHitbox();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_351_changeItem)
HXLINE( 352)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::MenuModifiers >();
HXDLIN( 352)		::MenuModifiers_obj::curSelected = (::MenuModifiers_obj::curSelected + huh);
HXLINE( 354)		if ((::MenuModifiers_obj::curSelected >= this->menuItems->length)) {
HXLINE( 355)			::MenuModifiers_obj::curSelected = 0;
            		}
HXLINE( 356)		if ((::MenuModifiers_obj::curSelected < 0)) {
HXLINE( 357)			::MenuModifiers_obj::curSelected = (this->menuItems->length - 1);
            		}
HXLINE( 359)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_0()),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuModifiers_obj,changeItem,(void))

void MenuModifiers_obj::toggleSelection(){
            	HX_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_464_toggleSelection)
HXLINE( 465)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 465)		::String _hx_tmp1 = ::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null());
HXDLIN( 465)		_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 467)		this->checkmarks->__get(::MenuModifiers_obj::curSelected).StaticCast<  ::flixel::FlxSprite >()->set_visible(!(this->checkmarks->__get(::MenuModifiers_obj::curSelected).StaticCast<  ::flixel::FlxSprite >()->visible));
HXLINE( 468)		::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__SetField(HX_("value",71,7f,b8,31),this->checkmarks->__get(::MenuModifiers_obj::curSelected).StaticCast<  ::flixel::FlxSprite >()->visible,::hx::paccDynamic);
HXLINE( 469)		{
HXLINE( 469)			int _g = 0;
HXDLIN( 469)			::Array< int > _g1 = ( (::Array< int >)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("conflicts",e1,7d,d4,7b),::hx::paccDynamic)) );
HXDLIN( 469)			while((_g < _g1->length)){
HXLINE( 469)				int conflicting = _g1->__get(_g);
HXDLIN( 469)				_g = (_g + 1);
HXLINE( 470)				this->checkmarks->__get(conflicting).StaticCast<  ::flixel::FlxSprite >()->set_visible(false);
HXLINE( 471)				::MenuModifiers_obj::modifierList->__get(conflicting)->__SetField(HX_("value",71,7f,b8,31),false,::hx::paccDynamic);
HXLINE( 472)				::MenuModifiers_obj::modifierList->__get(conflicting)->__SetField(HX_("curValue",d1,79,66,79),::MenuModifiers_obj::modifierList->__get(conflicting)->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic),::hx::paccDynamic);
            			}
            		}
HXLINE( 475)		if (!(( (bool)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("abs",72,f0,49,00),::hx::paccDynamic)) ))) {
HXLINE( 476)			::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__SetField(HX_("realmulti",5b,4a,ea,80),::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic),::hx::paccDynamic);
            		}
            		else {
HXLINE( 478)			::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__SetField(HX_("realmulti",5b,4a,ea,80),::Math_obj::abs(( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) )),::hx::paccDynamic);
            		}
HXLINE( 480)		::MenuModifiers_obj::calculateMultiplier();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuModifiers_obj,toggleSelection,(void))

void MenuModifiers_obj::scrollValue(::hx::Null< Float >  __o_change){
            		Float change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_484_scrollValue)
HXLINE( 485)		 ::Dynamic _hx_tmp = ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected);
HXDLIN( 485)		_hx_tmp->__SetField(HX_("curValue",d1,79,66,79),(_hx_tmp->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic) + change),::hx::paccDynamic);
HXLINE( 487)		if (::hx::IsGreaterEq( ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("maxValue",2d,d2,d5,db),::hx::paccDynamic) )) {
HXLINE( 488)			::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__SetField(HX_("curValue",d1,79,66,79),::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("maxValue",2d,d2,d5,db),::hx::paccDynamic),::hx::paccDynamic);
            		}
HXLINE( 489)		if (::hx::IsLess( ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("minValue",7f,ec,ef,28),::hx::paccDynamic) )) {
HXLINE( 490)			::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__SetField(HX_("curValue",d1,79,66,79),::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("minValue",7f,ec,ef,28),::hx::paccDynamic),::hx::paccDynamic);
            		}
HXLINE( 492)		if (::hx::IsNotEq( ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic) )) {
HXLINE( 494)			::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__SetField(HX_("value",71,7f,b8,31),true,::hx::paccDynamic);
HXLINE( 495)			this->checkmarks->__get(::MenuModifiers_obj::curSelected).StaticCast<  ::flixel::FlxSprite >()->set_visible(true);
            		}
            		else {
HXLINE( 499)			::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__SetField(HX_("value",71,7f,b8,31),false,::hx::paccDynamic);
HXLINE( 500)			this->checkmarks->__get(::MenuModifiers_obj::curSelected).StaticCast<  ::flixel::FlxSprite >()->set_visible(false);
            		}
HXLINE( 503)		{
HXLINE( 503)			int _g = 0;
HXDLIN( 503)			::Array< int > _g1 = ( (::Array< int >)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("conflicts",e1,7d,d4,7b),::hx::paccDynamic)) );
HXDLIN( 503)			while((_g < _g1->length)){
HXLINE( 503)				int conflicting = _g1->__get(_g);
HXDLIN( 503)				_g = (_g + 1);
HXLINE( 504)				this->checkmarks->__get(conflicting).StaticCast<  ::flixel::FlxSprite >()->set_visible(false);
HXLINE( 505)				::MenuModifiers_obj::modifierList->__get(conflicting)->__SetField(HX_("value",71,7f,b8,31),false,::hx::paccDynamic);
HXLINE( 506)				::MenuModifiers_obj::modifierList->__get(conflicting)->__SetField(HX_("curValue",d1,79,66,79),::MenuModifiers_obj::modifierList->__get(conflicting)->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic),::hx::paccDynamic);
            			}
            		}
HXLINE( 509)		if (!(( (bool)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("abs",72,f0,49,00),::hx::paccDynamic)) ))) {
HXLINE( 510)			if (!(( (bool)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("revAtLow",fe,c0,7d,c8),::hx::paccDynamic)) ))) {
HXLINE( 512)				::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__SetField(HX_("realmulti",5b,4a,ea,80),(( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) * ( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)) )),::hx::paccDynamic);
HXLINE( 514)				::haxe::Log_obj::trace( ::Dynamic(((((::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic) + HX_("*",2a,00,00,00)) + ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)) + HX_("=",3d,00,00,00)) + ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("realmulti",5b,4a,ea,80),::hx::paccDynamic))),::hx::SourceInfo(HX_("source/MenuModifiers.hx",55,b6,c5,6c),514,HX_("MenuModifiers",7d,cf,f1,a6),HX_("scrollValue",24,c8,95,7b)));
            			}
            			else {
HXLINE( 518)				if (::hx::IsLess( ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic) )) {
HXLINE( 519)					bool _hx_tmp;
HXDLIN( 519)					if (::hx::IsNotEq( ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic) )) {
HXLINE( 519)						_hx_tmp = ::hx::IsEq( ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),0 );
            					}
            					else {
HXLINE( 519)						_hx_tmp = false;
            					}
HXDLIN( 519)					if (_hx_tmp) {
HXLINE( 521)						::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__SetField(HX_("realmulti",5b,4a,ea,80),(( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) * ( (Float)(-1) )),::hx::paccDynamic);
HXLINE( 523)						::haxe::Log_obj::trace( ::Dynamic(((::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic) + HX_("*-1=",6f,46,e5,1b)) + ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("realmulti",5b,4a,ea,80),::hx::paccDynamic))),::hx::SourceInfo(HX_("source/MenuModifiers.hx",55,b6,c5,6c),523,HX_("MenuModifiers",7d,cf,f1,a6),HX_("scrollValue",24,c8,95,7b)));
            					}
            					else {
HXLINE( 527)						::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__SetField(HX_("realmulti",5b,4a,ea,80),((( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) * ( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)) )) * ( (Float)(-1) )),::hx::paccDynamic);
HXLINE( 529)						::haxe::Log_obj::trace( ::Dynamic(((((::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic) + HX_("*",2a,00,00,00)) + ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)) + HX_("*-1=",6f,46,e5,1b)) + ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("realmulti",5b,4a,ea,80),::hx::paccDynamic))),::hx::SourceInfo(HX_("source/MenuModifiers.hx",55,b6,c5,6c),529,HX_("MenuModifiers",7d,cf,f1,a6),HX_("scrollValue",24,c8,95,7b)));
            					}
            				}
            				else {
HXLINE( 531)					if (::hx::IsGreater( ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic) )) {
HXLINE( 532)						bool _hx_tmp;
HXDLIN( 532)						if (::hx::IsNotEq( ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic) )) {
HXLINE( 532)							_hx_tmp = ::hx::IsEq( ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),0 );
            						}
            						else {
HXLINE( 532)							_hx_tmp = false;
            						}
HXDLIN( 532)						if (_hx_tmp) {
HXLINE( 534)							::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__SetField(HX_("realmulti",5b,4a,ea,80),(( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) - (( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) * ( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic)) ))),::hx::paccDynamic);
HXLINE( 536)							::haxe::Log_obj::trace( ::Dynamic(((((((::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic) + HX_("-",2d,00,00,00)) + ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) + HX_("*",2a,00,00,00)) + ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic)) + HX_("=",3d,00,00,00)) + ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("realmulti",5b,4a,ea,80),::hx::paccDynamic))),::hx::SourceInfo(HX_("source/MenuModifiers.hx",55,b6,c5,6c),536,HX_("MenuModifiers",7d,cf,f1,a6),HX_("scrollValue",24,c8,95,7b)));
            						}
            						else {
HXLINE( 540)							::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__SetField(HX_("realmulti",5b,4a,ea,80),((( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) * ( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)) )) - (( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) * ( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic)) ))),::hx::paccDynamic);
HXLINE( 542)							::haxe::Log_obj::trace( ::Dynamic(((((((((::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic) + HX_("*",2a,00,00,00)) + ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)) + HX_("-",2d,00,00,00)) + ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) + HX_("*",2a,00,00,00)) + ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic)) + HX_("=",3d,00,00,00)) + ::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("realmulti",5b,4a,ea,80),::hx::paccDynamic))),::hx::SourceInfo(HX_("source/MenuModifiers.hx",55,b6,c5,6c),542,HX_("MenuModifiers",7d,cf,f1,a6),HX_("scrollValue",24,c8,95,7b)));
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 547)			::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__SetField(HX_("realmulti",5b,4a,ea,80),::Math_obj::abs((( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) * ( (Float)(::MenuModifiers_obj::modifierList->__get(::MenuModifiers_obj::curSelected)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)) ))),::hx::paccDynamic);
            		}
HXLINE( 549)		::MenuModifiers_obj::calculateMultiplier();
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuModifiers_obj,scrollValue,(void))

Float MenuModifiers_obj::truncateFloat(Float number,int precision){
            	HX_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_552_truncateFloat)
HXLINE( 553)		Float num = number;
HXLINE( 554)		num = (num * ::Math_obj::pow(( (Float)(10) ),( (Float)(precision) )));
HXLINE( 555)		num = (( (Float)(::Math_obj::round(num)) ) / ::Math_obj::pow(( (Float)(10) ),( (Float)(precision) )));
HXLINE( 556)		return num;
            	}


HX_DEFINE_DYNAMIC_FUNC2(MenuModifiers_obj,truncateFloat,return )

::Array< ::Dynamic> MenuModifiers_obj::modifierList;

int MenuModifiers_obj::curSelected;

bool MenuModifiers_obj::substated;

Float MenuModifiers_obj::realMP;

Float MenuModifiers_obj::fakeMP;

void MenuModifiers_obj::calculateMultiplier(){
            	HX_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_372_calculateMultiplier)
HXLINE( 373)		::MenuModifiers_obj::realMP = ( (Float)(1) );
HXLINE( 374)		::Array< Float > timesThings = ::Array_obj< Float >::__new(0);
HXLINE( 375)		::Array< Float > divideThings = ::Array_obj< Float >::__new(0);
HXLINE( 377)		{
HXLINE( 377)			int _g = 0;
HXDLIN( 377)			::Array< ::Dynamic> _g1 = ::MenuModifiers_obj::modifierList;
HXDLIN( 377)			while((_g < _g1->length)){
HXLINE( 377)				 ::Dynamic i = _g1->__get(_g);
HXDLIN( 377)				_g = (_g + 1);
HXLINE( 378)				if (( (bool)(i->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) )) {
HXLINE( 379)					if (::hx::IsEq( i->__Field(HX_("equation",8c,bb,7c,da),::hx::paccDynamic),HX_("times",c6,bf,35,10) )) {
HXLINE( 380)						timesThings->push( ::Dynamic(i->__Field(HX_("realmulti",5b,4a,ea,80),::hx::paccDynamic)));
            					}
            					else {
HXLINE( 381)						if (::hx::IsEq( i->__Field(HX_("equation",8c,bb,7c,da),::hx::paccDynamic),HX_("division",2d,5d,85,55) )) {
HXLINE( 382)							divideThings->push( ::Dynamic(i->__Field(HX_("realmulti",5b,4a,ea,80),::hx::paccDynamic)));
            						}
            						else {
HXLINE( 384)							 ::Dynamic _hx_tmp = ::hx::ClassOf< ::MenuModifiers >();
HXDLIN( 384)							::MenuModifiers_obj::realMP = ( (Float)((::MenuModifiers_obj::realMP + i->__Field(HX_("realmulti",5b,4a,ea,80),::hx::paccDynamic))) );
            						}
            					}
            				}
            			}
            		}
HXLINE( 389)		{
HXLINE( 389)			int _g2 = 0;
HXDLIN( 389)			while((_g2 < timesThings->length)){
HXLINE( 389)				Float timesThing = timesThings->__get(_g2);
HXDLIN( 389)				_g2 = (_g2 + 1);
HXLINE( 390)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::MenuModifiers >();
HXDLIN( 390)				::MenuModifiers_obj::realMP = (::MenuModifiers_obj::realMP * timesThing);
            			}
            		}
HXLINE( 392)		{
HXLINE( 392)			int _g3 = 0;
HXDLIN( 392)			while((_g3 < divideThings->length)){
HXLINE( 392)				Float divideThing = divideThings->__get(_g3);
HXDLIN( 392)				_g3 = (_g3 + 1);
HXLINE( 393)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::MenuModifiers >();
HXDLIN( 393)				::MenuModifiers_obj::realMP = (::MenuModifiers_obj::realMP / divideThing);
            			}
            		}
HXLINE( 396)		::ModifierVariables_obj::updateModifiers();
HXLINE( 397)		::ModifierVariables_obj::saveCurrent();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MenuModifiers_obj,calculateMultiplier,(void))

void MenuModifiers_obj::calculateStart(){
            	HX_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_401_calculateStart)
HXLINE( 402)		{
HXLINE( 402)			int _g = 0;
HXDLIN( 402)			::Array< ::Dynamic> _g1 = ::MenuModifiers_obj::modifierList;
HXDLIN( 402)			while((_g < _g1->length)){
HXLINE( 402)				 ::Dynamic i = _g1->__get(_g);
HXDLIN( 402)				_g = (_g + 1);
HXLINE( 403)				if (::hx::IsEq( i->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic),HX_("switch",f4,49,79,c5) )) {
HXLINE( 405)					if (!(( (bool)(i->__Field(HX_("abs",72,f0,49,00),::hx::paccDynamic)) ))) {
HXLINE( 406)						i->__SetField(HX_("realmulti",5b,4a,ea,80),i->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic),::hx::paccDynamic);
            					}
            					else {
HXLINE( 408)						i->__SetField(HX_("realmulti",5b,4a,ea,80),::Math_obj::abs(( (Float)(i->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) )),::hx::paccDynamic);
            					}
            				}
            				else {
HXLINE( 410)					if (::hx::IsEq( i->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic),HX_("number",c9,86,7a,a1) )) {
HXLINE( 419)						if (::hx::IsNotEq( i->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),i->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic) )) {
HXLINE( 421)							i->__SetField(HX_("value",71,7f,b8,31),true,::hx::paccDynamic);
            						}
            						else {
HXLINE( 425)							i->__SetField(HX_("value",71,7f,b8,31),false,::hx::paccDynamic);
            						}
HXLINE( 428)						if (!(( (bool)(i->__Field(HX_("abs",72,f0,49,00),::hx::paccDynamic)) ))) {
HXLINE( 430)							if (!(( (bool)(i->__Field(HX_("revAtLow",fe,c0,7d,c8),::hx::paccDynamic)) ))) {
HXLINE( 432)								i->__SetField(HX_("realmulti",5b,4a,ea,80),(( (Float)(i->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) * ( (Float)(i->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)) )),::hx::paccDynamic);
            							}
            							else {
HXLINE( 436)								if (::hx::IsLess( i->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),i->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic) )) {
HXLINE( 437)									bool _hx_tmp;
HXDLIN( 437)									if (::hx::IsNotEq( i->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),i->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic) )) {
HXLINE( 437)										_hx_tmp = ::hx::IsEq( i->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),0 );
            									}
            									else {
HXLINE( 437)										_hx_tmp = false;
            									}
HXDLIN( 437)									if (_hx_tmp) {
HXLINE( 439)										i->__SetField(HX_("realmulti",5b,4a,ea,80),(( (Float)(i->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) * ( (Float)(-1) )),::hx::paccDynamic);
            									}
            									else {
HXLINE( 443)										i->__SetField(HX_("realmulti",5b,4a,ea,80),((( (Float)(i->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) * ( (Float)(i->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)) )) * ( (Float)(-1) )),::hx::paccDynamic);
            									}
            								}
            								else {
HXLINE( 445)									if (::hx::IsGreater( i->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),i->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic) )) {
HXLINE( 446)										bool _hx_tmp;
HXDLIN( 446)										if (::hx::IsNotEq( i->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),i->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic) )) {
HXLINE( 446)											_hx_tmp = ::hx::IsEq( i->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic),0 );
            										}
            										else {
HXLINE( 446)											_hx_tmp = false;
            										}
HXDLIN( 446)										if (_hx_tmp) {
HXLINE( 448)											i->__SetField(HX_("realmulti",5b,4a,ea,80),(( (Float)(i->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) - (( (Float)(i->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) * ( (Float)(i->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic)) ))),::hx::paccDynamic);
            										}
            										else {
HXLINE( 452)											i->__SetField(HX_("realmulti",5b,4a,ea,80),((( (Float)(i->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) * ( (Float)(i->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)) )) - (( (Float)(i->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) * ( (Float)(i->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic)) ))),::hx::paccDynamic);
            										}
            									}
            								}
            							}
            						}
            						else {
HXLINE( 457)							i->__SetField(HX_("realmulti",5b,4a,ea,80),::Math_obj::abs((( (Float)(i->__Field(HX_("multi",79,8a,55,10),::hx::paccDynamic)) ) * ( (Float)(i->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)) ))),::hx::paccDynamic);
            						}
            					}
            				}
            			}
            		}
HXLINE( 461)		::MenuModifiers_obj::calculateMultiplier();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MenuModifiers_obj,calculateStart,(void))


::hx::ObjectPtr< MenuModifiers_obj > MenuModifiers_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< MenuModifiers_obj > __this = new MenuModifiers_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< MenuModifiers_obj > MenuModifiers_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MenuModifiers_obj *__this = (MenuModifiers_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuModifiers_obj), true, "MenuModifiers"));
	*(void **)__this = MenuModifiers_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MenuModifiers_obj::MenuModifiers_obj()
{
}

void MenuModifiers_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuModifiers);
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(checker,"checker");
	HX_MARK_MEMBER_NAME(gradientBar,"gradientBar");
	HX_MARK_MEMBER_NAME(side,"side");
	HX_MARK_MEMBER_NAME(arrs,"arrs");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(multi,"multi");
	HX_MARK_MEMBER_NAME(explain,"explain");
	HX_MARK_MEMBER_NAME(niceText,"niceText");
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(menuChecks,"menuChecks");
	HX_MARK_MEMBER_NAME(items,"items");
	HX_MARK_MEMBER_NAME(checkmarks,"checkmarks");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(goingBack,"goingBack");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuModifiers_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(checker,"checker");
	HX_VISIT_MEMBER_NAME(gradientBar,"gradientBar");
	HX_VISIT_MEMBER_NAME(side,"side");
	HX_VISIT_MEMBER_NAME(arrs,"arrs");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(multi,"multi");
	HX_VISIT_MEMBER_NAME(explain,"explain");
	HX_VISIT_MEMBER_NAME(niceText,"niceText");
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(menuChecks,"menuChecks");
	HX_VISIT_MEMBER_NAME(items,"items");
	HX_VISIT_MEMBER_NAME(checkmarks,"checkmarks");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(goingBack,"goingBack");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuModifiers_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"side") ) { return ::hx::Val( side ); }
		if (HX_FIELD_EQ(inName,"arrs") ) { return ::hx::Val( arrs ); }
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"multi") ) { return ::hx::Val( multi ); }
		if (HX_FIELD_EQ(inName,"items") ) { return ::hx::Val( items ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { return ::hx::Val( checker ); }
		if (HX_FIELD_EQ(inName,"explain") ) { return ::hx::Val( explain ); }
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"niceText") ) { return ::hx::Val( niceText ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"goingBack") ) { return ::hx::Val( goingBack ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"menuChecks") ) { return ::hx::Val( menuChecks ); }
		if (HX_FIELD_EQ(inName,"checkmarks") ) { return ::hx::Val( checkmarks ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { return ::hx::Val( gradientBar ); }
		if (HX_FIELD_EQ(inName,"scrollValue") ) { return ::hx::Val( scrollValue_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"truncateFloat") ) { return ::hx::Val( truncateFloat_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"toggleSelection") ) { return ::hx::Val( toggleSelection_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"refreshModifiers") ) { return ::hx::Val( refreshModifiers_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MenuModifiers_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"realMP") ) { outValue = ( realMP ); return true; }
		if (HX_FIELD_EQ(inName,"fakeMP") ) { outValue = ( fakeMP ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"substated") ) { outValue = ( substated ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"modifierList") ) { outValue = ( modifierList ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"calculateStart") ) { outValue = calculateStart_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"calculateMultiplier") ) { outValue = calculateMultiplier_dyn(); return true; }
	}
	return false;
}

::hx::Val MenuModifiers_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"side") ) { side=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arrs") ) { arrs=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"multi") ) { multi=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"items") ) { items=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { checker=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"explain") ) { explain=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"niceText") ) { niceText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"goingBack") ) { goingBack=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"menuChecks") ) { menuChecks=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checkmarks") ) { checkmarks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { gradientBar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MenuModifiers_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"realMP") ) { realMP=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"fakeMP") ) { fakeMP=ioValue.Cast< Float >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"substated") ) { substated=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"modifierList") ) { modifierList=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void MenuModifiers_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("checker",35,b3,24,13));
	outFields->push(HX_("gradientBar",c3,05,20,d3));
	outFields->push(HX_("side",97,8d,53,4c));
	outFields->push(HX_("arrs",f2,96,74,40));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("multi",79,8a,55,10));
	outFields->push(HX_("explain",b7,20,59,27));
	outFields->push(HX_("niceText",ea,06,9b,96));
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("menuChecks",aa,51,93,9c));
	outFields->push(HX_("items",00,ac,0c,c2));
	outFields->push(HX_("checkmarks",fe,5d,e4,7f));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("goingBack",01,e7,bf,2f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuModifiers_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuModifiers_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(MenuModifiers_obj,checker),HX_("checker",35,b3,24,13)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuModifiers_obj,gradientBar),HX_("gradientBar",c3,05,20,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuModifiers_obj,side),HX_("side",97,8d,53,4c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuModifiers_obj,arrs),HX_("arrs",f2,96,74,40)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuModifiers_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuModifiers_obj,multi),HX_("multi",79,8a,55,10)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuModifiers_obj,explain),HX_("explain",b7,20,59,27)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuModifiers_obj,niceText),HX_("niceText",ea,06,9b,96)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MenuModifiers_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MenuModifiers_obj,menuChecks),HX_("menuChecks",aa,51,93,9c)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MenuModifiers_obj,items),HX_("items",00,ac,0c,c2)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MenuModifiers_obj,checkmarks),HX_("checkmarks",fe,5d,e4,7f)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(MenuModifiers_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsFloat,(int)offsetof(MenuModifiers_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsBool,(int)offsetof(MenuModifiers_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{::hx::fsBool,(int)offsetof(MenuModifiers_obj,goingBack),HX_("goingBack",01,e7,bf,2f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MenuModifiers_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &MenuModifiers_obj::modifierList,HX_("modifierList",55,1b,ba,91)},
	{::hx::fsInt,(void *) &MenuModifiers_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsBool,(void *) &MenuModifiers_obj::substated,HX_("substated",b3,a2,b3,d7)},
	{::hx::fsFloat,(void *) &MenuModifiers_obj::realMP,HX_("realMP",41,a2,97,fc)},
	{::hx::fsFloat,(void *) &MenuModifiers_obj::fakeMP,HX_("fakeMP",38,ce,4b,e9)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MenuModifiers_obj_sMemberFields[] = {
	HX_("bg",c5,55,00,00),
	HX_("checker",35,b3,24,13),
	HX_("gradientBar",c3,05,20,d3),
	HX_("side",97,8d,53,4c),
	HX_("arrs",f2,96,74,40),
	HX_("name",4b,72,ff,48),
	HX_("multi",79,8a,55,10),
	HX_("explain",b7,20,59,27),
	HX_("niceText",ea,06,9b,96),
	HX_("menuItems",e1,15,e5,5c),
	HX_("menuChecks",aa,51,93,9c),
	HX_("items",00,ac,0c,c2),
	HX_("checkmarks",fe,5d,e4,7f),
	HX_("camFollow",e0,6e,47,22),
	HX_("camLerp",26,66,a1,d2),
	HX_("create",fc,66,0f,7c),
	HX_("selectable",96,b6,2a,c4),
	HX_("goingBack",01,e7,bf,2f),
	HX_("refreshModifiers",e1,83,1b,88),
	HX_("update",09,86,05,87),
	HX_("changeItem",a3,fa,08,20),
	HX_("toggleSelection",18,86,c7,da),
	HX_("scrollValue",24,c8,95,7b),
	HX_("truncateFloat",56,85,20,77),
	::String(null()) };

static void MenuModifiers_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuModifiers_obj::modifierList,"modifierList");
	HX_MARK_MEMBER_NAME(MenuModifiers_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(MenuModifiers_obj::substated,"substated");
	HX_MARK_MEMBER_NAME(MenuModifiers_obj::realMP,"realMP");
	HX_MARK_MEMBER_NAME(MenuModifiers_obj::fakeMP,"fakeMP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuModifiers_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuModifiers_obj::modifierList,"modifierList");
	HX_VISIT_MEMBER_NAME(MenuModifiers_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(MenuModifiers_obj::substated,"substated");
	HX_VISIT_MEMBER_NAME(MenuModifiers_obj::realMP,"realMP");
	HX_VISIT_MEMBER_NAME(MenuModifiers_obj::fakeMP,"fakeMP");
};

#endif

::hx::Class MenuModifiers_obj::__mClass;

static ::String MenuModifiers_obj_sStaticFields[] = {
	HX_("modifierList",55,1b,ba,91),
	HX_("curSelected",fb,eb,ab,32),
	HX_("substated",b3,a2,b3,d7),
	HX_("realMP",41,a2,97,fc),
	HX_("fakeMP",38,ce,4b,e9),
	HX_("calculateMultiplier",87,7c,bf,72),
	HX_("calculateStart",1c,fd,b8,26),
	::String(null())
};

void MenuModifiers_obj::__register()
{
	MenuModifiers_obj _hx_dummy;
	MenuModifiers_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MenuModifiers",7d,cf,f1,a6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MenuModifiers_obj::__GetStatic;
	__mClass->mSetStaticField = &MenuModifiers_obj::__SetStatic;
	__mClass->mMarkFunc = MenuModifiers_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MenuModifiers_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuModifiers_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuModifiers_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuModifiers_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuModifiers_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuModifiers_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MenuModifiers_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_68_boot)
HXDLIN(  68)		curSelected = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_70_boot)
HXDLIN(  70)		substated = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_74_boot)
HXDLIN(  74)		realMP = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_fde738bd76ff1e3c_75_boot)
HXDLIN(  75)		fakeMP = ((Float)1);
            	}
}


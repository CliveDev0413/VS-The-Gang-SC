// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Substate_ChartType
#include <Substate_ChartType.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_52762598c0ded1ee_89_new,"Substate_ChartType","new",0x078cac3c,"Substate_ChartType.new","Substate_ChartType.hx",89,0x2710aeb4)
HX_DEFINE_STACK_FRAME(_hx_pos_52762598c0ded1ee_27_new,"Substate_ChartType","new",0x078cac3c,"Substate_ChartType.new","Substate_ChartType.hx",27,0x2710aeb4)
static const ::String _hx_array_data_6a431e4a_3[] = {
	HX_("standard",3d,37,78,ea),HX_("flip",ad,12,be,43),HX_("chaos",40,9a,b3,45),HX_("onearrow",a3,6d,b3,32),HX_("stair",89,6c,0b,84),
};
static const int _hx_array_data_6a431e4a_4[] = {
	(int)16711680,(int)1442803943,(int)-1433080833,
};
HX_LOCAL_STACK_FRAME(_hx_pos_52762598c0ded1ee_174_update,"Substate_ChartType","update",0x25f27bad,"Substate_ChartType.update","Substate_ChartType.hx",174,0x2710aeb4)
HX_LOCAL_STACK_FRAME(_hx_pos_52762598c0ded1ee_98_update,"Substate_ChartType","update",0x25f27bad,"Substate_ChartType.update","Substate_ChartType.hx",98,0x2710aeb4)
HX_LOCAL_STACK_FRAME(_hx_pos_52762598c0ded1ee_165_update,"Substate_ChartType","update",0x25f27bad,"Substate_ChartType.update","Substate_ChartType.hx",165,0x2710aeb4)
HX_LOCAL_STACK_FRAME(_hx_pos_52762598c0ded1ee_196_changeItem,"Substate_ChartType","changeItem",0x3ecb9247,"Substate_ChartType.changeItem","Substate_ChartType.hx",196,0x2710aeb4)
HX_LOCAL_STACK_FRAME(_hx_pos_52762598c0ded1ee_187_changeItem,"Substate_ChartType","changeItem",0x3ecb9247,"Substate_ChartType.changeItem","Substate_ChartType.hx",187,0x2710aeb4)
HX_LOCAL_STACK_FRAME(_hx_pos_52762598c0ded1ee_32_boot,"Substate_ChartType","boot",0x8ba308d6,"Substate_ChartType.boot","Substate_ChartType.hx",32,0x2710aeb4)

void Substate_ChartType_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Substate_ChartType,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_52762598c0ded1ee_89_new)
HXLINE(  90)			_gthis->selectable = true;
HXLINE(  91)			::flixel::FlxG_obj::camera->follow(_gthis->camFollow,null(),_gthis->camLerp);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_52762598c0ded1ee_27_new)
HXLINE(  95)		this->selectable = false;
HXLINE(  40)		this->blackBarThingie =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE(  38)		this->gradientBar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null())->makeGraphic(::flixel::FlxG_obj::width,300,-5635926,null(),null());
HXLINE(  37)		::String library = null();
HXDLIN(  37)		this->checker =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Substate_Checker",47,e6,9e,9b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),((Float)0.2),((Float)0.2),true,true,null(),null());
HXLINE(  36)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  36)		::String library1 = null();
HXDLIN(  36)		this->boombox = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Boombox",a0,0e,f7,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE(  34)		this->camLerp = ((Float)0.32);
HXLINE(  31)		this->selectedSomethin = false;
HXLINE(  30)		this->optionShit = ::Array_obj< ::String >::fromData( _hx_array_data_6a431e4a_3,5);
HXLINE(  42)		 ::Substate_ChartType _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  44)		super::__construct();
HXLINE(  46)		this->add(this->blackBarThingie);
HXLINE(  47)		this->blackBarThingie->scrollFactor->set(null(),null());
HXLINE(  49)		this->gradientBar = ::flixel::util::FlxGradient_obj::createGradientFlxSprite(::Math_obj::round(( (Float)(::flixel::FlxG_obj::width) )),512,::Array_obj< int >::fromData( _hx_array_data_6a431e4a_4,3),1,90,true);
HXLINE(  50)		 ::flixel::FlxSprite _hx_tmp1 = this->gradientBar;
HXDLIN(  50)		int _hx_tmp11 = ::flixel::FlxG_obj::height;
HXDLIN(  50)		_hx_tmp1->set_y((( (Float)(_hx_tmp11) ) - this->gradientBar->get_height()));
HXLINE(  51)		this->add(this->gradientBar);
HXLINE(  52)		this->gradientBar->scrollFactor->set(0,0);
HXLINE(  54)		this->add(this->checker);
HXLINE(  55)		this->checker->scrollFactor->set(((Float)0.07),((Float)0.07));
HXLINE(  57)		 ::flixel::FlxSprite _hx_tmp2 = this->gradientBar;
HXDLIN(  57)		_hx_tmp2->set_alpha(this->checker->set_alpha(( (Float)(0) )));
HXLINE(  58)		::flixel::tweens::FlxTween_obj::tween(this->checker, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)1.2), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE(  59)		::flixel::tweens::FlxTween_obj::tween(this->gradientBar, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)1.2), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE(  61)		this->menuItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  62)		this->add(this->menuItems);
HXLINE(  64)		::String library2 = null();
HXDLIN(  64)		::String tex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("chartTypes",bb,de,e9,4e)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2);
HXDLIN(  64)		 ::flixel::graphics::frames::FlxAtlasFrames tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(tex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("chartTypes",bb,de,e9,4e)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library2));
HXLINE(  66)		{
HXLINE(  66)			int _g = 0;
HXDLIN(  66)			int _g1 = this->optionShit->length;
HXDLIN(  66)			while((_g < _g1)){
HXLINE(  66)				_g = (_g + 1);
HXDLIN(  66)				int i = (_g - 1);
HXLINE(  68)				 ::flixel::FlxSprite menuItem =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-250,30,null());
HXLINE(  69)				menuItem->set_frames(tex1);
HXLINE(  70)				menuItem->animation->addByPrefix(HX_("idle",14,a7,b3,45),(this->optionShit->__get(i) + HX_(" idle",34,37,86,b2)),24,true,null(),null());
HXLINE(  71)				menuItem->animation->addByPrefix(HX_("select",fc,1a,33,6a),(this->optionShit->__get(i) + HX_(" select",1c,f3,e1,9c)),24,true,null(),null());
HXLINE(  72)				menuItem->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  73)				menuItem->ID = i;
HXLINE(  74)				this->menuItems->add(menuItem).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  75)				menuItem->set_y((720 + (( (Float)(i) ) * menuItem->get_height())));
HXLINE(  76)				menuItem->scrollFactor->set(null(),null());
HXLINE(  77)				menuItem->set_antialiasing(true);
HXLINE(  78)				menuItem->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  79)				menuItem->scrollFactor->set_y(( (Float)(1) ));
HXLINE(  81)				menuItem->set_x(( (Float)(2000) ));
HXLINE(  82)				::flixel::tweens::FlxTween_obj::tween(menuItem, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),800)),((Float)0.15), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
            			}
            		}
HXLINE(  85)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE(  86)		this->add(this->camFollow);
HXLINE(  88)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}

Dynamic Substate_ChartType_obj::__CreateEmpty() { return new Substate_ChartType_obj; }

void *Substate_ChartType_obj::_hx_vtable = 0;

Dynamic Substate_ChartType_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Substate_ChartType_obj > _hx_result = new Substate_ChartType_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Substate_ChartType_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x28fb0b6e) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x28fb0b6e;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void Substate_ChartType_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::Substate_ChartType,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_GC_STACKFRAME(&_hx_pos_52762598c0ded1ee_174_update)
HXLINE( 175)			bool _hx_tmp;
HXDLIN( 175)			bool _hx_tmp1;
HXDLIN( 175)			if ((spr->ID == ::Substate_ChartType_obj::curSelected)) {
HXLINE( 175)				_hx_tmp1 = !(_gthis->selectedSomethin);
            			}
            			else {
HXLINE( 175)				_hx_tmp1 = false;
            			}
HXDLIN( 175)			if (_hx_tmp1) {
HXLINE( 175)				_hx_tmp = _gthis->selectable;
            			}
            			else {
HXLINE( 175)				_hx_tmp = false;
            			}
HXDLIN( 175)			if (_hx_tmp) {
HXLINE( 177)				 ::flixel::FlxObject _gthis1 = _gthis->camFollow;
HXDLIN( 177)				Float a = _gthis->camFollow->y;
HXDLIN( 177)				Float b = spr->getGraphicMidpoint(null())->y;
HXDLIN( 177)				_gthis1->set_y((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b - a))));
HXLINE( 178)				_gthis->camFollow->set_x(( (Float)(0) ));
HXLINE( 179)				Float a1 = spr->x;
HXDLIN( 179)				spr->set_x((a1 + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(-1300) ) - a1))));
            			}
HXLINE( 182)			Float a = spr->x;
HXDLIN( 182)			spr->set_x((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(600) ) - a))));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_52762598c0ded1ee_98_update)
HXLINE(  97)		 ::Substate_ChartType _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  99)		this->super::update(elapsed);
HXLINE( 101)		this->boombox->screenCenter(null());
HXLINE( 102)		{
HXLINE( 102)			 ::flixel::addons::display::FlxBackdrop _g = this->checker;
HXDLIN( 102)			_g->set_x((_g->x - (((Float)0.03) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 103)		{
HXLINE( 103)			 ::flixel::addons::display::FlxBackdrop _g1 = this->checker;
HXDLIN( 103)			_g1->set_y((_g1->y - (((Float)0.20) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 105)		bool _hx_tmp;
HXDLIN( 105)		if (this->selectable) {
HXLINE( 105)			_hx_tmp = !(this->selectedSomethin);
            		}
            		else {
HXLINE( 105)			_hx_tmp = false;
            		}
HXDLIN( 105)		if (_hx_tmp) {
HXLINE( 107)			if (::PlayerSettings_obj::player1->controls->_upP->check()) {
HXLINE( 109)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 109)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 109)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 110)				this->changeItem(-1);
            			}
HXLINE( 113)			if (::PlayerSettings_obj::player1->controls->_downP->check()) {
HXLINE( 115)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 115)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 115)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 116)				this->changeItem(1);
            			}
HXLINE( 119)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 121)				{
HXLINE( 121)					 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 121)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 121)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE( 122)				this->selectedSomethin = true;
            			}
HXLINE( 125)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Substate_ChartType,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_52762598c0ded1ee_165_update)
HXLINE( 166)					{
HXLINE( 166)						 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 166)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE( 167)					_gthis->boombox->set_visible(false);
HXLINE( 168)					{
HXLINE( 168)						 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),true);
HXDLIN( 168)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 168)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 127)				this->selectedSomethin = true;
HXLINE( 129)				if (::hx::IsEq( ::MainVariables_obj::_variables->__Field(HX_("music",a5,d0,5a,10),::hx::paccDynamic),HX_("funky",ad,f7,88,08) )) {
HXLINE( 130)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 130)					::String library = null();
HXDLIN( 130)					::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("titleShoot",27,95,0c,8e)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN( 130)					_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
            				}
HXLINE( 132)				switch((int)(::flixel::FlxG_obj::random->_hx_int(0,3,null()))){
            					case (int)0: {
HXLINE( 135)						::PlayState_obj::arrowLane = 0;
            					}
            					break;
            					case (int)1: {
HXLINE( 137)						::PlayState_obj::arrowLane = 1;
            					}
            					break;
            					case (int)2: {
HXLINE( 139)						::PlayState_obj::arrowLane = 2;
            					}
            					break;
            					case (int)3: {
HXLINE( 141)						::PlayState_obj::arrowLane = 3;
            					}
            					break;
            				}
HXLINE( 144)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 144)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 144)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 147)				::DiscordClient_obj::changePresence(HX_("Time to play!",9b,01,93,77),null(),null(),null(),null());
HXLINE( 150)				{
HXLINE( 150)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 150)					 ::Dynamic To = 0;
HXDLIN( 150)					 ::Dynamic onComplete = null();
HXDLIN( 150)					if (::hx::IsNull( To )) {
HXLINE( 150)						To = 0;
            					}
HXDLIN( 150)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 150)						_this->fadeTween->cancel();
            					}
HXDLIN( 150)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),((Float)2.1), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
HXLINE( 152)				::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("zoom",13,a3,f8,50),((Float)1.4))),((Float)1.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 153)				::flixel::tweens::FlxTween_obj::tween(this->camFollow, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("y",79,00,00,00),2000)),((Float)1.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 155)				this->add(this->boombox);
HXLINE( 156)				this->boombox->scale->set(0,0);
HXLINE( 157)				this->boombox->scrollFactor->set(null(),null());
HXLINE( 158)				this->boombox->set_alpha(( (Float)(0) ));
HXLINE( 160)				::PlayState_obj::chartType = ::Std_obj::string(this->optionShit->__get(::Substate_ChartType_obj::curSelected));
HXLINE( 162)				::flixel::tweens::FlxTween_obj::tween(this->boombox, ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),1)
            					->setFixed(1,HX_("scale.x",94,2d,07,65),((Float)0.5))
            					->setFixed(2,HX_("scale.y",95,2d,07,65),((Float)0.5))),((Float)1.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 164)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)2.1), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
            		}
HXLINE( 173)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_1(_gthis)),null());
            	}


void Substate_ChartType_obj::changeItem(::hx::Null< int >  __o_huh){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_52762598c0ded1ee_196_changeItem)
HXLINE( 197)			spr->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 199)			if ((spr->ID == ::Substate_ChartType_obj::curSelected)) {
HXLINE( 201)				spr->animation->play(HX_("select",fc,1a,33,6a),null(),null(),null());
            			}
HXLINE( 204)			spr->updateHitbox();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_52762598c0ded1ee_187_changeItem)
HXLINE( 188)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Substate_ChartType >();
HXDLIN( 188)		::Substate_ChartType_obj::curSelected = (::Substate_ChartType_obj::curSelected + huh);
HXLINE( 190)		if ((::Substate_ChartType_obj::curSelected >= this->menuItems->length)) {
HXLINE( 191)			::Substate_ChartType_obj::curSelected = 0;
            		}
HXLINE( 192)		if ((::Substate_ChartType_obj::curSelected < 0)) {
HXLINE( 193)			::Substate_ChartType_obj::curSelected = (this->menuItems->length - 1);
            		}
HXLINE( 195)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_0()),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Substate_ChartType_obj,changeItem,(void))

int Substate_ChartType_obj::curSelected;


::hx::ObjectPtr< Substate_ChartType_obj > Substate_ChartType_obj::__new() {
	::hx::ObjectPtr< Substate_ChartType_obj > __this = new Substate_ChartType_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Substate_ChartType_obj > Substate_ChartType_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Substate_ChartType_obj *__this = (Substate_ChartType_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Substate_ChartType_obj), true, "Substate_ChartType"));
	*(void **)__this = Substate_ChartType_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Substate_ChartType_obj::Substate_ChartType_obj()
{
}

void Substate_ChartType_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Substate_ChartType);
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(optionShit,"optionShit");
	HX_MARK_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(boombox,"boombox");
	HX_MARK_MEMBER_NAME(checker,"checker");
	HX_MARK_MEMBER_NAME(gradientBar,"gradientBar");
	HX_MARK_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Substate_ChartType_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(optionShit,"optionShit");
	HX_VISIT_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(boombox,"boombox");
	HX_VISIT_MEMBER_NAME(checker,"checker");
	HX_VISIT_MEMBER_NAME(gradientBar,"gradientBar");
	HX_VISIT_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Substate_ChartType_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		if (HX_FIELD_EQ(inName,"boombox") ) { return ::hx::Val( boombox ); }
		if (HX_FIELD_EQ(inName,"checker") ) { return ::hx::Val( checker ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { return ::hx::Val( optionShit ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { return ::hx::Val( gradientBar ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { return ::hx::Val( blackBarThingie ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { return ::hx::Val( selectedSomethin ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Substate_ChartType_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val Substate_ChartType_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boombox") ) { boombox=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checker") ) { checker=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { optionShit=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { gradientBar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { blackBarThingie=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { selectedSomethin=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Substate_ChartType_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Substate_ChartType_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("optionShit",d5,2d,ee,91));
	outFields->push(HX_("selectedSomethin",c8,ec,fb,99));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("boombox",c0,e6,a5,7e));
	outFields->push(HX_("checker",35,b3,24,13));
	outFields->push(HX_("gradientBar",c3,05,20,d3));
	outFields->push(HX_("blackBarThingie",56,00,c2,d2));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Substate_ChartType_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Substate_ChartType_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Substate_ChartType_obj,optionShit),HX_("optionShit",d5,2d,ee,91)},
	{::hx::fsBool,(int)offsetof(Substate_ChartType_obj,selectedSomethin),HX_("selectedSomethin",c8,ec,fb,99)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(Substate_ChartType_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsFloat,(int)offsetof(Substate_ChartType_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Substate_ChartType_obj,boombox),HX_("boombox",c0,e6,a5,7e)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(Substate_ChartType_obj,checker),HX_("checker",35,b3,24,13)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Substate_ChartType_obj,gradientBar),HX_("gradientBar",c3,05,20,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Substate_ChartType_obj,blackBarThingie),HX_("blackBarThingie",56,00,c2,d2)},
	{::hx::fsBool,(int)offsetof(Substate_ChartType_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Substate_ChartType_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Substate_ChartType_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Substate_ChartType_obj_sMemberFields[] = {
	HX_("menuItems",e1,15,e5,5c),
	HX_("optionShit",d5,2d,ee,91),
	HX_("selectedSomethin",c8,ec,fb,99),
	HX_("camFollow",e0,6e,47,22),
	HX_("camLerp",26,66,a1,d2),
	HX_("boombox",c0,e6,a5,7e),
	HX_("checker",35,b3,24,13),
	HX_("gradientBar",c3,05,20,d3),
	HX_("blackBarThingie",56,00,c2,d2),
	HX_("selectable",96,b6,2a,c4),
	HX_("update",09,86,05,87),
	HX_("changeItem",a3,fa,08,20),
	::String(null()) };

static void Substate_ChartType_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Substate_ChartType_obj::curSelected,"curSelected");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Substate_ChartType_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Substate_ChartType_obj::curSelected,"curSelected");
};

#endif

::hx::Class Substate_ChartType_obj::__mClass;

static ::String Substate_ChartType_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	::String(null())
};

void Substate_ChartType_obj::__register()
{
	Substate_ChartType_obj _hx_dummy;
	Substate_ChartType_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Substate_ChartType",4a,1e,43,6a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Substate_ChartType_obj::__GetStatic;
	__mClass->mSetStaticField = &Substate_ChartType_obj::__SetStatic;
	__mClass->mMarkFunc = Substate_ChartType_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Substate_ChartType_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Substate_ChartType_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Substate_ChartType_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Substate_ChartType_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Substate_ChartType_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Substate_ChartType_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Substate_ChartType_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_52762598c0ded1ee_32_boot)
HXDLIN(  32)		curSelected = 0;
            	}
}


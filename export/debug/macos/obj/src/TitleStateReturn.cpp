// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_TitleStateReturn
#include <TitleStateReturn.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_be72498740e8558b_36_new,"TitleStateReturn","new",0x30d6e07b,"TitleStateReturn.new","TitleStateReturn.hx",36,0xecb40755)
HX_LOCAL_STACK_FRAME(_hx_pos_be72498740e8558b_56_create,"TitleStateReturn","create",0xe4af19c1,"TitleStateReturn.create","TitleStateReturn.hx",56,0xecb40755)
static const int _hx_array_data_73308709_2[] = {
	(int)30,(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,
};
static const int _hx_array_data_73308709_3[] = {
	(int)15,(int)16,(int)17,(int)18,(int)19,(int)20,(int)21,(int)22,(int)23,(int)24,(int)25,(int)26,(int)27,(int)28,(int)29,
};
static const int _hx_array_data_73308709_4[] = {
	(int)16711680,(int)1430062184,(int)-1430316733,
};
HX_LOCAL_STACK_FRAME(_hx_pos_be72498740e8558b_132_update,"TitleStateReturn","update",0xefa538ce,"TitleStateReturn.update","TitleStateReturn.hx",132,0xecb40755)
HX_LOCAL_STACK_FRAME(_hx_pos_be72498740e8558b_189_update,"TitleStateReturn","update",0xefa538ce,"TitleStateReturn.update","TitleStateReturn.hx",189,0xecb40755)
HX_LOCAL_STACK_FRAME(_hx_pos_be72498740e8558b_198_beatHit,"TitleStateReturn","beatHit",0x9721a418,"TitleStateReturn.beatHit","TitleStateReturn.hx",198,0xecb40755)
HX_LOCAL_STACK_FRAME(_hx_pos_be72498740e8558b_38_boot,"TitleStateReturn","boot",0x83468bb7,"TitleStateReturn.boot","TitleStateReturn.hx",38,0xecb40755)

void TitleStateReturn_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_be72498740e8558b_36_new)
HXLINE( 129)		this->transitioning = false;
HXLINE( 126)		this->danceLeft = false;
HXLINE(  51)		this->Timer = ((Float)0);
HXLINE(  49)		this->curWacky = ::Array_obj< ::String >::__new(0);
HXLINE(  41)		this->gradientBar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null())->makeGraphic(::flixel::FlxG_obj::width,1,-5635926,null(),null());
HXLINE(  36)		super::__construct(TransIn,TransOut);
            	}

Dynamic TitleStateReturn_obj::__CreateEmpty() { return new TitleStateReturn_obj; }

void *TitleStateReturn_obj::_hx_vtable = 0;

Dynamic TitleStateReturn_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TitleStateReturn_obj > _hx_result = new TitleStateReturn_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TitleStateReturn_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x491239c9) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x491239c9;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void TitleStateReturn_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_be72498740e8558b_56_create)
HXLINE(  57)		this->super::create();
HXLINE(  59)		this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(  60)		this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(  63)		::DiscordClient_obj::changePresence(HX_("In the Title Screen",be,e8,ca,d1),null(),null(),null(),null());
HXLINE(  66)		::Conductor_obj::changeBPM(( (Float)(102) ));
HXLINE(  67)		this->persistentUpdate = true;
HXLINE(  69)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE(  73)		this->add(bg);
HXLINE(  75)		this->logoBl =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,142,-17,null());
HXLINE(  76)		 ::flixel::FlxSprite _hx_tmp = this->logoBl;
HXDLIN(  76)		::String library = null();
HXDLIN(  76)		::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("logoBumpin",26,cb,02,ab)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(  76)		_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("logoBumpin",26,cb,02,ab)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE(  77)		this->logoBl->set_antialiasing(true);
HXLINE(  78)		this->logoBl->animation->addByPrefix(HX_("bump",f6,0f,20,41),HX_("logo bumpin",70,a1,0b,72),24,null(),null(),null());
HXLINE(  79)		this->logoBl->animation->play(HX_("bump",f6,0f,20,41),null(),null(),null());
HXLINE(  80)		this->logoBl->scale->set(((Float)0.6),((Float)0.6));
HXLINE(  81)		this->logoBl->updateHitbox();
HXLINE(  85)		this->gfDance =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.35)),(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)1.2)),null());
HXLINE(  86)		 ::flixel::FlxSprite _hx_tmp2 = this->gfDance;
HXDLIN(  86)		::String library1 = null();
HXDLIN(  86)		::String _hx_tmp3 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("gfDanceTitle",64,64,d2,7b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1);
HXDLIN(  86)		_hx_tmp2->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp3,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("gfDanceTitle",64,64,d2,7b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library1)));
HXLINE(  87)		this->gfDance->animation->addByIndices(HX_("danceLeft",da,cc,f9,df),HX_("gfDance",94,88,3a,eb),::Array_obj< int >::fromData( _hx_array_data_73308709_2,16),HX_("",00,00,00,00),24,false,null(),null());
HXLINE(  88)		this->gfDance->animation->addByIndices(HX_("danceRight",a9,7f,a6,91),HX_("gfDance",94,88,3a,eb),::Array_obj< int >::fromData( _hx_array_data_73308709_3,15),HX_("",00,00,00,00),24,false,null(),null());
HXLINE(  89)		this->gfDance->set_antialiasing(true);
HXLINE(  90)		this->add(this->gfDance);
HXLINE(  92)		 ::flixel::FlxSprite logo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  92)		::String library2 = null();
HXDLIN(  92)		 ::flixel::FlxSprite logo1 = logo->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("logo",6b,9f,b7,47)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE(  93)		logo1->screenCenter(null());
HXLINE(  94)		logo1->set_antialiasing(true);
HXLINE( 100)		this->gradientBar = ::flixel::util::FlxGradient_obj::createGradientFlxSprite(::Math_obj::round(( (Float)(::flixel::FlxG_obj::width) )),512,::Array_obj< int >::fromData( _hx_array_data_73308709_4,3),1,90,true);
HXLINE( 101)		 ::flixel::FlxSprite _hx_tmp4 = this->gradientBar;
HXDLIN( 101)		int _hx_tmp5 = ::flixel::FlxG_obj::height;
HXDLIN( 101)		_hx_tmp4->set_y((( (Float)(_hx_tmp5) ) - this->gradientBar->get_height()));
HXLINE( 102)		this->gradientBar->scale->set_y(( (Float)(0) ));
HXLINE( 103)		this->gradientBar->updateHitbox();
HXLINE( 104)		this->add(this->gradientBar);
HXLINE( 105)		::flixel::tweens::FlxTween_obj::tween(this->gradientBar, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("scale.y",95,2d,07,65),((Float)1.3))),4, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
HXLINE( 107)		this->add(this->logoBl);
HXLINE( 109)		this->titleText =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,100,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.8)),null());
HXLINE( 110)		 ::flixel::FlxSprite _hx_tmp6 = this->titleText;
HXDLIN( 110)		::String library3 = null();
HXDLIN( 110)		::String _hx_tmp7 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("titleEnter",60,80,6b,82)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library3);
HXDLIN( 110)		_hx_tmp6->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp7,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("titleEnter",60,80,6b,82)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library3)));
HXLINE( 111)		this->titleText->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Press Enter to Begin",e9,79,2c,83),24,null(),null(),null());
HXLINE( 112)		this->titleText->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("ENTER PRESSED",5a,47,9f,63),24,null(),null(),null());
HXLINE( 113)		this->titleText->set_antialiasing(true);
HXLINE( 114)		this->titleText->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 115)		this->titleText->updateHitbox();
HXLINE( 117)		this->add(this->titleText);
HXLINE( 119)		::flixel::FlxG_obj::camera->flash(-1,4,null(),null());
HXLINE( 120)		::flixel::tweens::FlxTween_obj::tween(this->logoBl, ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("x",78,00,00,00),-165)
            			->setFixed(1,HX_("y",79,00,00,00),-125)
            			->setFixed(2,HX_("scale.x",94,2d,07,65),((Float)0.45))
            			->setFixed(3,HX_("scale.y",95,2d,07,65),((Float)0.45))),((Float)1.3), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)1.3))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
HXLINE( 121)		::flixel::tweens::FlxTween_obj::tween(this->gfDance, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),20)),((Float)2.3), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.8))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
            	}


void TitleStateReturn_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_be72498740e8558b_132_update)
HXLINE( 133)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 134)			::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
            		}
HXLINE( 137)		 ::TitleStateReturn _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 137)		_hx_tmp->Timer = (_hx_tmp->Timer + 1);
HXLINE( 138)		{
HXLINE( 138)			 ::flixel::math::FlxPoint _g = this->gradientBar->scale;
HXDLIN( 138)			_g->set_y((_g->y + ((::Math_obj::sin((this->Timer / ( (Float)(10) ))) * ((Float)0.001)) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 139)		this->gradientBar->updateHitbox();
HXLINE( 140)		 ::flixel::FlxSprite _hx_tmp1 = this->gradientBar;
HXDLIN( 140)		int _hx_tmp2 = ::flixel::FlxG_obj::height;
HXDLIN( 140)		_hx_tmp1->set_y((( (Float)(_hx_tmp2) ) - this->gradientBar->get_height()));
HXLINE( 143)		this->logoBl->set_angle(((::Math_obj::sin((this->Timer / ( (Float)(270) ))) * ( (Float)(5) )) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))));
HXLINE( 145)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 145)		bool pressedEnter = _this->keyManager->checkStatus(13,_this->status);
HXLINE( 157)		 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
HXLINE( 159)		if (::hx::IsNotNull( gamepad )) {
HXLINE( 161)			 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this = gamepad->justPressed;
HXDLIN( 161)			int id = 7;
HXDLIN( 161)			 ::flixel::input::gamepad::FlxGamepad _this1 = _this->gamepad;
HXDLIN( 161)			int Status = _this->status;
HXDLIN( 161)			bool _hx_tmp;
HXDLIN( 161)			switch((int)(id)){
            				case (int)-2: {
HXLINE( 161)					_hx_tmp = _this1->anyButton(Status);
            				}
            				break;
            				case (int)-1: {
HXLINE( 161)					_hx_tmp = !(_this1->anyButton(Status));
            				}
            				break;
            				default:{
HXLINE( 161)					int RawID = _this1->mapping->getRawID(id);
HXDLIN( 161)					 ::flixel::input::gamepad::FlxGamepadButton button = _this1->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 161)					if (::hx::IsNotNull( button )) {
HXLINE( 161)						_hx_tmp = button->hasState(Status);
            					}
            					else {
HXLINE( 161)						_hx_tmp = false;
            					}
            				}
            			}
HXDLIN( 161)			if (_hx_tmp) {
HXLINE( 162)				pressedEnter = true;
            			}
            		}
HXLINE( 170)		bool _hx_tmp3;
HXDLIN( 170)		if (pressedEnter) {
HXLINE( 170)			_hx_tmp3 = !(this->transitioning);
            		}
            		else {
HXLINE( 170)			_hx_tmp3 = false;
            		}
HXDLIN( 170)		if (_hx_tmp3) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_be72498740e8558b_189_update)
HXLINE( 189)				 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 189)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 189)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 173)			this->titleText->animation->play(HX_("press",83,53,88,c8),null(),null(),null());
HXLINE( 175)			::flixel::FlxG_obj::camera->flash(-1,1,null(),true);
HXLINE( 176)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 176)			::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 176)			_hx_tmp->play(_hx_tmp1,((((Float)0.7) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 179)			::DiscordClient_obj::changePresence(HX_("Proceeding to the Main Menu",1e,2f,16,d6),null(),null(),null(),null());
HXLINE( 182)			this->transitioning = true;
HXLINE( 185)			::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),::flixel::FlxG_obj::height)),((Float)1.6), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.4))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 187)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)1.7), ::Dynamic(new _hx_Closure_0()),null());
            		}
HXLINE( 194)		this->super::update(elapsed);
            	}


void TitleStateReturn_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_be72498740e8558b_198_beatHit)
HXLINE( 199)		this->super::beatHit();
HXLINE( 201)		this->logoBl->animation->play(HX_("bump",f6,0f,20,41),null(),null(),null());
HXLINE( 202)		this->danceLeft = !(this->danceLeft);
HXLINE( 204)		if (this->danceLeft) {
HXLINE( 205)			this->gfDance->animation->play(HX_("danceRight",a9,7f,a6,91),null(),null(),null());
            		}
            		else {
HXLINE( 207)			this->gfDance->animation->play(HX_("danceLeft",da,cc,f9,df),null(),null(),null());
            		}
HXLINE( 209)		::flixel::FlxG_obj::log->advanced(this->curBeat,::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());
            	}


bool TitleStateReturn_obj::initialized;


::hx::ObjectPtr< TitleStateReturn_obj > TitleStateReturn_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< TitleStateReturn_obj > __this = new TitleStateReturn_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< TitleStateReturn_obj > TitleStateReturn_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	TitleStateReturn_obj *__this = (TitleStateReturn_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TitleStateReturn_obj), true, "TitleStateReturn"));
	*(void **)__this = TitleStateReturn_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

TitleStateReturn_obj::TitleStateReturn_obj()
{
}

void TitleStateReturn_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TitleStateReturn);
	HX_MARK_MEMBER_NAME(blackScreen,"blackScreen");
	HX_MARK_MEMBER_NAME(gradientBar,"gradientBar");
	HX_MARK_MEMBER_NAME(credGroup,"credGroup");
	HX_MARK_MEMBER_NAME(credTextShit,"credTextShit");
	HX_MARK_MEMBER_NAME(textGroup,"textGroup");
	HX_MARK_MEMBER_NAME(fnfSpr,"fnfSpr");
	HX_MARK_MEMBER_NAME(FNF_Logo,"FNF_Logo");
	HX_MARK_MEMBER_NAME(FNF_EX,"FNF_EX");
	HX_MARK_MEMBER_NAME(curWacky,"curWacky");
	HX_MARK_MEMBER_NAME(Timer,"Timer");
	HX_MARK_MEMBER_NAME(wackyImage,"wackyImage");
	HX_MARK_MEMBER_NAME(logoBl,"logoBl");
	HX_MARK_MEMBER_NAME(gfDance,"gfDance");
	HX_MARK_MEMBER_NAME(danceLeft,"danceLeft");
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(transitioning,"transitioning");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TitleStateReturn_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(blackScreen,"blackScreen");
	HX_VISIT_MEMBER_NAME(gradientBar,"gradientBar");
	HX_VISIT_MEMBER_NAME(credGroup,"credGroup");
	HX_VISIT_MEMBER_NAME(credTextShit,"credTextShit");
	HX_VISIT_MEMBER_NAME(textGroup,"textGroup");
	HX_VISIT_MEMBER_NAME(fnfSpr,"fnfSpr");
	HX_VISIT_MEMBER_NAME(FNF_Logo,"FNF_Logo");
	HX_VISIT_MEMBER_NAME(FNF_EX,"FNF_EX");
	HX_VISIT_MEMBER_NAME(curWacky,"curWacky");
	HX_VISIT_MEMBER_NAME(Timer,"Timer");
	HX_VISIT_MEMBER_NAME(wackyImage,"wackyImage");
	HX_VISIT_MEMBER_NAME(logoBl,"logoBl");
	HX_VISIT_MEMBER_NAME(gfDance,"gfDance");
	HX_VISIT_MEMBER_NAME(danceLeft,"danceLeft");
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(transitioning,"transitioning");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TitleStateReturn_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"Timer") ) { return ::hx::Val( Timer ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fnfSpr") ) { return ::hx::Val( fnfSpr ); }
		if (HX_FIELD_EQ(inName,"FNF_EX") ) { return ::hx::Val( FNF_EX ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"logoBl") ) { return ::hx::Val( logoBl ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfDance") ) { return ::hx::Val( gfDance ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"FNF_Logo") ) { return ::hx::Val( FNF_Logo ); }
		if (HX_FIELD_EQ(inName,"curWacky") ) { return ::hx::Val( curWacky ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"credGroup") ) { return ::hx::Val( credGroup ); }
		if (HX_FIELD_EQ(inName,"textGroup") ) { return ::hx::Val( textGroup ); }
		if (HX_FIELD_EQ(inName,"danceLeft") ) { return ::hx::Val( danceLeft ); }
		if (HX_FIELD_EQ(inName,"titleText") ) { return ::hx::Val( titleText ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wackyImage") ) { return ::hx::Val( wackyImage ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blackScreen") ) { return ::hx::Val( blackScreen ); }
		if (HX_FIELD_EQ(inName,"gradientBar") ) { return ::hx::Val( gradientBar ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"credTextShit") ) { return ::hx::Val( credTextShit ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transitioning") ) { return ::hx::Val( transitioning ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TitleStateReturn_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { outValue = ( initialized ); return true; }
	}
	return false;
}

::hx::Val TitleStateReturn_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"Timer") ) { Timer=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fnfSpr") ) { fnfSpr=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FNF_EX") ) { FNF_EX=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"logoBl") ) { logoBl=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfDance") ) { gfDance=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"FNF_Logo") ) { FNF_Logo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curWacky") ) { curWacky=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"credGroup") ) { credGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textGroup") ) { textGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"danceLeft") ) { danceLeft=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wackyImage") ) { wackyImage=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blackScreen") ) { blackScreen=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gradientBar") ) { gradientBar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"credTextShit") ) { credTextShit=inValue.Cast<  ::Alphabet >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transitioning") ) { transitioning=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TitleStateReturn_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void TitleStateReturn_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("blackScreen",8b,de,f4,5d));
	outFields->push(HX_("gradientBar",c3,05,20,d3));
	outFields->push(HX_("credGroup",91,7f,9c,9c));
	outFields->push(HX_("credTextShit",fb,55,c1,3c));
	outFields->push(HX_("textGroup",52,43,e2,32));
	outFields->push(HX_("fnfSpr",b7,bd,25,62));
	outFields->push(HX_("FNF_Logo",ac,8c,f2,31));
	outFields->push(HX_("FNF_EX",54,c3,c9,14));
	outFields->push(HX_("curWacky",67,31,c6,0c));
	outFields->push(HX_("Timer",a5,2f,63,a3));
	outFields->push(HX_("wackyImage",d4,7e,d6,81));
	outFields->push(HX_("logoBl",15,ca,6e,5c));
	outFields->push(HX_("gfDance",94,88,3a,eb));
	outFields->push(HX_("danceLeft",da,cc,f9,df));
	outFields->push(HX_("titleText",65,ba,a4,70));
	outFields->push(HX_("transitioning",6d,6a,93,94));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TitleStateReturn_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleStateReturn_obj,blackScreen),HX_("blackScreen",8b,de,f4,5d)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleStateReturn_obj,gradientBar),HX_("gradientBar",c3,05,20,d3)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(TitleStateReturn_obj,credGroup),HX_("credGroup",91,7f,9c,9c)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(TitleStateReturn_obj,credTextShit),HX_("credTextShit",fb,55,c1,3c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(TitleStateReturn_obj,textGroup),HX_("textGroup",52,43,e2,32)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleStateReturn_obj,fnfSpr),HX_("fnfSpr",b7,bd,25,62)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleStateReturn_obj,FNF_Logo),HX_("FNF_Logo",ac,8c,f2,31)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleStateReturn_obj,FNF_EX),HX_("FNF_EX",54,c3,c9,14)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(TitleStateReturn_obj,curWacky),HX_("curWacky",67,31,c6,0c)},
	{::hx::fsFloat,(int)offsetof(TitleStateReturn_obj,Timer),HX_("Timer",a5,2f,63,a3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleStateReturn_obj,wackyImage),HX_("wackyImage",d4,7e,d6,81)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleStateReturn_obj,logoBl),HX_("logoBl",15,ca,6e,5c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleStateReturn_obj,gfDance),HX_("gfDance",94,88,3a,eb)},
	{::hx::fsBool,(int)offsetof(TitleStateReturn_obj,danceLeft),HX_("danceLeft",da,cc,f9,df)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleStateReturn_obj,titleText),HX_("titleText",65,ba,a4,70)},
	{::hx::fsBool,(int)offsetof(TitleStateReturn_obj,transitioning),HX_("transitioning",6d,6a,93,94)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TitleStateReturn_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &TitleStateReturn_obj::initialized,HX_("initialized",14,f5,0f,37)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TitleStateReturn_obj_sMemberFields[] = {
	HX_("blackScreen",8b,de,f4,5d),
	HX_("gradientBar",c3,05,20,d3),
	HX_("credGroup",91,7f,9c,9c),
	HX_("credTextShit",fb,55,c1,3c),
	HX_("textGroup",52,43,e2,32),
	HX_("fnfSpr",b7,bd,25,62),
	HX_("FNF_Logo",ac,8c,f2,31),
	HX_("FNF_EX",54,c3,c9,14),
	HX_("curWacky",67,31,c6,0c),
	HX_("Timer",a5,2f,63,a3),
	HX_("wackyImage",d4,7e,d6,81),
	HX_("create",fc,66,0f,7c),
	HX_("logoBl",15,ca,6e,5c),
	HX_("gfDance",94,88,3a,eb),
	HX_("danceLeft",da,cc,f9,df),
	HX_("titleText",65,ba,a4,70),
	HX_("transitioning",6d,6a,93,94),
	HX_("update",09,86,05,87),
	HX_("beatHit",7d,ea,04,74),
	::String(null()) };

static void TitleStateReturn_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TitleStateReturn_obj::initialized,"initialized");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TitleStateReturn_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TitleStateReturn_obj::initialized,"initialized");
};

#endif

::hx::Class TitleStateReturn_obj::__mClass;

static ::String TitleStateReturn_obj_sStaticFields[] = {
	HX_("initialized",14,f5,0f,37),
	::String(null())
};

void TitleStateReturn_obj::__register()
{
	TitleStateReturn_obj _hx_dummy;
	TitleStateReturn_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TitleStateReturn",09,87,30,73);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TitleStateReturn_obj::__GetStatic;
	__mClass->mSetStaticField = &TitleStateReturn_obj::__SetStatic;
	__mClass->mMarkFunc = TitleStateReturn_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TitleStateReturn_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TitleStateReturn_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TitleStateReturn_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TitleStateReturn_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TitleStateReturn_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TitleStateReturn_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TitleStateReturn_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_be72498740e8558b_38_boot)
HXDLIN(  38)		initialized = false;
            	}
}


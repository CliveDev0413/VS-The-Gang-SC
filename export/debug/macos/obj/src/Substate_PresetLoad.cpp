// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_Marathon_Substate
#include <Marathon_Substate.h>
#endif
#ifndef INCLUDED_MenuMarathon
#include <MenuMarathon.h>
#endif
#ifndef INCLUDED_MenuModifiers
#include <MenuModifiers.h>
#endif
#ifndef INCLUDED_ModifierVariables
#include <ModifierVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Substate_Preset
#include <Substate_Preset.h>
#endif
#ifndef INCLUDED_Substate_PresetLoad
#include <Substate_PresetLoad.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0c3d5fbb49dbe01a_75_new,"Substate_PresetLoad","new",0xee03dfc5,"Substate_PresetLoad.new","Substate_PresetLoad.hx",75,0xd1ffff4b)
HX_DEFINE_STACK_FRAME(_hx_pos_0c3d5fbb49dbe01a_28_new,"Substate_PresetLoad","new",0xee03dfc5,"Substate_PresetLoad.new","Substate_PresetLoad.hx",28,0xd1ffff4b)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3d5fbb49dbe01a_82_update,"Substate_PresetLoad","update",0x744b63c4,"Substate_PresetLoad.update","Substate_PresetLoad.hx",82,0xd1ffff4b)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3d5fbb49dbe01a_108_update,"Substate_PresetLoad","update",0x744b63c4,"Substate_PresetLoad.update","Substate_PresetLoad.hx",108,0xd1ffff4b)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3d5fbb49dbe01a_134_update,"Substate_PresetLoad","update",0x744b63c4,"Substate_PresetLoad.update","Substate_PresetLoad.hx",134,0xd1ffff4b)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3d5fbb49dbe01a_143_changeSelection,"Substate_PresetLoad","changeSelection",0xcab1aba1,"Substate_PresetLoad.changeSelection","Substate_PresetLoad.hx",143,0xd1ffff4b)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3d5fbb49dbe01a_30_boot,"Substate_PresetLoad","boot",0x4d78ed2d,"Substate_PresetLoad.boot","Substate_PresetLoad.hx",30,0xd1ffff4b)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3d5fbb49dbe01a_42_boot,"Substate_PresetLoad","boot",0x4d78ed2d,"Substate_PresetLoad.boot","Substate_PresetLoad.hx",42,0xd1ffff4b)

void Substate_PresetLoad_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Substate_PresetLoad,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_0c3d5fbb49dbe01a_75_new)
HXLINE(  75)			_gthis->selectable = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_0c3d5fbb49dbe01a_28_new)
HXLINE(  79)		this->selectable = false;
HXLINE(  36)		this->blackBarThingie =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE(  34)		this->camLerp = ((Float)0.16);
HXLINE(  32)		this->goingBack = false;
HXLINE(  44)		 ::Substate_PresetLoad _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  46)		super::__construct();
HXLINE(  48)		if ((::Substate_PresetLoad_obj::coming == HX_("Modifiers",1c,f1,ea,79))) {
HXLINE(  49)			this->initPresets = ::Substate_Preset_obj::presets;
            		}
            		else {
HXLINE(  50)			if ((::Substate_PresetLoad_obj::coming == HX_("Marathon",36,c5,57,b1))) {
HXLINE(  51)				this->initPresets = ::Marathon_Substate_obj::presets;
            			}
            		}
HXLINE(  53)		this->add(this->blackBarThingie);
HXLINE(  54)		this->blackBarThingie->scrollFactor->set(null(),null());
HXLINE(  55)		this->blackBarThingie->scale->set_y(( (Float)(750) ));
HXLINE(  56)		::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("scale.x",94,2d,07,65),700)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
HXLINE(  58)		this->grpPresets =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  59)		this->add(this->grpPresets);
HXLINE(  61)		{
HXLINE(  61)			int _g = 0;
HXDLIN(  61)			int _g1 = this->initPresets->get_length();
HXDLIN(  61)			while((_g < _g1)){
HXLINE(  61)				_g = (_g + 1);
HXDLIN(  61)				int i = (_g - 1);
HXLINE(  63)				this->presetText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),( (::String)(this->initPresets->__get(i)) ),true,false);
HXLINE(  64)				this->presetText->itemType = HX_("Vertical",96,78,c7,43);
HXLINE(  65)				this->presetText->targetY = ( (Float)(i) );
HXLINE(  66)				this->presetText->scrollFactor->set(null(),null());
HXLINE(  67)				this->grpPresets->add(this->presetText).StaticCast<  ::Alphabet >();
HXLINE(  68)				this->presetText->set_alpha(( (Float)(0) ));
HXLINE(  69)				this->presetText->set_x(( (Float)(308) ));
HXLINE(  70)				::flixel::tweens::FlxTween_obj::tween(this->presetText, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.7), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
            			}
            		}
HXLINE(  73)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}

Dynamic Substate_PresetLoad_obj::__CreateEmpty() { return new Substate_PresetLoad_obj; }

void *Substate_PresetLoad_obj::_hx_vtable = 0;

Dynamic Substate_PresetLoad_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Substate_PresetLoad_obj > _hx_result = new Substate_PresetLoad_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Substate_PresetLoad_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x63681e93) {
		if (inClassId<=(int)0x62817b24) {
			if (inClassId<=(int)0x5661ffbf) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x5661ffbf;
			} else {
				return inClassId==(int)0x62817b24;
			}
		} else {
			return inClassId==(int)0x63681e93;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void Substate_PresetLoad_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_0c3d5fbb49dbe01a_82_update)
HXLINE(  83)		this->super::update(elapsed);
HXLINE(  85)		 ::flixel::FlxSprite _hx_tmp = this->blackBarThingie;
HXDLIN(  85)		_hx_tmp->set_y((( (Float)(360) ) - (this->blackBarThingie->get_height() / ( (Float)(2) ))));
HXLINE(  86)		 ::flixel::FlxSprite _hx_tmp1 = this->blackBarThingie;
HXDLIN(  86)		_hx_tmp1->set_x((( (Float)(640) ) - (this->blackBarThingie->get_width() / ( (Float)(2) ))));
HXLINE(  88)		bool _hx_tmp2;
HXDLIN(  88)		if (this->selectable) {
HXLINE(  88)			_hx_tmp2 = !(this->goingBack);
            		}
            		else {
HXLINE(  88)			_hx_tmp2 = false;
            		}
HXDLIN(  88)		if (_hx_tmp2) {
HXLINE(  90)			if (::PlayerSettings_obj::player1->controls->_upP->check()) {
HXLINE(  92)				this->changeSelection(-1);
            			}
HXLINE(  94)			if (::PlayerSettings_obj::player1->controls->_downP->check()) {
HXLINE(  96)				this->changeSelection(1);
            			}
HXLINE(  99)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_0c3d5fbb49dbe01a_108_update)
HXLINE( 109)					::flixel::FlxG_obj::game->_state->closeSubState();
HXLINE( 110)					if ((::Substate_PresetLoad_obj::coming == HX_("Modifiers",1c,f1,ea,79))) {
HXLINE( 111)						 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 111)						_hx_tmp->openSubState( ::Substate_Preset_obj::__alloc( HX_CTX ));
            					}
            					else {
HXLINE( 112)						if ((::Substate_PresetLoad_obj::coming == HX_("Marathon",36,c5,57,b1))) {
HXLINE( 113)							 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 113)							_hx_tmp->openSubState( ::Marathon_Substate_obj::__alloc( HX_CTX ));
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 101)				this->goingBack = true;
HXLINE( 102)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 102)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null());
HXDLIN( 102)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 103)				::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("scale.x",94,2d,07,65),2200)
            					->setFixed(1,HX_("scale.y",95,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 105)				this->grpPresets->kill();
HXLINE( 107)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_0()),null());
            			}
HXLINE( 117)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_0c3d5fbb49dbe01a_134_update)
HXLINE( 135)					{
HXLINE( 135)						 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 135)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 135)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
HXLINE( 136)					::MenuModifiers_obj::substated = false;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 119)				if ((::Substate_PresetLoad_obj::coming == HX_("Modifiers",1c,f1,ea,79))) {
HXLINE( 121)					::ModifierVariables_obj::loadPreset(( (::String)(this->initPresets->__get(::Substate_PresetLoad_obj::curSelected)) ));
HXLINE( 122)					::MenuModifiers_obj::calculateStart();
            				}
            				else {
HXLINE( 124)					if ((::Substate_PresetLoad_obj::coming == HX_("Marathon",36,c5,57,b1))) {
HXLINE( 125)						::MenuMarathon_obj::loadPreset(( (::String)(this->initPresets->__get(::Substate_PresetLoad_obj::curSelected)) ));
            					}
            				}
HXLINE( 127)				this->goingBack = true;
HXLINE( 129)				::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("scale.x",94,2d,07,65),2200)
            					->setFixed(1,HX_("scale.y",95,2d,07,65),750)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 130)				::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("y",79,00,00,00),-720)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 132)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 132)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 132)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 133)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_1()),null());
            			}
            		}
            	}


void Substate_PresetLoad_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_0c3d5fbb49dbe01a_143_changeSelection)
HXLINE( 144)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 144)		::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 144)		_hx_tmp->play(_hx_tmp1,((((Float)0.4) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 146)		 ::Dynamic _hx_tmp2 = ::hx::ClassOf< ::Substate_PresetLoad >();
HXDLIN( 146)		::Substate_PresetLoad_obj::curSelected = (::Substate_PresetLoad_obj::curSelected + change);
HXLINE( 148)		if ((::Substate_PresetLoad_obj::curSelected < 0)) {
HXLINE( 149)			::Substate_PresetLoad_obj::curSelected = (this->initPresets->get_length() - 1);
            		}
HXLINE( 150)		if ((::Substate_PresetLoad_obj::curSelected >= this->initPresets->get_length())) {
HXLINE( 151)			::Substate_PresetLoad_obj::curSelected = 0;
            		}
HXLINE( 155)		int bullShit = 0;
HXLINE( 157)		{
HXLINE( 157)			int _g = 0;
HXDLIN( 157)			::Array< ::Dynamic> _g1 = this->grpPresets->members;
HXDLIN( 157)			while((_g < _g1->length)){
HXLINE( 157)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 157)				_g = (_g + 1);
HXLINE( 159)				item->targetY = ( (Float)((bullShit - ::Substate_PresetLoad_obj::curSelected)) );
HXLINE( 160)				bullShit = (bullShit + 1);
HXLINE( 162)				item->set_alpha(((Float)0.6));
HXLINE( 165)				if ((item->targetY == 0)) {
HXLINE( 167)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Substate_PresetLoad_obj,changeSelection,(void))

int Substate_PresetLoad_obj::curSelected;

::String Substate_PresetLoad_obj::coming;


::hx::ObjectPtr< Substate_PresetLoad_obj > Substate_PresetLoad_obj::__new() {
	::hx::ObjectPtr< Substate_PresetLoad_obj > __this = new Substate_PresetLoad_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Substate_PresetLoad_obj > Substate_PresetLoad_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Substate_PresetLoad_obj *__this = (Substate_PresetLoad_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Substate_PresetLoad_obj), true, "Substate_PresetLoad"));
	*(void **)__this = Substate_PresetLoad_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Substate_PresetLoad_obj::Substate_PresetLoad_obj()
{
}

void Substate_PresetLoad_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Substate_PresetLoad);
	HX_MARK_MEMBER_NAME(goingBack,"goingBack");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_MARK_MEMBER_NAME(initPresets,"initPresets");
	HX_MARK_MEMBER_NAME(grpPresets,"grpPresets");
	HX_MARK_MEMBER_NAME(presetText,"presetText");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Substate_PresetLoad_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(goingBack,"goingBack");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_VISIT_MEMBER_NAME(initPresets,"initPresets");
	HX_VISIT_MEMBER_NAME(grpPresets,"grpPresets");
	HX_VISIT_MEMBER_NAME(presetText,"presetText");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Substate_PresetLoad_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"goingBack") ) { return ::hx::Val( goingBack ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpPresets") ) { return ::hx::Val( grpPresets ); }
		if (HX_FIELD_EQ(inName,"presetText") ) { return ::hx::Val( presetText ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initPresets") ) { return ::hx::Val( initPresets ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { return ::hx::Val( blackBarThingie ); }
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Substate_PresetLoad_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"coming") ) { outValue = ( coming ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val Substate_PresetLoad_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"goingBack") ) { goingBack=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpPresets") ) { grpPresets=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"presetText") ) { presetText=inValue.Cast<  ::Alphabet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initPresets") ) { initPresets=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { blackBarThingie=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Substate_PresetLoad_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"coming") ) { coming=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Substate_PresetLoad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("goingBack",01,e7,bf,2f));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("blackBarThingie",56,00,c2,d2));
	outFields->push(HX_("initPresets",04,af,46,f2));
	outFields->push(HX_("grpPresets",cf,52,b6,5a));
	outFields->push(HX_("presetText",ac,47,7a,b3));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Substate_PresetLoad_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Substate_PresetLoad_obj,goingBack),HX_("goingBack",01,e7,bf,2f)},
	{::hx::fsFloat,(int)offsetof(Substate_PresetLoad_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Substate_PresetLoad_obj,blackBarThingie),HX_("blackBarThingie",56,00,c2,d2)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(Substate_PresetLoad_obj,initPresets),HX_("initPresets",04,af,46,f2)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Substate_PresetLoad_obj,grpPresets),HX_("grpPresets",cf,52,b6,5a)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(Substate_PresetLoad_obj,presetText),HX_("presetText",ac,47,7a,b3)},
	{::hx::fsBool,(int)offsetof(Substate_PresetLoad_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Substate_PresetLoad_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Substate_PresetLoad_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsString,(void *) &Substate_PresetLoad_obj::coming,HX_("coming",41,6b,2b,c7)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Substate_PresetLoad_obj_sMemberFields[] = {
	HX_("goingBack",01,e7,bf,2f),
	HX_("camLerp",26,66,a1,d2),
	HX_("blackBarThingie",56,00,c2,d2),
	HX_("initPresets",04,af,46,f2),
	HX_("grpPresets",cf,52,b6,5a),
	HX_("presetText",ac,47,7a,b3),
	HX_("selectable",96,b6,2a,c4),
	HX_("update",09,86,05,87),
	HX_("changeSelection",bc,98,b5,48),
	::String(null()) };

static void Substate_PresetLoad_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Substate_PresetLoad_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(Substate_PresetLoad_obj::coming,"coming");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Substate_PresetLoad_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Substate_PresetLoad_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(Substate_PresetLoad_obj::coming,"coming");
};

#endif

::hx::Class Substate_PresetLoad_obj::__mClass;

static ::String Substate_PresetLoad_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("coming",41,6b,2b,c7),
	::String(null())
};

void Substate_PresetLoad_obj::__register()
{
	Substate_PresetLoad_obj _hx_dummy;
	Substate_PresetLoad_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Substate_PresetLoad",53,99,c5,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Substate_PresetLoad_obj::__GetStatic;
	__mClass->mSetStaticField = &Substate_PresetLoad_obj::__SetStatic;
	__mClass->mMarkFunc = Substate_PresetLoad_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Substate_PresetLoad_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Substate_PresetLoad_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Substate_PresetLoad_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Substate_PresetLoad_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Substate_PresetLoad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Substate_PresetLoad_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Substate_PresetLoad_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0c3d5fbb49dbe01a_30_boot)
HXDLIN(  30)		curSelected = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0c3d5fbb49dbe01a_42_boot)
HXDLIN(  42)		coming = HX_("",00,00,00,00);
            	}
}


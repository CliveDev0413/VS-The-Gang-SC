// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_PAGE1settings
#include <PAGE1settings.h>
#endif
#ifndef INCLUDED_PAGE2settings
#include <PAGE2settings.h>
#endif
#ifndef INCLUDED_PAGE3settings
#include <PAGE3settings.h>
#endif
#ifndef INCLUDED_PAGE4settings
#include <PAGE4settings.h>
#endif
#ifndef INCLUDED_PAGE5settings
#include <PAGE5settings.h>
#endif
#ifndef INCLUDED_PAGE6settings
#include <PAGE6settings.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_SettingsState
#include <SettingsState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3cd0cac2ad99ba78_32_new,"SettingsState","new",0x931de200,"SettingsState.new","SettingsState.hx",32,0xde385d70)
HX_LOCAL_STACK_FRAME(_hx_pos_3cd0cac2ad99ba78_91_create,"SettingsState","create",0xe9e8195c,"SettingsState.create","SettingsState.hx",91,0xde385d70)
HX_LOCAL_STACK_FRAME(_hx_pos_3cd0cac2ad99ba78_40_create,"SettingsState","create",0xe9e8195c,"SettingsState.create","SettingsState.hx",40,0xde385d70)
static const int _hx_array_data_fa8d220e_4[] = {
	(int)16711680,(int)1435363301,(int)-1427705687,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3cd0cac2ad99ba78_97_startIntro,"SettingsState","startIntro",0xadc9050a,"SettingsState.startIntro","SettingsState.hx",97,0xde385d70)
HX_LOCAL_STACK_FRAME(_hx_pos_3cd0cac2ad99ba78_115_update,"SettingsState","update",0xf4de3869,"SettingsState.update","SettingsState.hx",115,0xde385d70)
HX_LOCAL_STACK_FRAME(_hx_pos_3cd0cac2ad99ba78_37_boot,"SettingsState","boot",0x1f20de92,"SettingsState.boot","SettingsState.hx",37,0xde385d70)

void SettingsState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_3cd0cac2ad99ba78_32_new)
HXLINE(  35)		this->gradientBar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null())->makeGraphic(::flixel::FlxG_obj::width,300,-5635926,null(),null());
HXLINE(  34)		::String library = null();
HXDLIN(  34)		this->checker =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Options_Checker",d4,fd,47,15)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),((Float)0.2),((Float)0.2),true,true,null(),null());
HXLINE(  32)		super::__construct(TransIn,TransOut);
            	}

Dynamic SettingsState_obj::__CreateEmpty() { return new SettingsState_obj; }

void *SettingsState_obj::_hx_vtable = 0;

Dynamic SettingsState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SettingsState_obj > _hx_result = new SettingsState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SettingsState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x74745786 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void SettingsState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::SettingsState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_3cd0cac2ad99ba78_91_create)
HXLINE(  91)			_gthis->startIntro(::SettingsState_obj::page);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_3cd0cac2ad99ba78_40_create)
HXLINE(  39)		 ::SettingsState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  41)		this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(  42)		this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(  44)		if (::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(  46)			::String _hx_switch_0 = ( (::String)(::MainVariables_obj::_variables->__Field(HX_("music",a5,d0,5a,10),::hx::paccDynamic)) );
            			if (  (_hx_switch_0==HX_("classic",12,52,91,69)) ){
HXLINE(  49)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  49)				::String library = null();
HXDLIN(  49)				::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN(  49)				_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE(  50)				::Conductor_obj::changeBPM(( (Float)(102) ));
HXLINE(  48)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("funky",ad,f7,88,08)) ){
HXLINE(  52)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  52)				::String library = null();
HXDLIN(  52)				::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("funkyMenu",ec,43,55,b5)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN(  52)				_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE(  53)				::Conductor_obj::changeBPM(( (Float)(140) ));
HXLINE(  51)				goto _hx_goto_1;
            			}
            			_hx_goto_1:;
            		}
HXLINE(  57)		this->super::create();
HXLINE(  59)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  61)		 ::flixel::FlxSprite menuBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  61)		::String library = null();
HXDLIN(  61)		 ::flixel::FlxSprite menuBG1 = menuBG->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("oBG",f4,73,54,00)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  62)		menuBG1->set_color(-1412611);
HXLINE(  63)		menuBG1->setGraphicSize(::Std_obj::_hx_int((menuBG1->get_width() * ((Float)1.1))),null());
HXLINE(  64)		menuBG1->updateHitbox();
HXLINE(  65)		menuBG1->screenCenter(null());
HXLINE(  66)		menuBG1->set_antialiasing(true);
HXLINE(  67)		menuBG1->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  68)		menuBG1->scrollFactor->set_y(((Float)0.015));
HXLINE(  69)		this->add(menuBG1);
HXLINE(  71)		this->gradientBar = ::flixel::util::FlxGradient_obj::createGradientFlxSprite(::Math_obj::round(( (Float)(::flixel::FlxG_obj::width) )),512,::Array_obj< int >::fromData( _hx_array_data_fa8d220e_4,3),1,90,true);
HXLINE(  72)		 ::flixel::FlxSprite _hx_tmp = this->gradientBar;
HXDLIN(  72)		int _hx_tmp1 = ::flixel::FlxG_obj::height;
HXDLIN(  72)		_hx_tmp->set_y((( (Float)(_hx_tmp1) ) - this->gradientBar->get_height()));
HXLINE(  73)		this->add(this->gradientBar);
HXLINE(  74)		this->gradientBar->scrollFactor->set(0,0);
HXLINE(  76)		this->add(this->checker);
HXLINE(  77)		this->checker->scrollFactor->set(0,((Float)0.07));
HXLINE(  79)		 ::flixel::FlxSprite side =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,null(),null());
HXDLIN(  79)		::String library1 = null();
HXDLIN(  79)		 ::flixel::FlxSprite side1 = side->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Options_Side",98,f9,84,e2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE(  80)		side1->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  81)		side1->scrollFactor->set_y(( (Float)(0) ));
HXLINE(  82)		side1->set_antialiasing(true);
HXLINE(  83)		this->add(side1);
HXLINE(  84)		side1->set_x(( (Float)(0) ));
HXLINE(  86)		::flixel::FlxG_obj::camera->set_zoom(( (Float)(3) ));
HXLINE(  87)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),1)),((Float)1.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
HXLINE(  89)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.75), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


void SettingsState_obj::startIntro(int page){
            	HX_GC_STACKFRAME(&_hx_pos_3cd0cac2ad99ba78_97_startIntro)
HXDLIN(  97)		switch((int)(page)){
            			case (int)0: {
HXLINE( 100)				 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 100)				_hx_tmp->openSubState( ::PAGE1settings_obj::__alloc( HX_CTX ));
            			}
            			break;
            			case (int)1: {
HXLINE( 102)				 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 102)				_hx_tmp->openSubState( ::PAGE2settings_obj::__alloc( HX_CTX ));
            			}
            			break;
            			case (int)2: {
HXLINE( 104)				 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 104)				_hx_tmp->openSubState( ::PAGE3settings_obj::__alloc( HX_CTX ));
            			}
            			break;
            			case (int)3: {
HXLINE( 106)				 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 106)				_hx_tmp->openSubState( ::PAGE4settings_obj::__alloc( HX_CTX ));
            			}
            			break;
            			case (int)4: {
HXLINE( 108)				 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 108)				_hx_tmp->openSubState( ::PAGE5settings_obj::__alloc( HX_CTX ));
            			}
            			break;
            			case (int)5: {
HXLINE( 110)				 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 110)				_hx_tmp->openSubState( ::PAGE6settings_obj::__alloc( HX_CTX ));
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SettingsState_obj,startIntro,(void))

void SettingsState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_3cd0cac2ad99ba78_115_update)
HXLINE( 116)		{
HXLINE( 116)			 ::flixel::addons::display::FlxBackdrop _g = this->checker;
HXDLIN( 116)			_g->set_x((_g->x - (((Float)0.21) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 117)		{
HXLINE( 117)			 ::flixel::addons::display::FlxBackdrop _g1 = this->checker;
HXDLIN( 117)			_g1->set_y((_g1->y - (((Float)0.51) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 119)		if ((::SettingsState_obj::page < 0)) {
HXLINE( 120)			::SettingsState_obj::page = 5;
            		}
HXLINE( 121)		if ((::SettingsState_obj::page > 5)) {
HXLINE( 122)			::SettingsState_obj::page = 0;
            		}
HXLINE( 124)		this->super::update(elapsed);
            	}


int SettingsState_obj::page;


::hx::ObjectPtr< SettingsState_obj > SettingsState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< SettingsState_obj > __this = new SettingsState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< SettingsState_obj > SettingsState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	SettingsState_obj *__this = (SettingsState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SettingsState_obj), true, "SettingsState"));
	*(void **)__this = SettingsState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

SettingsState_obj::SettingsState_obj()
{
}

void SettingsState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SettingsState);
	HX_MARK_MEMBER_NAME(checker,"checker");
	HX_MARK_MEMBER_NAME(gradientBar,"gradientBar");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SettingsState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(checker,"checker");
	HX_VISIT_MEMBER_NAME(gradientBar,"gradientBar");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SettingsState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { return ::hx::Val( checker ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"startIntro") ) { return ::hx::Val( startIntro_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { return ::hx::Val( gradientBar ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SettingsState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"page") ) { outValue = ( page ); return true; }
	}
	return false;
}

::hx::Val SettingsState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { checker=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { gradientBar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SettingsState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"page") ) { page=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void SettingsState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("checker",35,b3,24,13));
	outFields->push(HX_("gradientBar",c3,05,20,d3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SettingsState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(SettingsState_obj,checker),HX_("checker",35,b3,24,13)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(SettingsState_obj,gradientBar),HX_("gradientBar",c3,05,20,d3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo SettingsState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &SettingsState_obj::page,HX_("page",4f,da,51,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String SettingsState_obj_sMemberFields[] = {
	HX_("checker",35,b3,24,13),
	HX_("gradientBar",c3,05,20,d3),
	HX_("create",fc,66,0f,7c),
	HX_("startIntro",aa,a2,37,da),
	HX_("update",09,86,05,87),
	::String(null()) };

static void SettingsState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SettingsState_obj::page,"page");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SettingsState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SettingsState_obj::page,"page");
};

#endif

::hx::Class SettingsState_obj::__mClass;

static ::String SettingsState_obj_sStaticFields[] = {
	HX_("page",4f,da,51,4a),
	::String(null())
};

void SettingsState_obj::__register()
{
	SettingsState_obj _hx_dummy;
	SettingsState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("SettingsState",0e,22,8d,fa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SettingsState_obj::__GetStatic;
	__mClass->mSetStaticField = &SettingsState_obj::__SetStatic;
	__mClass->mMarkFunc = SettingsState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SettingsState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SettingsState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SettingsState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SettingsState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SettingsState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SettingsState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SettingsState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3cd0cac2ad99ba78_37_boot)
HXDLIN(  37)		page = 0;
            	}
}


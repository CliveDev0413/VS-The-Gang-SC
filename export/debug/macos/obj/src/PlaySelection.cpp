// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_MenuEndless
#include <MenuEndless.h>
#endif
#ifndef INCLUDED_MenuFreeplay
#include <MenuFreeplay.h>
#endif
#ifndef INCLUDED_MenuMarathon
#include <MenuMarathon.h>
#endif
#ifndef INCLUDED_MenuModifiers
#include <MenuModifiers.h>
#endif
#ifndef INCLUDED_MenuWeek
#include <MenuWeek.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlaySelection
#include <PlaySelection.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_84d83e7a0a16d5e6_28_new,"PlaySelection","new",0x97dde88a,"PlaySelection.new","PlaySelection.hx",28,0x7a5df626)
static const ::String _hx_array_data_70509b98_1[] = {
	HX_("week",f4,5f,f5,4e),HX_("freeplay",a0,90,86,22),HX_("marathon",16,09,a6,d7),HX_("endless",b4,a0,fb,3e),HX_("modifier",57,db,c7,16),
};
HX_LOCAL_STACK_FRAME(_hx_pos_84d83e7a0a16d5e6_129_create,"PlaySelection","create",0xafa74512,"PlaySelection.create","PlaySelection.hx",129,0x7a5df626)
HX_LOCAL_STACK_FRAME(_hx_pos_84d83e7a0a16d5e6_45_create,"PlaySelection","create",0xafa74512,"PlaySelection.create","PlaySelection.hx",45,0x7a5df626)
static const int _hx_array_data_70509b98_6[] = {
	(int)16711680,(int)1442825313,(int)-1426325623,
};
HX_LOCAL_STACK_FRAME(_hx_pos_84d83e7a0a16d5e6_144_update,"PlaySelection","update",0xba9d641f,"PlaySelection.update","PlaySelection.hx",144,0x7a5df626)
HX_LOCAL_STACK_FRAME(_hx_pos_84d83e7a0a16d5e6_255_update,"PlaySelection","update",0xba9d641f,"PlaySelection.update","PlaySelection.hx",255,0x7a5df626)
HX_LOCAL_STACK_FRAME(_hx_pos_84d83e7a0a16d5e6_137_update,"PlaySelection","update",0xba9d641f,"PlaySelection.update","PlaySelection.hx",137,0x7a5df626)
HX_LOCAL_STACK_FRAME(_hx_pos_84d83e7a0a16d5e6_211_update,"PlaySelection","update",0xba9d641f,"PlaySelection.update","PlaySelection.hx",211,0x7a5df626)
HX_LOCAL_STACK_FRAME(_hx_pos_84d83e7a0a16d5e6_217_update,"PlaySelection","update",0xba9d641f,"PlaySelection.update","PlaySelection.hx",217,0x7a5df626)
HX_LOCAL_STACK_FRAME(_hx_pos_84d83e7a0a16d5e6_201_update,"PlaySelection","update",0xba9d641f,"PlaySelection.update","PlaySelection.hx",201,0x7a5df626)
HX_LOCAL_STACK_FRAME(_hx_pos_84d83e7a0a16d5e6_275_changeItem,"PlaySelection","changeItem",0x0ab89bb9,"PlaySelection.changeItem","PlaySelection.hx",275,0x7a5df626)
HX_LOCAL_STACK_FRAME(_hx_pos_84d83e7a0a16d5e6_266_changeItem,"PlaySelection","changeItem",0x0ab89bb9,"PlaySelection.changeItem","PlaySelection.hx",266,0x7a5df626)
HX_LOCAL_STACK_FRAME(_hx_pos_84d83e7a0a16d5e6_30_boot,"PlaySelection","boot",0x426690c8,"PlaySelection.boot","PlaySelection.hx",30,0x7a5df626)

void PlaySelection_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_84d83e7a0a16d5e6_28_new)
HXLINE( 134)		this->selectable = false;
HXLINE( 133)		this->selectedSomethin = false;
HXLINE(  42)		this->camLerp = ((Float)0.1);
HXLINE(  40)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,null(),null());
HXDLIN(  40)		::String library = null();
HXDLIN(  40)		this->side = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Play_Bottom",16,3d,c1,63)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  39)		this->gradientBar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null())->makeGraphic(::flixel::FlxG_obj::width,300,-5635926,null(),null());
HXLINE(  38)		::String library1 = null();
HXDLIN(  38)		this->checker =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Play_Checker",aa,c2,27,94)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),((Float)0.2),((Float)0.2),true,true,null(),null());
HXLINE(  37)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-89,null(),null());
HXDLIN(  37)		::String library2 = null();
HXDLIN(  37)		this->bg = _hx_tmp1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("pBG_Main",e3,a9,31,08)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE(  34)		this->optionShit = ::Array_obj< ::String >::fromData( _hx_array_data_70509b98_1,5);
HXLINE(  28)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlaySelection_obj::__CreateEmpty() { return new PlaySelection_obj; }

void *PlaySelection_obj::_hx_vtable = 0;

Dynamic PlaySelection_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlaySelection_obj > _hx_result = new PlaySelection_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlaySelection_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4c97b0d8) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x4c97b0d8;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlaySelection_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlaySelection,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_84d83e7a0a16d5e6_129_create)
HXLINE( 129)			_gthis->selectable = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_84d83e7a0a16d5e6_45_create)
HXLINE(  44)		 ::PlaySelection _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  46)		this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(  47)		this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(  49)		if (::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(  51)			::String _hx_switch_0 = ( (::String)(::MainVariables_obj::_variables->__Field(HX_("music",a5,d0,5a,10),::hx::paccDynamic)) );
            			if (  (_hx_switch_0==HX_("classic",12,52,91,69)) ){
HXLINE(  54)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  54)				::String library = null();
HXDLIN(  54)				::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN(  54)				_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE(  55)				::Conductor_obj::changeBPM(( (Float)(102) ));
HXLINE(  53)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("funky",ad,f7,88,08)) ){
HXLINE(  57)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  57)				::String library = null();
HXDLIN(  57)				::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("funkyMenu",ec,43,55,b5)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN(  57)				_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE(  58)				::Conductor_obj::changeBPM(( (Float)(140) ));
HXLINE(  56)				goto _hx_goto_2;
            			}
            			_hx_goto_2:;
            		}
HXLINE(  62)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  64)		this->bg->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  65)		this->bg->scrollFactor->set_y(((Float)0.03));
HXLINE(  66)		 ::flixel::FlxSprite _hx_tmp = this->bg;
HXDLIN(  66)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->bg->get_width() * ((Float)1.1))),null());
HXLINE(  67)		this->bg->updateHitbox();
HXLINE(  68)		this->bg->screenCenter(null());
HXLINE(  69)		this->bg->set_antialiasing(true);
HXLINE(  70)		{
HXLINE(  70)			 ::flixel::FlxSprite _g = this->bg;
HXDLIN(  70)			Float _g1 = _g->y;
HXDLIN(  70)			_g->set_y((_g1 - this->bg->get_height()));
            		}
HXLINE(  71)		this->add(this->bg);
HXLINE(  73)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE(  74)		this->add(this->camFollow);
HXLINE(  76)		this->gradientBar = ::flixel::util::FlxGradient_obj::createGradientFlxSprite(::Math_obj::round(( (Float)(::flixel::FlxG_obj::width) )),512,::Array_obj< int >::fromData( _hx_array_data_70509b98_6,3),1,90,true);
HXLINE(  77)		 ::flixel::FlxSprite _hx_tmp1 = this->gradientBar;
HXDLIN(  77)		int _hx_tmp2 = ::flixel::FlxG_obj::height;
HXDLIN(  77)		_hx_tmp1->set_y((( (Float)(_hx_tmp2) ) - this->gradientBar->get_height()));
HXLINE(  78)		this->add(this->gradientBar);
HXLINE(  79)		this->gradientBar->scrollFactor->set(0,0);
HXLINE(  81)		this->add(this->checker);
HXLINE(  82)		this->checker->scrollFactor->set(0,((Float)0.07));
HXLINE(  84)		this->side->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  85)		this->side->scrollFactor->set_y(((Float)0.1));
HXLINE(  86)		this->side->set_antialiasing(true);
HXLINE(  87)		this->side->screenCenter(null());
HXLINE(  88)		this->add(this->side);
HXLINE(  89)		 ::flixel::FlxSprite _hx_tmp3 = this->side;
HXDLIN(  89)		int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN(  89)		_hx_tmp3->set_y((( (Float)(_hx_tmp4) ) - ((this->side->get_height() / ( (Float)(3) )) * ( (Float)(2) ))));
HXLINE(  91)		this->menuItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  92)		this->add(this->menuItems);
HXLINE(  94)		::String library = null();
HXDLIN(  94)		::String tex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("PlaySelect_Buttons",d2,33,9a,dd)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(  94)		 ::flixel::graphics::frames::FlxAtlasFrames tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(tex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("PlaySelect_Buttons",d2,33,9a,dd)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  96)		{
HXLINE(  96)			int _g2 = 0;
HXDLIN(  96)			int _g3 = this->optionShit->length;
HXDLIN(  96)			while((_g2 < _g3)){
HXLINE(  96)				_g2 = (_g2 + 1);
HXDLIN(  96)				int i = (_g2 - 1);
HXLINE(  98)				 ::flixel::FlxSprite menuItem =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(i * 420),1280,null());
HXLINE(  99)				menuItem->set_frames(tex1);
HXLINE( 100)				menuItem->animation->addByPrefix(HX_("idle",14,a7,b3,45),(this->optionShit->__get(i) + HX_(" idle",34,37,86,b2)),24,null(),null(),null());
HXLINE( 101)				menuItem->animation->addByPrefix(HX_("selected",5b,2a,6d,b1),(this->optionShit->__get(i) + HX_(" select",1c,f3,e1,9c)),24,null(),null(),null());
HXLINE( 102)				menuItem->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 103)				menuItem->ID = i;
HXLINE( 104)				menuItem->set_alpha(( (Float)(0) ));
HXLINE( 105)				::flixel::tweens::FlxTween_obj::tween(menuItem, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)1.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
HXLINE( 106)				this->menuItems->add(menuItem).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 107)				menuItem->scrollFactor->set(1,0);
HXLINE( 108)				menuItem->set_antialiasing(true);
HXLINE( 109)				menuItem->updateHitbox();
            			}
            		}
HXLINE( 112)		::flixel::FlxG_obj::camera->follow(this->camFollow,null(),this->camLerp);
HXLINE( 114)		::flixel::FlxG_obj::camera->set_zoom(( (Float)(3) ));
HXLINE( 115)		 ::flixel::FlxSprite _hx_tmp5 = this->side;
HXDLIN( 115)		_hx_tmp5->set_alpha(this->checker->set_alpha(( (Float)(0) )));
HXLINE( 116)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),1)),((Float)1.2), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
HXLINE( 117)		::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),-30)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 118)		::flixel::tweens::FlxTween_obj::tween(this->side, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 119)		::flixel::tweens::FlxTween_obj::tween(this->checker, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)1.15), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 123)		this->changeItem(null());
HXLINE( 125)		this->super::create();
HXLINE( 127)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)1.1), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


void PlaySelection_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_84d83e7a0a16d5e6_144_update)
HXLINE( 145)			Float a = spr->scale->x;
HXDLIN( 145)			Float a1 = spr->scale->y;
HXDLIN( 145)			spr->scale->set((a + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)0.5) - a))),(a1 + ((((Float)0.07) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)0.5) - a1))));
HXLINE( 146)			int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 146)			spr->set_y((( (Float)(_hx_tmp) ) - spr->get_height()));
HXLINE( 147)			Float a2 = spr->x;
HXDLIN( 147)			spr->set_x((a2 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(((spr->ID * 420) + 240)) ) - a2))));
HXLINE( 149)			if ((spr->ID == ::PlaySelection_obj::curSelected)) {
HXLINE( 151)				Float a = spr->scale->x;
HXDLIN( 151)				Float a1 = spr->scale->y;
HXDLIN( 151)				spr->scale->set((a + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(2) ) - a))),(a1 + ((((Float)0.07) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(2) ) - a1))));
HXLINE( 152)				Float a2 = spr->x;
HXDLIN( 152)				spr->set_x((a2 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)((spr->ID * 420)) ) - a2))));
            			}
HXLINE( 155)			spr->updateHitbox();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::PlaySelection,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_GC_STACKFRAME(&_hx_pos_84d83e7a0a16d5e6_255_update)
HXLINE( 255)			if ((spr->ID == ::PlaySelection_obj::curSelected)) {
HXLINE( 257)				 ::flixel::FlxObject _gthis1 = _gthis->camFollow;
HXDLIN( 257)				_gthis1->set_y(spr->getGraphicMidpoint(null())->y);
HXLINE( 258)				 ::flixel::FlxObject _gthis2 = _gthis->camFollow;
HXDLIN( 258)				Float a = _gthis->camFollow->x;
HXDLIN( 258)				Float b = (spr->getGraphicMidpoint(null())->x + 43);
HXDLIN( 258)				_gthis2->set_x((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b - a))));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_84d83e7a0a16d5e6_137_update)
HXLINE( 136)		 ::PlaySelection _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 138)		if ((::flixel::FlxG_obj::sound->music->_volume < ((((Float)0.8) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) )) / ( (Float)(100) )))) {
HXLINE( 140)			 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 140)			_g->set_volume((_g->_volume + (((((Float)0.5) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) )) / ( (Float)(100) )) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 143)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE( 158)		{
HXLINE( 158)			 ::flixel::addons::display::FlxBackdrop _g = this->checker;
HXDLIN( 158)			_g->set_x((_g->x - (((Float)0.03) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 159)		{
HXLINE( 159)			 ::flixel::addons::display::FlxBackdrop _g1 = this->checker;
HXDLIN( 159)			_g1->set_y((_g1->y - (((Float)0.20) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 161)		bool _hx_tmp;
HXDLIN( 161)		if (!(this->selectedSomethin)) {
HXLINE( 161)			_hx_tmp = this->selectable;
            		}
            		else {
HXLINE( 161)			_hx_tmp = false;
            		}
HXDLIN( 161)		if (_hx_tmp) {
HXLINE( 163)			if (::PlayerSettings_obj::player1->controls->_leftP->check()) {
HXLINE( 165)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 165)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 165)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 166)				this->changeItem(-1);
            			}
HXLINE( 169)			if (::PlayerSettings_obj::player1->controls->_rightP->check()) {
HXLINE( 171)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 171)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 171)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 172)				this->changeItem(1);
            			}
HXLINE( 175)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 177)				{
HXLINE( 177)					 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 177)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 177)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE( 180)				::DiscordClient_obj::changePresence(HX_("Back to the Main Menu.",c3,ae,08,d9),null(),null(),null(),null());
HXLINE( 183)				::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("zoom",13,a3,f8,50),2)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 184)				 ::flixel::FlxSprite _hx_tmp = this->bg;
HXDLIN( 184)				Float _hx_tmp1 = (( (Float)(0) ) - this->bg->get_height());
HXDLIN( 184)				::flixel::tweens::FlxTween_obj::tween(_hx_tmp, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("y",79,00,00,00),_hx_tmp1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 185)				::flixel::tweens::FlxTween_obj::tween(this->side, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 186)				::flixel::tweens::FlxTween_obj::tween(this->checker, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 188)				this->selectedSomethin = true;
            			}
HXLINE( 191)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::PlaySelection,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::FlxSprite spr){
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,spr) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_84d83e7a0a16d5e6_211_update)
HXLINE( 211)						spr->scale->set_y(( (Float)(20) ));
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::PlaySelection,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_84d83e7a0a16d5e6_217_update)
HXLINE( 218)						::String daChoice = _gthis->optionShit->__get(::PlaySelection_obj::curSelected);
HXLINE( 220)						::String _hx_switch_0 = daChoice;
            						if (  (_hx_switch_0==HX_("endless",b4,a0,fb,3e)) ){
HXLINE( 243)							{
HXLINE( 243)								 ::flixel::FlxState nextState =  ::MenuEndless_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 243)								if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 243)									::flixel::FlxG_obj::game->_requestedState = nextState;
            								}
            							}
HXLINE( 245)							::DiscordClient_obj::changePresence(HX_("Endless easy SMM2 moment.",bf,87,78,ab),null(),null(),null(),null());
HXLINE( 242)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("freeplay",a0,90,86,22)) ){
HXLINE( 228)							{
HXLINE( 228)								 ::flixel::FlxState nextState =  ::MenuFreeplay_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 228)								if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 228)									::flixel::FlxG_obj::game->_requestedState = nextState;
            								}
            							}
HXLINE( 230)							::DiscordClient_obj::changePresence(HX_("Am bored, so I freeplay.",77,c0,8b,8e),null(),null(),null(),null());
HXLINE( 227)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("marathon",16,09,a6,d7)) ){
HXLINE( 238)							{
HXLINE( 238)								 ::flixel::FlxState nextState =  ::MenuMarathon_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 238)								if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 238)									::flixel::FlxG_obj::game->_requestedState = nextState;
            								}
            							}
HXLINE( 240)							::DiscordClient_obj::changePresence(HX_("I wanna make a marathon.",87,41,a2,4c),null(),null(),null(),null());
HXLINE( 237)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("modifier",57,db,c7,16)) ){
HXLINE( 233)							{
HXLINE( 233)								 ::flixel::FlxState nextState =  ::MenuModifiers_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 233)								if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 233)									::flixel::FlxG_obj::game->_requestedState = nextState;
            								}
            							}
HXLINE( 235)							::DiscordClient_obj::changePresence(HX_("Time to spice the game.",a9,2e,01,dc),null(),null(),null(),null());
HXLINE( 232)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("week",f4,5f,f5,4e)) ){
HXLINE( 223)							{
HXLINE( 223)								 ::flixel::FlxState nextState =  ::MenuWeek_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 223)								if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 223)									::flixel::FlxG_obj::game->_requestedState = nextState;
            								}
            							}
HXLINE( 225)							::DiscordClient_obj::changePresence(HX_("Going to select a week.",96,86,c0,2d),null(),null(),null(),null());
HXLINE( 222)							goto _hx_goto_7;
            						}
            						_hx_goto_7:;
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_84d83e7a0a16d5e6_201_update)
HXLINE( 202)					::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("zoom",13,a3,f8,50),12)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.4))
            						->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 203)					 ::flixel::FlxSprite _gthis1 = _gthis->bg;
HXDLIN( 203)					Float _hx_tmp = (( (Float)(0) ) - _gthis->bg->get_height());
HXDLIN( 203)					::flixel::tweens::FlxTween_obj::tween(_gthis1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("y",79,00,00,00),_hx_tmp)),((Float)1.6), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 204)					::flixel::tweens::FlxTween_obj::tween(_gthis->side, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.3))
            						->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 205)					::flixel::tweens::FlxTween_obj::tween(_gthis->checker, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.3))
            						->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 207)					::flixel::tweens::FlxTween_obj::tween(spr, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("y",79,00,00,00),-48000)),((Float)2.5), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(spr)))));
HXLINE( 214)					::flixel::tweens::FlxTween_obj::tween(spr, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("scale.y",95,2d,07,65),2000)),((Float)1.4), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeIn_dyn())));
HXLINE( 216)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.7), ::Dynamic(new _hx_Closure_2(_gthis)),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 193)				this->selectedSomethin = true;
HXLINE( 194)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 194)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 194)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 197)				::DiscordClient_obj::changePresence((HX_("Selected: ",e1,ed,81,bd) + this->optionShit->__get(::PlaySelection_obj::curSelected).toUpperCase()),null(),null(),null(),null());
HXLINE( 200)				this->menuItems->forEach( ::Dynamic(new _hx_Closure_3(_gthis)),null());
            			}
            		}
HXLINE( 253)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_4(_gthis)),null());
HXLINE( 262)		this->super::update(elapsed);
            	}


void PlaySelection_obj::changeItem(::hx::Null< int >  __o_huh){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_84d83e7a0a16d5e6_275_changeItem)
HXLINE( 276)			spr->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 278)			if ((spr->ID == ::PlaySelection_obj::curSelected)) {
HXLINE( 280)				spr->animation->play(HX_("selected",5b,2a,6d,b1),null(),null(),null());
            			}
HXLINE( 283)			spr->updateHitbox();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_84d83e7a0a16d5e6_266_changeItem)
HXLINE( 267)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlaySelection >();
HXDLIN( 267)		::PlaySelection_obj::curSelected = (::PlaySelection_obj::curSelected + huh);
HXLINE( 269)		if ((::PlaySelection_obj::curSelected >= this->menuItems->length)) {
HXLINE( 270)			::PlaySelection_obj::curSelected = 0;
            		}
HXLINE( 271)		if ((::PlaySelection_obj::curSelected < 0)) {
HXLINE( 272)			::PlaySelection_obj::curSelected = (this->menuItems->length - 1);
            		}
HXLINE( 274)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE( 287)		::DiscordClient_obj::changePresence((HX_("Play Selection: ",c6,49,ff,75) + this->optionShit->__get(::PlaySelection_obj::curSelected).toUpperCase()),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlaySelection_obj,changeItem,(void))

int PlaySelection_obj::curSelected;


::hx::ObjectPtr< PlaySelection_obj > PlaySelection_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlaySelection_obj > __this = new PlaySelection_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlaySelection_obj > PlaySelection_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlaySelection_obj *__this = (PlaySelection_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlaySelection_obj), true, "PlaySelection"));
	*(void **)__this = PlaySelection_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlaySelection_obj::PlaySelection_obj()
{
}

void PlaySelection_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlaySelection);
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(optionShit,"optionShit");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(checker,"checker");
	HX_MARK_MEMBER_NAME(gradientBar,"gradientBar");
	HX_MARK_MEMBER_NAME(side,"side");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlaySelection_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(optionShit,"optionShit");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(checker,"checker");
	HX_VISIT_MEMBER_NAME(gradientBar,"gradientBar");
	HX_VISIT_MEMBER_NAME(side,"side");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlaySelection_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"side") ) { return ::hx::Val( side ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { return ::hx::Val( checker ); }
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { return ::hx::Val( optionShit ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { return ::hx::Val( gradientBar ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { return ::hx::Val( selectedSomethin ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlaySelection_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val PlaySelection_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"side") ) { side=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { checker=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { optionShit=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { gradientBar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { selectedSomethin=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlaySelection_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PlaySelection_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("optionShit",d5,2d,ee,91));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("checker",35,b3,24,13));
	outFields->push(HX_("gradientBar",c3,05,20,d3));
	outFields->push(HX_("side",97,8d,53,4c));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("selectedSomethin",c8,ec,fb,99));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlaySelection_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlaySelection_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlaySelection_obj,optionShit),HX_("optionShit",d5,2d,ee,91)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlaySelection_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlaySelection_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(PlaySelection_obj,checker),HX_("checker",35,b3,24,13)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlaySelection_obj,gradientBar),HX_("gradientBar",c3,05,20,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlaySelection_obj,side),HX_("side",97,8d,53,4c)},
	{::hx::fsFloat,(int)offsetof(PlaySelection_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsBool,(int)offsetof(PlaySelection_obj,selectedSomethin),HX_("selectedSomethin",c8,ec,fb,99)},
	{::hx::fsBool,(int)offsetof(PlaySelection_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlaySelection_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &PlaySelection_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlaySelection_obj_sMemberFields[] = {
	HX_("menuItems",e1,15,e5,5c),
	HX_("optionShit",d5,2d,ee,91),
	HX_("camFollow",e0,6e,47,22),
	HX_("bg",c5,55,00,00),
	HX_("checker",35,b3,24,13),
	HX_("gradientBar",c3,05,20,d3),
	HX_("side",97,8d,53,4c),
	HX_("camLerp",26,66,a1,d2),
	HX_("create",fc,66,0f,7c),
	HX_("selectedSomethin",c8,ec,fb,99),
	HX_("selectable",96,b6,2a,c4),
	HX_("update",09,86,05,87),
	HX_("changeItem",a3,fa,08,20),
	::String(null()) };

static void PlaySelection_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlaySelection_obj::curSelected,"curSelected");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlaySelection_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlaySelection_obj::curSelected,"curSelected");
};

#endif

::hx::Class PlaySelection_obj::__mClass;

static ::String PlaySelection_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	::String(null())
};

void PlaySelection_obj::__register()
{
	PlaySelection_obj _hx_dummy;
	PlaySelection_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlaySelection",98,9b,50,70);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlaySelection_obj::__GetStatic;
	__mClass->mSetStaticField = &PlaySelection_obj::__SetStatic;
	__mClass->mMarkFunc = PlaySelection_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlaySelection_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlaySelection_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlaySelection_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlaySelection_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlaySelection_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlaySelection_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlaySelection_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_84d83e7a0a16d5e6_30_boot)
HXDLIN(  30)		curSelected = 0;
            	}
}


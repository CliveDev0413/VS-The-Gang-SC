// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_AnimationDebug
#include <AnimationDebug.h>
#endif
#ifndef INCLUDED_BackgroundDancer
#include <BackgroundDancer.h>
#endif
#ifndef INCLUDED_BackgroundGirls
#include <BackgroundGirls.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_DialogueBox
#include <DialogueBox.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_Endless_Substate
#include <Endless_Substate.h>
#endif
#ifndef INCLUDED_GameOverSubstate
#include <GameOverSubstate.h>
#endif
#ifndef INCLUDED_GitarooPause
#include <GitarooPause.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_MenuMarathon
#include <MenuMarathon.h>
#endif
#ifndef INCLUDED_MenuModifiers
#include <MenuModifiers.h>
#endif
#ifndef INCLUDED_MenuWeek
#include <MenuWeek.h>
#endif
#ifndef INCLUDED_ModifierVariables
#include <ModifierVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_NGio
#include <NGio.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_RankingSubstate
#include <RankingSubstate.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_WiggleEffect
#include <WiggleEffect.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_Watch
#include <flixel/system/debug/watch/Watch.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_WatchEntryData
#include <flixel/system/debug/watch/WatchEntryData.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_WatchFrontEnd
#include <flixel/system/frontEnds/WatchFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_io_newgrounds_NG
#include <io/newgrounds/NG.h>
#endif
#ifndef INCLUDED_io_newgrounds_NGLite
#include <io/newgrounds/NGLite.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Medal
#include <io/newgrounds/objects/Medal.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Object
#include <io/newgrounds/objects/Object.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_52_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",52,0xb30d7781)
static const bool _hx_array_data_46c2835d_1[] = {
	0,0,
};
static const bool _hx_array_data_46c2835d_2[] = {
	0,0,
};
static const bool _hx_array_data_46c2835d_3[] = {
	0,0,
};
static const bool _hx_array_data_46c2835d_4[] = {
	0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_208_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",208,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_743_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",743,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_736_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",736,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_727_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",727,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_769_dialogueOrCountdown,"PlayState","dialogueOrCountdown",0x7507b945,"PlayState.dialogueOrCountdown","PlayState.hx",769,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_778_modifierValues,"PlayState","modifierValues",0xd2f3708a,"PlayState.modifierValues","PlayState.hx",778,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_811_updateAccuracy,"PlayState","updateAccuracy",0x9f2d7b53,"PlayState.updateAccuracy","PlayState.hx",811,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_855_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",855,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_873_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",873,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_888_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",888,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_883_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",883,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_893_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",893,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_828_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",828,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_932_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",932,0xb30d7781)
static const ::String _hx_array_data_46c2835d_32[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
static const ::String _hx_array_data_46c2835d_33[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
static const ::String _hx_array_data_46c2835d_34[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_981_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",981,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1003_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1003,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1025_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1025,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1049_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1049,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_915_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",915,0xb30d7781)
static const int _hx_array_data_46c2835d_40[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1066_startSong,"PlayState","startSong",0x419e6106,"PlayState.startSong","PlayState.hx",1066,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1144_generateSong,"PlayState","generateSong",0x3a61615b,"PlayState.generateSong","PlayState.hx",1144,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1336_sortByShit,"PlayState","sortByShit",0xfa9f74a6,"PlayState.sortByShit","PlayState.hx",1336,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1343_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",1343,0xb30d7781)
static const int _hx_array_data_46c2835d_59[] = {
	(int)6,
};
static const int _hx_array_data_46c2835d_60[] = {
	(int)7,
};
static const int _hx_array_data_46c2835d_61[] = {
	(int)5,
};
static const int _hx_array_data_46c2835d_62[] = {
	(int)4,
};
static const int _hx_array_data_46c2835d_63[] = {
	(int)0,
};
static const int _hx_array_data_46c2835d_64[] = {
	(int)4,(int)8,
};
static const int _hx_array_data_46c2835d_65[] = {
	(int)12,(int)16,
};
static const int _hx_array_data_46c2835d_66[] = {
	(int)1,
};
static const int _hx_array_data_46c2835d_67[] = {
	(int)5,(int)9,
};
static const int _hx_array_data_46c2835d_68[] = {
	(int)13,(int)17,
};
static const int _hx_array_data_46c2835d_69[] = {
	(int)2,
};
static const int _hx_array_data_46c2835d_70[] = {
	(int)6,(int)10,
};
static const int _hx_array_data_46c2835d_71[] = {
	(int)14,(int)18,
};
static const int _hx_array_data_46c2835d_72[] = {
	(int)3,
};
static const int _hx_array_data_46c2835d_73[] = {
	(int)7,(int)11,
};
static const int _hx_array_data_46c2835d_74[] = {
	(int)15,(int)19,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1458_tweenCamIn,"PlayState","tweenCamIn",0x8478acda,"PlayState.tweenCamIn","PlayState.hx",1458,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1462_openSubState,"PlayState","openSubState",0x527dda0c,"PlayState.openSubState","PlayState.hx",1462,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1479_closeSubState,"PlayState","closeSubState",0xb7c1df78,"PlayState.closeSubState","PlayState.hx",1479,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1507_onFocus,"PlayState","onFocus",0xe5082828,"PlayState.onFocus","PlayState.hx",1507,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1526_onFocusLost,"PlayState","onFocusLost",0x4ad4322c,"PlayState.onFocusLost","PlayState.hx",1526,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1538_resyncVocals,"PlayState","resyncVocals",0x86228a3d,"PlayState.resyncVocals","PlayState.hx",1538,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1557_truncateFloat,"PlayState","truncateFloat",0x2ab04c85,"PlayState.truncateFloat","PlayState.hx",1557,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2228_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2228,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1565_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",1565,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1585_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",1585,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2026_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2026,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2049_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2049,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2143_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2143,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2247_sustain2,"PlayState","sustain2",0x67af9960,"PlayState.sustain2","PlayState.hx",2247,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2273_sustain2,"PlayState","sustain2",0x67af9960,"PlayState.sustain2","PlayState.hx",2273,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2314_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",2314,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2395_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",2395,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2361_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",2361,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2388_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",2388,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2790_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2790,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2803_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2803,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2520_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2520,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2772_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2772,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2989_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2989,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3025_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",3025,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2820_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2820,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2850_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2850,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2854_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2854,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2946_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2946,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3060_noteMiss,"PlayState","noteMiss",0x0652ff3f,"PlayState.noteMiss","PlayState.hx",3060,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3098_noteMiss,"PlayState","noteMiss",0x0652ff3f,"PlayState.noteMiss","PlayState.hx",3098,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3126_freezeBF,"PlayState","freezeBF",0xd7e0cf0c,"PlayState.freezeBF","PlayState.hx",3126,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3119_freezeBF,"PlayState","freezeBF",0xd7e0cf0c,"PlayState.freezeBF","PlayState.hx",3119,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3153_badNoteCheck,"PlayState","badNoteCheck",0x5cf1a4a2,"PlayState.badNoteCheck","PlayState.hx",3153,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3143_badNoteCheck,"PlayState","badNoteCheck",0x5cf1a4a2,"PlayState.badNoteCheck","PlayState.hx",3143,0xb30d7781)
static const bool _hx_array_data_46c2835d_125[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3176_noteCheck,"PlayState","noteCheck",0xbf96a725,"PlayState.noteCheck","PlayState.hx",3176,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3187_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",3187,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3228_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",3228,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3254_resetFastCar,"PlayState","resetFastCar",0x6b33ac7a,"PlayState.resetFastCar","PlayState.hx",3254,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3269_fastCarDrive,"PlayState","fastCarDrive",0xda080ac3,"PlayState.fastCarDrive","PlayState.hx",3269,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3262_fastCarDrive,"PlayState","fastCarDrive",0xda080ac3,"PlayState.fastCarDrive","PlayState.hx",3262,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3281_trainStart,"PlayState","trainStart",0x6a3d10eb,"PlayState.trainStart","PlayState.hx",3281,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3290_updateTrainPos,"PlayState","updateTrainPos",0x957683c6,"PlayState.updateTrainPos","PlayState.hx",3290,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3316_trainReset,"PlayState","trainReset",0xccf9e658,"PlayState.trainReset","PlayState.hx",3316,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3328_lightningStrikeShit,"PlayState","lightningStrikeShit",0xdc0ca52b,"PlayState.lightningStrikeShit","PlayState.hx",3328,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3340_stepHit,"PlayState","stepHit",0xcb82d856,"PlayState.stepHit","PlayState.hx",3340,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3357_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",3357,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3362_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",3362,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3449_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",3449,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3462_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",3462,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_54_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",54,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_56_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",56,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_57_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",57,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_58_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",58,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_60_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",60,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_61_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",61,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_63_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",63,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_64_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",64,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_66_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",66,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_67_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",67,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_68_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",68,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_69_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",69,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_70_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",70,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_125_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",125,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_158_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",158,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_160_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",160,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_165_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",165,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_168_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",168,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_180_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",180,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_185_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",185,0xb30d7781)

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_52_new)
HXLINE(3484)		this->curLight = 0;
HXLINE(3354)		this->lightningOffset = 8;
HXLINE(3353)		this->lightningStrikeBeat = 0;
HXLINE(3287)		this->startedMoving = false;
HXLINE(3278)		this->trainCooldown = 0;
HXLINE(3277)		this->trainFinishing = false;
HXLINE(3276)		this->trainCars = 8;
HXLINE(3274)		this->trainFrameTiming = ((Float)0);
HXLINE(3273)		this->trainMoving = false;
HXLINE(3251)		this->fastCarCanDrive = true;
HXLINE(2517)		this->currentTimingShown = null();
HXLINE(2516)		this->timeShown = 0;
HXLINE(2515)		this->hits = ::Array_obj< Float >::__new(0);
HXLINE(2513)		this->endingSong = false;
HXLINE(1555)		this->canPause = true;
HXLINE(1554)		this->startedCountdown = false;
HXLINE(1553)		this->paused = false;
HXLINE(1339)		this->noteOutput = ((Float)0);
HXLINE(1141)		this->stair = 0;
HXLINE(1140)		this->debugNum = 0;
HXLINE(1063)		this->songTime = ((Float)0);
HXLINE(1062)		this->lastReportedPlayheadPosition = 0;
HXLINE(1061)		this->previousFrameTime = 0;
HXLINE( 912)		this->perfectMode = false;
HXLINE( 205)		this->zoomLerp = ((Float)0.09);
HXLINE( 204)		this->camLerp = ((Float)0.14);
HXLINE( 203)		this->miscLerp = ((Float)0.09);
HXLINE( 198)		this->dialogueSuffix = HX_("",00,00,00,00);
HXLINE( 195)		this->detailsPausedText = HX_("",00,00,00,00);
HXLINE( 194)		this->detailsText = HX_("",00,00,00,00);
HXLINE( 193)		this->songLength = ((Float)0);
HXLINE( 192)		this->iconRPC = HX_("",00,00,00,00);
HXLINE( 191)		this->storyDifficultyText = HX_("",00,00,00,00);
HXLINE( 187)		this->inCutscene = false;
HXLINE( 182)		this->defaultCamZoom = ((Float)1.05);
HXLINE( 178)		this->frozen = false;
HXLINE( 177)		this->missCounter = 0;
HXLINE( 176)		this->paparazziInt = 0;
HXLINE( 175)		this->noteAccel = ((Float)0);
HXLINE( 174)		this->noteDrunk = ((Float)0);
HXLINE( 173)		this->speedNote = ((Float)1);
HXLINE( 172)		this->offbeatValue = ((Float)0);
HXLINE( 170)		this->lives = ((Float)1);
HXLINE( 166)		this->nps = 0;
HXLINE( 164)		this->canDie = true;
HXLINE( 162)		this->totalPlayed = 0;
HXLINE( 161)		this->totalNotesHit = ((Float)0);
HXLINE( 156)		this->songScore = 0;
HXLINE( 155)		this->talking = true;
HXLINE( 153)		this->allowedToHeadbang = false;
HXLINE( 150)		this->triggeredAlready = false;
HXLINE( 143)		this->wiggleShit =  ::WiggleEffect_obj::__alloc( HX_CTX );
HXLINE( 128)		this->isHalloween = false;
HXLINE( 123)		this->currentFrames = 0;
HXLINE( 122)		this->notesHitArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 113)		this->startingSong = false;
HXLINE( 112)		this->generatedMusic = false;
HXLINE( 107)		this->combo = 0;
HXLINE( 106)		this->health = ((Float)1);
HXLINE( 105)		this->gfSpeed = 1;
HXLINE( 103)		this->curSong = HX_("",00,00,00,00);
HXLINE( 102)		this->camZooming = false;
HXLINE(  99)		this->strums2 = ::Array_obj< ::Dynamic>::__new(4)->init(0,::Array_obj< bool >::fromData( _hx_array_data_46c2835d_1,2))->init(1,::Array_obj< bool >::fromData( _hx_array_data_46c2835d_2,2))->init(2,::Array_obj< bool >::fromData( _hx_array_data_46c2835d_3,2))->init(3,::Array_obj< bool >::fromData( _hx_array_data_46c2835d_4,2));
HXLINE(  90)		this->curSection = 0;
HXLINE(  87)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  77)		this->halloweenLevel = false;
HXLINE(  75)		this->songPositionBar = ((Float)0);
HXLINE(  52)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_208_create)
HXLINE( 207)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 209)		this->modifierValues();
HXLINE( 212)		::PlayState_obj::ended = false;
HXLINE( 214)		::PlayState_obj::dialogue = null();
HXLINE( 216)		::PlayState_obj::sicks = 0;
HXLINE( 217)		::PlayState_obj::bads = 0;
HXLINE( 218)		::PlayState_obj::shits = 0;
HXLINE( 219)		::PlayState_obj::goods = 0;
HXLINE( 221)		::PlayState_obj::misses = 0;
HXLINE( 222)		::PlayState_obj::accuracy = ((Float)0.00);
HXLINE( 224)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 225)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 225)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 228)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 229)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 230)		{
HXLINE( 230)			 ::flixel::FlxCamera _hx_tmp = this->camHUD;
HXDLIN( 230)			_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN( 230)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN( 230)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            		}
HXLINE( 231)		this->camHUD->set_alpha(( (Float)(0) ));
HXLINE( 232)		this->camNOTES =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 233)		{
HXLINE( 233)			 ::flixel::FlxCamera _hx_tmp2 = this->camNOTES;
HXDLIN( 233)			_hx_tmp2->bgColor = (_hx_tmp2->bgColor & 16777215);
HXDLIN( 233)			 ::flixel::FlxCamera _hx_tmp3 = this->camNOTES;
HXDLIN( 233)			_hx_tmp3->bgColor = (_hx_tmp3->bgColor | 0);
            		}
HXLINE( 234)		this->camNOTES->set_alpha(( (Float)(0) ));
HXLINE( 235)		this->camPAUSE =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 236)		{
HXLINE( 236)			 ::flixel::FlxCamera _hx_tmp4 = this->camPAUSE;
HXDLIN( 236)			_hx_tmp4->bgColor = (_hx_tmp4->bgColor & 16777215);
HXDLIN( 236)			 ::flixel::FlxCamera _hx_tmp5 = this->camPAUSE;
HXDLIN( 236)			_hx_tmp5->bgColor = (_hx_tmp5->bgColor | 0);
            		}
HXLINE( 238)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE( 239)		::flixel::FlxG_obj::cameras->add(this->camNOTES).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 240)		::flixel::FlxG_obj::cameras->add(this->camHUD).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 241)		::flixel::FlxG_obj::cameras->add(this->camPAUSE).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 243)		::flixel::FlxCamera_obj::defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE( 245)		this->persistentUpdate = true;
HXLINE( 246)		this->persistentDraw = true;
HXLINE( 248)		if (::hx::IsNull( ::PlayState_obj::SONG )) {
HXLINE( 249)			::PlayState_obj::SONG = ::Song_obj::loadFromJson(HX_("tutorial",9e,8f,b5,82),null());
            		}
HXLINE( 251)		if ((::PlayState_obj::gameplayArea == HX_("Endless",94,c8,4c,0c))) {
HXLINE( 252)			::PlayState_obj::SONG->__SetField(HX_("speed",87,97,69,81),::Endless_Substate_obj::_endless->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic),::hx::paccDynamic);
            		}
HXLINE( 254)		::Conductor_obj::mapBPMChanges(::PlayState_obj::SONG);
HXLINE( 256)		::Conductor_obj::changeBPM(( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 258)		bool _hx_tmp6;
HXDLIN( 258)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("LoveSwitch",26,50,0e,4c),::hx::paccDynamic)) )) {
HXLINE( 258)			_hx_tmp6 = ::hx::IsLess( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),::ModifierVariables_obj::_modifiers->__Field(HX_("Love",92,d8,90,32),::hx::paccDynamic) );
            		}
            		else {
HXLINE( 258)			_hx_tmp6 = false;
            		}
HXDLIN( 258)		if (_hx_tmp6) {
HXLINE( 259)			this->dialogueSuffix = HX_("-love",1f,c7,bf,30);
            		}
            		else {
HXLINE( 260)			bool _hx_tmp;
HXDLIN( 260)			bool _hx_tmp1;
HXDLIN( 260)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FrightSwitch",6a,10,56,29),::hx::paccDynamic)) )) {
HXLINE( 260)				_hx_tmp1 = ::hx::IsLess( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),50 );
            			}
            			else {
HXLINE( 260)				_hx_tmp1 = false;
            			}
HXDLIN( 260)			if (_hx_tmp1) {
HXLINE( 260)				_hx_tmp = ::hx::IsLessEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Love",92,d8,90,32),::hx::paccDynamic),::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic) );
            			}
            			else {
HXLINE( 260)				_hx_tmp = false;
            			}
HXDLIN( 260)			if (_hx_tmp) {
HXLINE( 261)				this->dialogueSuffix = HX_("-uneasy",c8,72,27,b0);
            			}
            			else {
HXLINE( 262)				bool _hx_tmp;
HXDLIN( 262)				bool _hx_tmp1;
HXDLIN( 262)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FrightSwitch",6a,10,56,29),::hx::paccDynamic)) )) {
HXLINE( 262)					if (::hx::IsGreaterEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),50 )) {
HXLINE( 262)						_hx_tmp1 = ::hx::IsLess( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),100 );
            					}
            					else {
HXLINE( 262)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE( 262)					_hx_tmp1 = false;
            				}
HXDLIN( 262)				if (_hx_tmp1) {
HXLINE( 262)					_hx_tmp = ::hx::IsLessEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Love",92,d8,90,32),::hx::paccDynamic),::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic) );
            				}
            				else {
HXLINE( 262)					_hx_tmp = false;
            				}
HXDLIN( 262)				if (_hx_tmp) {
HXLINE( 263)					this->dialogueSuffix = HX_("-scared",0d,58,70,8b);
            				}
            				else {
HXLINE( 264)					bool _hx_tmp;
HXDLIN( 264)					bool _hx_tmp1;
HXDLIN( 264)					if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FrightSwitch",6a,10,56,29),::hx::paccDynamic)) )) {
HXLINE( 264)						if (::hx::IsGreaterEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),100 )) {
HXLINE( 264)							_hx_tmp1 = ::hx::IsLess( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),200 );
            						}
            						else {
HXLINE( 264)							_hx_tmp1 = false;
            						}
            					}
            					else {
HXLINE( 264)						_hx_tmp1 = false;
            					}
HXDLIN( 264)					if (_hx_tmp1) {
HXLINE( 264)						_hx_tmp = ::hx::IsLessEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Love",92,d8,90,32),::hx::paccDynamic),::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic) );
            					}
            					else {
HXLINE( 264)						_hx_tmp = false;
            					}
HXDLIN( 264)					if (_hx_tmp) {
HXLINE( 265)						this->dialogueSuffix = HX_("-terrified",6d,62,6e,c5);
            					}
            					else {
HXLINE( 266)						bool _hx_tmp;
HXDLIN( 266)						bool _hx_tmp1;
HXDLIN( 266)						if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FrightSwitch",6a,10,56,29),::hx::paccDynamic)) )) {
HXLINE( 266)							_hx_tmp1 = ::hx::IsGreaterEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),200 );
            						}
            						else {
HXLINE( 266)							_hx_tmp1 = false;
            						}
HXDLIN( 266)						if (_hx_tmp1) {
HXLINE( 266)							_hx_tmp = ::hx::IsLessEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Love",92,d8,90,32),::hx::paccDynamic),::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic) );
            						}
            						else {
HXLINE( 266)							_hx_tmp = false;
            						}
HXDLIN( 266)						if (_hx_tmp) {
HXLINE( 267)							this->dialogueSuffix = HX_("-depressed",74,ef,31,fe);
            						}
            						else {
HXLINE( 270)							if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("Practice",db,bc,98,7a),::hx::paccDynamic)) )) {
HXLINE( 271)								this->dialogueSuffix = HX_("-practice",e8,75,56,b5);
            							}
            							else {
HXLINE( 272)								if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("Perfect",ed,6c,27,48),::hx::paccDynamic)) )) {
HXLINE( 273)									this->dialogueSuffix = HX_("-perfect",80,54,b4,88);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 299)		::String key = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
HXDLIN( 299)		::String library = null();
HXDLIN( 299)		if (::sys::FileSystem_obj::exists(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (key + (HX_("/dialogue",47,74,e6,61) + this->dialogueSuffix))) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library))) {
HXLINE( 301)			::String key = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
HXDLIN( 301)			::String library = null();
HXDLIN( 301)			::PlayState_obj::dialogue = ::StringTools_obj::trim(::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (key + (HX_("/dialogue",47,74,e6,61) + this->dialogueSuffix))) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library))).split(HX_("\n",0a,00,00,00));
HXLINE( 303)			{
HXLINE( 303)				int _g = 0;
HXDLIN( 303)				int _g1 = ::PlayState_obj::dialogue->length;
HXDLIN( 303)				while((_g < _g1)){
HXLINE( 303)					_g = (_g + 1);
HXDLIN( 303)					int i = (_g - 1);
HXLINE( 305)					::PlayState_obj::dialogue[i] = ::StringTools_obj::trim(::PlayState_obj::dialogue->__get(i));
            				}
            			}
            		}
HXLINE( 311)		switch((int)(::PlayState_obj::storyDifficulty)){
            			case (int)0: {
HXLINE( 314)				this->storyDifficultyText = HX_("Noob",b4,3f,e3,33);
            			}
            			break;
            			case (int)1: {
HXLINE( 316)				this->storyDifficultyText = HX_("Easy",22,b8,e5,2d);
            			}
            			break;
            			case (int)2: {
HXLINE( 318)				this->storyDifficultyText = HX_("Normal",47,e6,fd,64);
            			}
            			break;
            			case (int)3: {
HXLINE( 320)				this->storyDifficultyText = HX_("Hard",0b,5b,e1,2f);
            			}
            			break;
            			case (int)4: {
HXLINE( 322)				this->storyDifficultyText = HX_("Expert",0a,6f,0a,f9);
            			}
            			break;
            			case (int)5: {
HXLINE( 324)				this->storyDifficultyText = HX_("Insane",ca,aa,6e,d2);
            			}
            			break;
            		}
HXLINE( 327)		this->iconRPC = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
HXLINE( 330)		::String _hx_switch_0 = this->iconRPC;
            		if (  (_hx_switch_0==HX_("mom-car",52,e6,f7,f6)) ){
HXLINE( 337)			this->iconRPC = HX_("mom",cb,16,53,00);
HXDLIN( 337)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE( 335)			this->iconRPC = HX_("monster",1a,54,b0,b8);
HXDLIN( 335)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 333)			this->iconRPC = HX_("senpai",3c,df,8d,6b);
HXDLIN( 333)			goto _hx_goto_6;
            		}
            		_hx_goto_6:;
HXLINE( 341)		::String _hx_switch_1 = ::PlayState_obj::gameplayArea;
            		if (  (_hx_switch_1==HX_("Endless",94,c8,4c,0c)) ){
HXLINE( 350)			this->detailsText = (HX_("Endless: Loop ",a2,06,f6,12) + ::PlayState_obj::loops);
HXDLIN( 350)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("Freeplay",c0,4c,38,fc)) ){
HXLINE( 346)			this->detailsText = HX_("Freeplay:",7a,db,0a,b5);
HXDLIN( 346)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("Marathon",36,c5,57,b1)) ){
HXLINE( 348)			this->detailsText = HX_("Marathon:",44,ca,74,7b);
HXDLIN( 348)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("Story",d5,83,43,17)) ){
HXLINE( 344)			this->detailsText = (HX_("Week Selection: Week ",06,1c,3a,a2) + ::PlayState_obj::storyWeek);
HXDLIN( 344)			goto _hx_goto_7;
            		}
            		_hx_goto_7:;
HXLINE( 354)		this->detailsPausedText = (HX_("BRB - ",41,e6,21,c6) + this->detailsText);
HXLINE( 356)		if ((::PlayState_obj::gameplayArea == HX_("Endless",94,c8,4c,0c))) {
HXLINE( 357)			this->detailsPausedText = HX_("BRB - Endless:",67,48,a6,79);
            		}
HXLINE( 360)		::DiscordClient_obj::changePresence(this->detailsText,( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),this->iconRPC,null(),null());
HXLINE( 362)		if ((::PlayState_obj::gameplayArea == HX_("Endless",94,c8,4c,0c))) {
HXLINE( 363)			::DiscordClient_obj::changePresence(this->detailsText,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),this->iconRPC,true,null());
            		}
HXLINE( 366)		::String _hx_switch_2 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
            		if (  (_hx_switch_2==HX_("bomb",62,82,1b,41)) ||  (_hx_switch_2==HX_("taggin",f2,9d,a7,7f)) ||  (_hx_switch_2==HX_("wild",0a,6f,f8,4e)) ){
HXLINE( 370)			this->defaultCamZoom = ((Float)0.9);
HXLINE( 371)			::PlayState_obj::curStage = HX_("tomStreet",35,2c,a8,5c);
HXLINE( 373)			Float posX = ((Float)-359.8);
HXLINE( 374)			Float posY = ((Float)-281.8);
HXLINE( 376)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,posX,posY,null());
HXLINE( 377)			bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("tom_street",50,99,89,72)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week1",bd,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 378)			bg->set_antialiasing(true);
HXLINE( 379)			bg->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 380)			bg->set_active(false);
HXLINE( 381)			this->add(bg);
HXLINE( 369)			goto _hx_goto_8;
            		}
            		/* default */{
HXLINE( 385)			this->defaultCamZoom = ((Float)0.9);
HXLINE( 386)			::PlayState_obj::curStage = HX_("stage",be,6a,0b,84);
HXLINE( 387)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,-200,null());
HXDLIN( 387)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stageback",e5,7b,3b,06)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 388)			bg1->set_antialiasing(true);
HXLINE( 389)			bg1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 390)			bg1->set_active(false);
HXLINE( 391)			this->add(bg1);
HXLINE( 393)			 ::flixel::FlxSprite stageFront =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,600,null());
HXDLIN( 393)			 ::flixel::FlxSprite stageFront1 = stageFront->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagefront",2b,fd,b0,c6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 394)			bool _hx_tmp;
HXDLIN( 394)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("BrightnessSwitch",c5,da,a7,e9),::hx::paccDynamic)) )) {
HXLINE( 394)				_hx_tmp = ::hx::IsGreaterEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Brightness",f1,91,22,5c),::hx::paccDynamic),35 );
            			}
            			else {
HXLINE( 394)				_hx_tmp = false;
            			}
HXDLIN( 394)			if (_hx_tmp) {
HXLINE( 395)				 ::flixel::FlxSprite stageFront =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,600,null());
HXDLIN( 395)				stageFront1 = stageFront->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagefrontB",b7,88,2c,14)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
            			}
HXLINE( 396)			bool _hx_tmp1;
HXDLIN( 396)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("BrightnessSwitch",c5,da,a7,e9),::hx::paccDynamic)) )) {
HXLINE( 396)				_hx_tmp1 = ::hx::IsLessEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Brightness",f1,91,22,5c),::hx::paccDynamic),-35 );
            			}
            			else {
HXLINE( 396)				_hx_tmp1 = false;
            			}
HXDLIN( 396)			if (_hx_tmp1) {
HXLINE( 397)				 ::flixel::FlxSprite stageFront =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,600,null());
HXDLIN( 397)				stageFront1 = stageFront->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagefrontLO",6e,20,cb,92)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
            			}
HXLINE( 398)			stageFront1->setGraphicSize(::Std_obj::_hx_int((stageFront1->get_width() * ((Float)1.1))),null());
HXLINE( 399)			stageFront1->updateHitbox();
HXLINE( 400)			stageFront1->set_antialiasing(true);
HXLINE( 401)			stageFront1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 402)			stageFront1->set_active(false);
HXLINE( 403)			this->add(stageFront1);
HXLINE( 405)			 ::flixel::FlxSprite stageCurtains =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-300,null());
HXDLIN( 405)			 ::flixel::FlxSprite stageCurtains1 = stageCurtains->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagecurtains",df,ec,1a,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 406)			bool _hx_tmp2;
HXDLIN( 406)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("BrightnessSwitch",c5,da,a7,e9),::hx::paccDynamic)) )) {
HXLINE( 406)				_hx_tmp2 = ::hx::IsGreaterEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Brightness",f1,91,22,5c),::hx::paccDynamic),35 );
            			}
            			else {
HXLINE( 406)				_hx_tmp2 = false;
            			}
HXDLIN( 406)			if (_hx_tmp2) {
HXLINE( 407)				 ::flixel::FlxSprite stageCurtains =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-300,null());
HXDLIN( 407)				stageCurtains1 = stageCurtains->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagecurtainsB",83,56,74,6c)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
            			}
HXLINE( 408)			bool _hx_tmp3;
HXDLIN( 408)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("BrightnessSwitch",c5,da,a7,e9),::hx::paccDynamic)) )) {
HXLINE( 408)				_hx_tmp3 = ::hx::IsLessEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Brightness",f1,91,22,5c),::hx::paccDynamic),-35 );
            			}
            			else {
HXLINE( 408)				_hx_tmp3 = false;
            			}
HXDLIN( 408)			if (_hx_tmp3) {
HXLINE( 409)				 ::flixel::FlxSprite stageCurtains =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-300,null());
HXDLIN( 409)				stageCurtains1 = stageCurtains->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagecurtainsLO",22,65,57,79)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
            			}
HXLINE( 410)			stageCurtains1->setGraphicSize(::Std_obj::_hx_int((stageCurtains1->get_width() * ((Float)0.9))),null());
HXLINE( 411)			stageCurtains1->updateHitbox();
HXLINE( 412)			stageCurtains1->set_antialiasing(true);
HXLINE( 413)			stageCurtains1->scrollFactor->set(((Float)1.3),((Float)1.3));
HXLINE( 414)			stageCurtains1->set_active(false);
HXLINE( 416)			this->add(stageCurtains1);
            		}
            		_hx_goto_8:;
HXLINE( 420)		::String gfVersion = HX_("gf",1f,5a,00,00);
HXLINE( 422)		::String _hx_switch_3 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_3==HX_("limo",1f,17,b3,47)) ){
HXLINE( 425)			gfVersion = HX_("gf-car",a6,63,ab,07);
HXDLIN( 425)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_3==HX_("mall",d4,3a,56,48)) ||  (_hx_switch_3==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 427)			gfVersion = HX_("gf-christmas",94,26,b1,6d);
HXDLIN( 427)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_3==HX_("school",74,b8,c8,40)) ){
HXLINE( 429)			gfVersion = HX_("gf-pixel",98,3e,8c,55);
HXDLIN( 429)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_3==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 431)			gfVersion = HX_("gf-pixel",98,3e,8c,55);
HXDLIN( 431)			goto _hx_goto_9;
            		}
            		_hx_goto_9:;
HXLINE( 434)		if ((::PlayState_obj::curStage == HX_("limo",1f,17,b3,47))) {
HXLINE( 435)			gfVersion = HX_("gf-car",a6,63,ab,07);
            		}
HXLINE( 437)		this->gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),gfVersion,null());
HXLINE( 438)		this->gf->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 441)		if ((::PlayState_obj::curStage == HX_("limo",1f,17,b3,47))) {
HXLINE( 442)			this->add(this->limo);
            		}
HXLINE( 444)		this->dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 446)		Float camPos = this->dad->getGraphicMidpoint(null())->x;
HXDLIN( 446)		 ::flixel::math::FlxPoint camPos1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,camPos,this->dad->getGraphicMidpoint(null())->y);
HXLINE( 448)		::String _hx_switch_4 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
            		if (  (_hx_switch_4==HX_("dad",47,36,4c,00)) ){
HXLINE( 459)			 ::flixel::math::FlxPoint _g = camPos1;
HXDLIN( 459)			_g->set_x((_g->x + 400));
HXDLIN( 459)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_4==HX_("gf",1f,5a,00,00)) ){
HXLINE( 451)			this->dad->setPosition(this->gf->x,this->gf->y);
HXLINE( 452)			this->gf->set_visible(false);
HXLINE( 453)			if ((::PlayState_obj::gameplayArea == HX_("Story",d5,83,43,17))) {
HXLINE( 455)				{
HXLINE( 455)					 ::flixel::math::FlxPoint _g = camPos1;
HXDLIN( 455)					_g->set_x((_g->x + 600));
            				}
HXLINE( 456)				this->tweenCamIn();
            			}
HXLINE( 450)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_4==HX_("tom",92,66,58,00)) ){
HXLINE( 461)			this->dad->set_x(((Float)55.25));
HXLINE( 462)			this->dad->set_y(((Float)44.9));
HXLINE( 463)			Float _hx_tmp = (this->dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 463)			camPos1->set(_hx_tmp,this->dad->getGraphicMidpoint(null())->y);
HXLINE( 460)			goto _hx_goto_10;
            		}
            		_hx_goto_10:;
HXLINE( 466)		this->boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 469)		if ((::PlayState_obj::curStage == HX_("tomStreet",35,2c,a8,5c))) {
HXLINE( 472)			this->boyfriend->setPosition(((Float)753.25),((Float)328.05));
HXLINE( 473)			this->gf->setPosition(((Float)230.65),19);
            		}
HXLINE( 476)		this->add(this->gf);
HXLINE( 479)		if ((::PlayState_obj::curStage == HX_("limo",1f,17,b3,47))) {
HXLINE( 480)			this->add(this->limo);
            		}
HXLINE( 482)		this->add(this->dad);
HXLINE( 483)		this->add(this->boyfriend);
HXLINE( 485)		this->doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,::PlayState_obj::dialogue);
HXLINE( 488)		this->doof->scrollFactor->set(null(),null());
HXLINE( 489)		this->doof->finishThing = this->startCountdown_dyn();
HXLINE( 491)		::Conductor_obj::songPosition = ( (Float)(-5000) );
HXLINE( 493)		this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 494)		this->strumLine->scrollFactor->set(null(),null());
HXLINE( 496)		this->strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 497)		this->add(this->strumLineNotes);
HXLINE( 499)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("InvisibleNotes",f4,a9,72,91),::hx::paccDynamic)) )) {
HXLINE( 501)			this->strumLine->set_visible(false);
HXLINE( 502)			this->strumLineNotes->set_visible(false);
            		}
HXLINE( 505)		this->playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 506)		this->player2Strums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 510)		this->generateSong(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 511)		::PlayState_obj::speed = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
HXLINE( 515)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 517)		this->camFollow->setPosition(camPos1->x,camPos1->y);
HXLINE( 519)		if (::hx::IsNotNull( ::PlayState_obj::prevCamFollow )) {
HXLINE( 521)			this->camFollow = ::PlayState_obj::prevCamFollow;
HXLINE( 522)			::PlayState_obj::prevCamFollow = null();
            		}
HXLINE( 525)		this->add(this->camFollow);
HXLINE( 527)		::flixel::FlxG_obj::camera->follow(this->camFollow,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),this->camLerp);
HXLINE( 529)		::flixel::FlxG_obj::camera->set_zoom(this->defaultCamZoom);
HXLINE( 530)		{
HXLINE( 530)			 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN( 530)			 ::flixel::math::FlxPoint point = this->camFollow->getPosition(null());
HXDLIN( 530)			_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN( 530)			if (point->_weak) {
HXLINE( 530)				point->put();
            			}
            		}
HXLINE( 532)		{
HXLINE( 532)			 ::flixel::math::FlxRect _this1 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 532)			_this1->x = ( (Float)(0) );
HXDLIN( 532)			_this1->y = ( (Float)(0) );
HXDLIN( 532)			_this1->width = ( (Float)(::flixel::FlxG_obj::width) );
HXDLIN( 532)			_this1->height = ( (Float)(::flixel::FlxG_obj::height) );
            		}
HXLINE( 534)		::flixel::FlxG_obj::fixedTimestep = false;
HXLINE( 536)		if (( (bool)(::MainVariables_obj::_variables->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE( 538)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,10,null());
HXDLIN( 538)			::PlayState_obj::songPosBG = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 539)			if (::hx::IsEq( ::MainVariables_obj::_variables->__Field(HX_("scroll",0d,d8,64,47),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 540)				::PlayState_obj::songPosBG->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            			}
HXLINE( 541)			::PlayState_obj::songPosBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 542)			::PlayState_obj::songPosBG->scrollFactor->set(null(),null());
HXLINE( 543)			this->add(::PlayState_obj::songPosBG);
HXLINE( 544)			::PlayState_obj::songPosBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 546)			Float _hx_tmp1 = (::PlayState_obj::songPosBG->x + 4);
HXDLIN( 546)			Float _hx_tmp2 = (::PlayState_obj::songPosBG->y + 4);
HXDLIN( 546)			int _hx_tmp3 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_width() - ( (Float)(8) )));
HXDLIN( 546)			::PlayState_obj::songPosBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp3,::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("songPositionBar",d5,62,6e,a6),0,90000,null());
HXLINE( 548)			::PlayState_obj::songPosBar->scrollFactor->set(null(),null());
HXLINE( 549)			::PlayState_obj::songPosBar->createFilledBar(-8355712,-16711936,null(),null());
HXLINE( 550)			this->add(::PlayState_obj::songPosBar);
HXLINE( 551)			::PlayState_obj::songPosBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 553)			Float songName = ::PlayState_obj::songPosBG->x;
HXDLIN( 553)			Float songName1 = ((songName + (::PlayState_obj::songPosBG->get_width() / ( (Float)(2) ))) - ( (Float)(20) ));
HXDLIN( 553)			 ::flixel::text::FlxText songName2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,songName1,::PlayState_obj::songPosBG->y,0,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),16,null());
HXLINE( 554)			if (::hx::IsEq( ::MainVariables_obj::_variables->__Field(HX_("scroll",0d,d8,64,47),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 555)				 ::flixel::text::FlxText _g = songName2;
HXDLIN( 555)				_g->set_y((_g->y - ( (Float)(3) )));
            			}
HXLINE( 556)			songName2->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 557)			songName2->scrollFactor->set(null(),null());
HXLINE( 558)			this->add(songName2);
HXLINE( 559)			songName2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE( 562)		 ::flixel::FlxSprite _hx_tmp7 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)),null());
HXDLIN( 562)		this->healthBarBG = _hx_tmp7->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 563)		if (::hx::IsEq( ::MainVariables_obj::_variables->__Field(HX_("scroll",0d,d8,64,47),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 564)			this->healthBarBG->set_y(( (Float)(50) ));
            		}
HXLINE( 565)		this->healthBarBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 566)		this->healthBarBG->scrollFactor->set(null(),null());
HXLINE( 567)		this->add(this->healthBarBG);
HXLINE( 569)		Float _hx_tmp8 = (this->healthBarBG->x + 4);
HXDLIN( 569)		Float _hx_tmp9 = (this->healthBarBG->y + 4);
HXDLIN( 569)		int _hx_tmp10 = ::Std_obj::_hx_int((this->healthBarBG->get_width() - ( (Float)(8) )));
HXDLIN( 569)		this->healthBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp8,_hx_tmp9,::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn(),_hx_tmp10,::Std_obj::_hx_int((this->healthBarBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("health",9c,28,06,fd),0,2,null());
HXLINE( 571)		this->healthBar->scrollFactor->set(null(),null());
HXLINE( 572)		this->healthBar->createFilledBar(-65536,-10027213,null(),null());
HXLINE( 574)		this->add(this->healthBar);
HXLINE( 576)		Float _hx_tmp11 = this->healthBarBG->x;
HXDLIN( 576)		Float _hx_tmp12 = (_hx_tmp11 - (this->healthBarBG->get_width() / ( (Float)(2) )));
HXDLIN( 576)		this->scoreTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp12,(this->healthBarBG->y + 26),0,HX_("",00,00,00,00),20,null());
HXLINE( 577)		if (::hx::IsEq( ::MainVariables_obj::_variables->__Field(HX_("scroll",0d,d8,64,47),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 578)			this->scoreTxt->set_y((this->healthBarBG->y - ( (Float)(18) )));
            		}
HXLINE( 579)		this->scoreTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),20,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 580)		{
HXLINE( 580)			 ::flixel::text::FlxText _this2 = this->scoreTxt;
HXDLIN( 580)			_this2->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 580)			_this2->set_borderColor(-16777216);
HXDLIN( 580)			_this2->set_borderSize(( (Float)(3) ));
HXDLIN( 580)			_this2->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 581)		this->scoreTxt->scrollFactor->set(null(),null());
HXLINE( 582)		this->add(this->scoreTxt);
HXLINE( 583)		this->scoreTxt->set_visible(( (bool)(::MainVariables_obj::_variables->__Field(HX_("scoreDisplay",10,cd,4e,c8),::hx::paccDynamic)) ));
HXLINE( 585)		this->missTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->scoreTxt->x,(this->scoreTxt->y - ( (Float)(26) )),0,HX_("",00,00,00,00),20,null());
HXLINE( 586)		if (::hx::IsEq( ::MainVariables_obj::_variables->__Field(HX_("scroll",0d,d8,64,47),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 587)			this->missTxt->set_y((this->scoreTxt->y + 26));
            		}
HXLINE( 588)		this->missTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),20,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 589)		{
HXLINE( 589)			 ::flixel::text::FlxText _this3 = this->missTxt;
HXDLIN( 589)			_this3->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 589)			_this3->set_borderColor(-16777216);
HXDLIN( 589)			_this3->set_borderSize(( (Float)(3) ));
HXDLIN( 589)			_this3->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 590)		this->missTxt->scrollFactor->set(null(),null());
HXLINE( 591)		this->add(this->missTxt);
HXLINE( 592)		this->missTxt->set_visible(( (bool)(::MainVariables_obj::_variables->__Field(HX_("missesDisplay",f8,70,5a,63),::hx::paccDynamic)) ));
HXLINE( 594)		this->accuracyTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->missTxt->x,(this->missTxt->y - ( (Float)(26) )),0,HX_("",00,00,00,00),20,null());
HXLINE( 595)		if (::hx::IsEq( ::MainVariables_obj::_variables->__Field(HX_("scroll",0d,d8,64,47),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 596)			this->accuracyTxt->set_y((this->missTxt->y + 26));
            		}
HXLINE( 597)		this->accuracyTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),20,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 598)		{
HXLINE( 598)			 ::flixel::text::FlxText _this4 = this->accuracyTxt;
HXDLIN( 598)			_this4->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 598)			_this4->set_borderColor(-16777216);
HXDLIN( 598)			_this4->set_borderSize(( (Float)(3) ));
HXDLIN( 598)			_this4->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 599)		this->accuracyTxt->scrollFactor->set(null(),null());
HXLINE( 600)		this->add(this->accuracyTxt);
HXLINE( 601)		this->accuracyTxt->set_visible(( (bool)(::MainVariables_obj::_variables->__Field(HX_("accuracyDisplay",09,75,5e,26),::hx::paccDynamic)) ));
HXLINE( 603)		this->npsTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->accuracyTxt->x,(this->accuracyTxt->y - ( (Float)(26) )),0,HX_("",00,00,00,00),20,null());
HXLINE( 604)		if (::hx::IsEq( ::MainVariables_obj::_variables->__Field(HX_("scroll",0d,d8,64,47),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 605)			this->npsTxt->set_y((this->accuracyTxt->y + 26));
            		}
HXLINE( 606)		this->npsTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),20,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 607)		{
HXLINE( 607)			 ::flixel::text::FlxText _this5 = this->npsTxt;
HXDLIN( 607)			_this5->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 607)			_this5->set_borderColor(-16777216);
HXDLIN( 607)			_this5->set_borderSize(( (Float)(3) ));
HXDLIN( 607)			_this5->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 608)		this->npsTxt->scrollFactor->set(null(),null());
HXLINE( 609)		this->add(this->npsTxt);
HXLINE( 610)		this->npsTxt->set_visible(( (bool)(::MainVariables_obj::_variables->__Field(HX_("nps",f1,d9,53,00),::hx::paccDynamic)) ));
HXLINE( 612)		this->iconP1 =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),true);
HXLINE( 613)		 ::HealthIcon _hx_tmp13 = this->iconP1;
HXDLIN( 613)		Float _hx_tmp14 = this->healthBar->y;
HXDLIN( 613)		_hx_tmp13->set_y((_hx_tmp14 - (this->iconP1->get_height() / ( (Float)(2) ))));
HXLINE( 614)		this->add(this->iconP1);
HXLINE( 616)		this->iconP2 =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),false);
HXLINE( 617)		 ::HealthIcon _hx_tmp15 = this->iconP2;
HXDLIN( 617)		Float _hx_tmp16 = this->healthBar->y;
HXDLIN( 617)		_hx_tmp15->set_y((_hx_tmp16 - (this->iconP2->get_height() / ( (Float)(2) ))));
HXLINE( 618)		this->add(this->iconP2);
HXLINE( 620)		this->hearts =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 621)		this->add(this->hearts);
HXLINE( 623)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("Enigma",bb,a3,69,32),::hx::paccDynamic)) )) {
HXLINE( 625)			this->iconP1->set_visible(false);
HXLINE( 626)			this->iconP2->set_visible(false);
HXLINE( 627)			this->healthBar->set_visible(false);
HXLINE( 628)			this->healthBarBG->set_visible(false);
HXLINE( 629)			this->hearts->set_visible(false);
            		}
HXLINE( 632)		::String heartTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("heartUI",5a,97,54,6c)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d));
HXDLIN( 632)		 ::flixel::graphics::frames::FlxAtlasFrames heartTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(heartTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("heartUI",5a,97,54,6c)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("shared",a5,5e,2b,1d)));
HXLINE( 633)		::String _hx_switch_5 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_5==HX_("school",74,b8,c8,40)) ||  (_hx_switch_5==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 636)			::String heartTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/pixelUI/heartUI-pixel",fa,5f,11,e1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7));
HXDLIN( 636)			heartTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(heartTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/pixelUI/heartUI-pixel",fa,5f,11,e1)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week6",c2,95,be,c7)));
HXDLIN( 636)			goto _hx_goto_11;
            		}
            		_hx_goto_11:;
HXLINE( 639)		{
HXLINE( 639)			int _g = 0;
HXDLIN( 639)			int _g1 = ::Std_obj::_hx_int(( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Lives",e7,5f,35,08),::hx::paccDynamic)) ));
HXDLIN( 639)			while((_g < _g1)){
HXLINE( 639)				_g = (_g + 1);
HXDLIN( 639)				int i = (_g - 1);
HXLINE( 641)				this->heartSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((this->healthBarBG->x + 5) + (i * 40)),20,null());
HXLINE( 642)				this->heartSprite->set_frames(heartTex1);
HXLINE( 643)				this->heartSprite->set_antialiasing(false);
HXLINE( 644)				this->heartSprite->updateHitbox();
HXLINE( 645)				 ::flixel::FlxSprite _hx_tmp = this->heartSprite;
HXDLIN( 645)				Float _hx_tmp1 = this->healthBarBG->y;
HXDLIN( 645)				_hx_tmp->set_y(((_hx_tmp1 + this->healthBarBG->get_height()) + 10));
HXLINE( 646)				this->heartSprite->scrollFactor->set(null(),null());
HXLINE( 647)				this->heartSprite->animation->addByPrefix(HX_("Idle",34,d3,8c,30),HX_("Hearts",4d,2a,9f,31),24,false,null(),null());
HXLINE( 648)				this->heartSprite->ID = i;
HXLINE( 649)				if (::hx::IsEq( ::MainVariables_obj::_variables->__Field(HX_("scroll",0d,d8,64,47),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE( 650)					 ::flixel::FlxSprite _hx_tmp = this->heartSprite;
HXDLIN( 650)					Float _hx_tmp1 = this->healthBarBG->y;
HXDLIN( 650)					_hx_tmp->set_y(((_hx_tmp1 - this->heartSprite->get_height()) - ( (Float)(10) )));
            				}
HXLINE( 651)				if (!(( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("LivesSwitch",3b,85,f2,94),::hx::paccDynamic)) ))) {
HXLINE( 652)					this->heartSprite->set_visible(false);
            				}
HXLINE( 654)				this->hearts->add(this->heartSprite).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
HXLINE( 657)		 ::flixel::FlxSprite _hx_tmp17 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 657)		this->freezeIndicator = _hx_tmp17->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("FreezeIndicator",58,c2,55,60)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 658)		this->add(this->freezeIndicator);
HXLINE( 659)		::String _hx_switch_6 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_6==HX_("school",74,b8,c8,40)) ||  (_hx_switch_6==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 662)			 ::flixel::FlxSprite _hx_tmp = this->freezeIndicator;
HXDLIN( 662)			_hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/pixelUI/FreezeIndicator-pixel",78,9c,3c,f3)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXDLIN( 662)			goto _hx_goto_13;
            		}
            		_hx_goto_13:;
HXLINE( 664)		this->freezeIndicator->set_alpha(( (Float)(0) ));
HXLINE( 667)		 ::flixel::FlxSprite _hx_tmp18 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 667)		this->LightsOutBG = _hx_tmp18->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("LightsOutBG",96,f5,4c,d9)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 668)		this->add(this->LightsOutBG);
HXLINE( 669)		::String _hx_switch_7 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_7==HX_("school",74,b8,c8,40)) ||  (_hx_switch_7==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 672)			 ::flixel::FlxSprite _hx_tmp = this->LightsOutBG;
HXDLIN( 672)			_hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/pixelUI/LightsOutBG-pixel",b6,92,82,8b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXDLIN( 672)			goto _hx_goto_14;
            		}
            		_hx_goto_14:;
HXLINE( 675)		 ::flixel::FlxSprite _hx_tmp19 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 675)		this->BlindingBG = _hx_tmp19->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("BlindingBG",d2,e1,bb,9e)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 676)		this->add(this->BlindingBG);
HXLINE( 677)		::String _hx_switch_8 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_8==HX_("school",74,b8,c8,40)) ||  (_hx_switch_8==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 680)			 ::flixel::FlxSprite _hx_tmp = this->BlindingBG;
HXDLIN( 680)			_hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/pixelUI/BlindingBG-pixel",04,b3,2f,65)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXDLIN( 680)			goto _hx_goto_15;
            		}
            		_hx_goto_15:;
HXLINE( 682)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("BrightnessSwitch",c5,da,a7,e9),::hx::paccDynamic)) )) {
HXLINE( 684)			this->LightsOutBG->set_alpha(((( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Brightness",f1,91,22,5c),::hx::paccDynamic)) ) / ( (Float)(100) )) * ( (Float)(-1) )));
HXLINE( 685)			this->BlindingBG->set_alpha((( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Brightness",f1,91,22,5c),::hx::paccDynamic)) ) / ( (Float)(100) )));
            		}
            		else {
HXLINE( 689)			this->LightsOutBG->set_alpha(( (Float)(0) ));
HXLINE( 690)			this->BlindingBG->set_alpha(( (Float)(0) ));
            		}
HXLINE( 693)		this->strumLineNotes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camNOTES));
HXLINE( 694)		this->notes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camNOTES));
HXLINE( 695)		this->hearts->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 696)		this->healthBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 697)		this->healthBarBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 698)		this->iconP1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 699)		this->iconP2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 700)		this->scoreTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 701)		this->missTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 702)		this->accuracyTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 703)		this->npsTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 704)		this->doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camPAUSE));
HXLINE( 705)		this->freezeIndicator->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camPAUSE));
HXLINE( 706)		this->LightsOutBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camPAUSE));
HXLINE( 707)		this->BlindingBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camPAUSE));
HXLINE( 714)		this->startingSong = true;
HXLINE( 716)		bool _hx_tmp20;
HXDLIN( 716)		if ((::PlayState_obj::gameplayArea == HX_("Story",d5,83,43,17))) {
HXLINE( 716)			_hx_tmp20 = ( (bool)(::MainVariables_obj::_variables->__Field(HX_("cutscene",8a,1c,09,fa),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 716)			_hx_tmp20 = false;
            		}
HXDLIN( 716)		if (_hx_tmp20) {
HXLINE( 718)			::String _hx_switch_9 = this->curSong.toLowerCase();
            			if (  (_hx_switch_9==HX_("roses",04,6c,64,ed)) ){
HXLINE( 749)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 749)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("ANGRY",01,81,d0,a0),HX_("shared",a5,5e,2b,1d));
HXDLIN( 749)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 750)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 750)				::String _hx_tmp3 = ::Paths_obj::sound(HX_("ANGRY_TEXT_BOX",57,5c,5c,19),HX_("shared",a5,5e,2b,1d));
HXDLIN( 750)				_hx_tmp2->play(_hx_tmp3,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 751)				this->dialogueOrCountdown();
HXLINE( 748)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_9==HX_("winter-horrorland",9d,39,f4,1e)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_743_create)
HXLINE( 743)							_gthis->dialogueOrCountdown();
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_736_create)
HXLINE( 737)						_gthis->camHUD->set_visible(true);
HXLINE( 738)						_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 739)						::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("zoom",13,a3,f8,50),_gthis->defaultCamZoom)),((Float)2.5), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_727_create)
HXLINE( 728)					_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 729)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 729)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("Lights_Turn_On",5f,e1,29,ad),HX_("shared",a5,5e,2b,1d));
HXDLIN( 729)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 730)					_gthis->camFollow->set_y(( (Float)(-2050) ));
HXLINE( 731)					{
HXLINE( 731)						 ::flixel::FlxObject _g = _gthis->camFollow;
HXDLIN( 731)						_g->set_x((_g->x + 200));
            					}
HXLINE( 732)					{
HXLINE( 732)						 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN( 732)						 ::flixel::math::FlxPoint point = _gthis->camFollow->getPosition(null());
HXDLIN( 732)						_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN( 732)						if (point->_weak) {
HXLINE( 732)							point->put();
            						}
            					}
HXLINE( 733)					::flixel::FlxG_obj::camera->set_zoom(((Float)1.5));
HXLINE( 735)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.8), ::Dynamic(new _hx_Closure_1(_gthis,blackScreen2)),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 721)				 ::flixel::FlxSprite blackScreen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 721)				int blackScreen1 = ::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::width * 2)) ));
HXDLIN( 721)				 ::flixel::FlxSprite blackScreen2 = blackScreen->makeGraphic(blackScreen1,::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::height * 2)) )),-16777216,null(),null());
HXLINE( 722)				this->add(blackScreen2);
HXLINE( 723)				blackScreen2->scrollFactor->set(null(),null());
HXLINE( 724)				this->camHUD->set_visible(false);
HXLINE( 726)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_2(_gthis,blackScreen2)),null());
HXLINE( 720)				goto _hx_goto_16;
            			}
            			/* default */{
HXLINE( 753)				this->dialogueOrCountdown();
            			}
            			_hx_goto_16:;
            		}
            		else {
HXLINE( 758)			::String _g = this->curSong.toLowerCase();
HXLINE( 761)			this->startCountdown();
            		}
HXLINE( 765)		this->super::create();
            	}


void PlayState_obj::dialogueOrCountdown(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_769_dialogueOrCountdown)
HXLINE( 770)		::haxe::Log_obj::trace(::PlayState_obj::dialogue,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),770,HX_("PlayState",5d,83,c2,46),HX_("dialogueOrCountdown",d6,e4,77,5a)));
HXLINE( 771)		if (::hx::IsNull( ::PlayState_obj::dialogue )) {
HXLINE( 772)			this->startCountdown();
            		}
            		else {
HXLINE( 774)			this->schoolIntro(this->doof);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,dialogueOrCountdown,(void))

void PlayState_obj::modifierValues(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_778_modifierValues)
HXLINE( 779)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("LivesSwitch",3b,85,f2,94),::hx::paccDynamic)) )) {
HXLINE( 780)			this->lives = ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Lives",e7,5f,35,08),::hx::paccDynamic)) );
            		}
HXLINE( 782)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("StartHealthSwitch",12,cf,e7,6f),::hx::paccDynamic)) )) {
HXLINE( 783)			this->health = (1 + (( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("StartHealth",7e,1e,1f,59),::hx::paccDynamic)) ) / ( (Float)(100) )));
            		}
HXLINE( 785)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("HitZonesSwitch",a8,82,c0,b2),::hx::paccDynamic)) )) {
HXLINE( 787)			::Conductor_obj::safeFrames = ::Std_obj::_hx_int(( (Float)((10 + ::ModifierVariables_obj::_modifiers->__Field(HX_("HitZones",94,5d,a6,a1),::hx::paccDynamic))) ));
HXLINE( 788)			::Conductor_obj::safeZoneOffset = ((( (Float)(::Conductor_obj::safeFrames) ) / ( (Float)(60) )) * ( (Float)(1000) ));
HXLINE( 789)			::Conductor_obj::timeScale = (::Conductor_obj::safeZoneOffset / ( (Float)(166) ));
            		}
            		else {
HXLINE( 793)			::Conductor_obj::safeFrames = 10;
HXLINE( 794)			::Conductor_obj::safeZoneOffset = ((( (Float)(::Conductor_obj::safeFrames) ) / ( (Float)(60) )) * ( (Float)(1000) ));
HXLINE( 795)			::Conductor_obj::timeScale = (::Conductor_obj::safeZoneOffset / ( (Float)(166) ));
            		}
HXLINE( 798)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("Mirror",5f,e6,3e,8a),::hx::paccDynamic)) )) {
HXLINE( 800)			::flixel::FlxG_obj::game->set_scaleX(( (Float)(-1) ));
HXLINE( 801)			{
HXLINE( 801)				 ::flixel::FlxGame _g = ::flixel::FlxG_obj::game;
HXDLIN( 801)				Float _hx_tmp = _g->get_x();
HXDLIN( 801)				_g->set_x((_hx_tmp + ::flixel::FlxG_obj::width));
            			}
            		}
HXLINE( 803)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("UpsideDown",14,87,be,32),::hx::paccDynamic)) )) {
HXLINE( 805)			::flixel::FlxG_obj::game->set_scaleY(( (Float)(-1) ));
HXLINE( 806)			{
HXLINE( 806)				 ::flixel::FlxGame _g = ::flixel::FlxG_obj::game;
HXDLIN( 806)				Float _hx_tmp = _g->get_y();
HXDLIN( 806)				_g->set_y((_hx_tmp + ::flixel::FlxG_obj::height));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,modifierValues,(void))

void PlayState_obj::updateAccuracy(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_811_updateAccuracy)
HXLINE( 813)		 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 813)		_hx_tmp->totalPlayed = (_hx_tmp->totalPlayed + 1);
HXLINE( 814)		::PlayState_obj::accuracy = ((this->totalNotesHit / ( (Float)(this->totalPlayed) )) * ( (Float)(100) ));
HXLINE( 815)		if ((::PlayState_obj::accuracy >= ((Float)100.00))) {
HXLINE( 817)			if ((::PlayState_obj::misses == 0)) {
HXLINE( 818)				::PlayState_obj::accuracy = ((Float)100.00);
            			}
            			else {
HXLINE( 821)				::PlayState_obj::accuracy = ((Float)99.98);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateAccuracy,(void))

void PlayState_obj::schoolIntro( ::DialogueBox dialogueBox){
            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,black1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_855_schoolIntro)
HXLINE( 856)			{
HXLINE( 856)				 ::flixel::FlxSprite _g = black1;
HXDLIN( 856)				_g->set_alpha((_g->alpha - ((Float)0.15)));
            			}
HXLINE( 858)			if ((black1->alpha > 0)) {
HXLINE( 860)				tmr->reset(((Float)0.3));
            			}
            			else {
HXLINE( 864)				if (::hx::IsNotNull( dialogueBox )) {
HXLINE( 866)					_gthis->inCutscene = true;
HXLINE( 868)					if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
            						HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer swagTimer){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_873_schoolIntro)
HXLINE( 874)							{
HXLINE( 874)								 ::flixel::FlxSprite _g = senpaiEvil;
HXDLIN( 874)								_g->set_alpha((_g->alpha + ((Float)0.15)));
            							}
HXLINE( 875)							if ((senpaiEvil->alpha < 1)) {
HXLINE( 877)								swagTimer->reset(null());
            							}
            							else {
            								HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(0)
            								void _hx_run(){
            									HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::DialogueBox,dialogueBox) HXARGC(0)
            									void _hx_run(){
            										HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_888_schoolIntro)
HXLINE( 888)										_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            									}
            									HX_END_LOCAL_FUNC0((void))

            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_883_schoolIntro)
HXLINE( 884)									_gthis->remove(senpaiEvil,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 885)									_gthis->remove(red1,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 886)									::flixel::FlxG_obj::camera->fade(-1,((Float)0.01),true, ::Dynamic(new _hx_Closure_0(_gthis,dialogueBox)),true);
            								}
            								HX_END_LOCAL_FUNC0((void))

            								HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            								void _hx_run( ::flixel::util::FlxTimer deadTime){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_893_schoolIntro)
HXLINE( 893)									::flixel::FlxG_obj::camera->fade(-1,((Float)1.6),false,null(),null());
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 881)								senpaiEvil->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 882)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 882)								::String _hx_tmp1 = ::Paths_obj::sound(HX_("Senpai_Dies",56,a2,b9,ec),HX_("shared",a5,5e,2b,1d));
HXDLIN( 882)								_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),false,null(),true, ::Dynamic(new _hx_Closure_1(_gthis,dialogueBox,red1,senpaiEvil)));
HXLINE( 891)								 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)3.2), ::Dynamic(new _hx_Closure_2()),null());
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 870)						_gthis->add(senpaiEvil).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 871)						senpaiEvil->set_alpha(( (Float)(0) ));
HXLINE( 872)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_3(_gthis,dialogueBox,red1,senpaiEvil)),null());
            					}
            					else {
HXLINE( 900)						_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            				else {
HXLINE( 904)					_gthis->startCountdown();
            				}
HXLINE( 906)				_gthis->remove(black1,null()).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_828_schoolIntro)
HXLINE( 827)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 829)		 ::flixel::FlxSprite black =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN( 829)		 ::flixel::FlxSprite black1 = black->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-16777216,null(),null());
HXLINE( 830)		black1->scrollFactor->set(null(),null());
HXLINE( 831)		this->add(black1);
HXLINE( 833)		 ::flixel::FlxSprite red =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN( 833)		 ::flixel::FlxSprite red1 = red->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-58575,null(),null());
HXLINE( 834)		red1->scrollFactor->set(null(),null());
HXLINE( 836)		 ::flixel::FlxSprite senpaiEvil =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 837)		 ::flixel::FlxSprite senpaiEvil1 = senpaiEvil;
HXDLIN( 837)		::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/senpaiCrazy",d1,d1,90,fa)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7));
HXDLIN( 837)		senpaiEvil1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/senpaiCrazy",d1,d1,90,fa)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week6",c2,95,be,c7))));
HXLINE( 838)		senpaiEvil->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Senpai Pre Explosion",54,71,6e,81),24,false,null(),null());
HXLINE( 839)		 ::flixel::FlxSprite senpaiEvil2 = senpaiEvil;
HXDLIN( 839)		senpaiEvil2->setGraphicSize(::Std_obj::_hx_int((senpaiEvil->get_width() * ( (Float)(6) ))),null());
HXLINE( 840)		senpaiEvil->scrollFactor->set(null(),null());
HXLINE( 841)		senpaiEvil->updateHitbox();
HXLINE( 842)		senpaiEvil->screenCenter(null());
HXLINE( 844)		bool _hx_tmp1;
HXDLIN( 844)		bool _hx_tmp2;
HXDLIN( 844)		if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() != HX_("roses",04,6c,64,ed))) {
HXLINE( 844)			_hx_tmp2 = (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c));
            		}
            		else {
HXLINE( 844)			_hx_tmp2 = true;
            		}
HXDLIN( 844)		if (!(_hx_tmp2)) {
HXLINE( 844)			_hx_tmp1 = (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("winter-horrorland",9d,39,f4,1e));
            		}
            		else {
HXLINE( 844)			_hx_tmp1 = true;
            		}
HXDLIN( 844)		if (_hx_tmp1) {
HXLINE( 846)			this->remove(black1,null());
HXLINE( 848)			if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
HXLINE( 850)				this->add(red1);
            			}
            		}
HXLINE( 854)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_4(_gthis,dialogueBox,red1,black1,senpaiEvil)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,schoolIntro,(void))

void PlayState_obj::startCountdown(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis,::Array< int >,swagCounter) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_932_startCountdown)
HXLINE( 933)			_gthis->dad->dance();
HXLINE( 934)			_gthis->gf->dance();
HXLINE( 935)			if (!(_gthis->frozen)) {
HXLINE( 937)				_gthis->boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 938)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FrightSwitch",6a,10,56,29),::hx::paccDynamic)) )) {
HXLINE( 940)					bool _hx_tmp;
HXDLIN( 940)					if (::hx::IsGreaterEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),50 )) {
HXLINE( 940)						_hx_tmp = ::hx::IsLess( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),100 );
            					}
            					else {
HXLINE( 940)						_hx_tmp = false;
            					}
HXDLIN( 940)					if (_hx_tmp) {
HXLINE( 941)						_gthis->boyfriend->playAnim(HX_("scared",20,78,2a,3c),null(),null(),null());
            					}
            					else {
HXLINE( 942)						if (::hx::IsGreaterEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),100 )) {
HXLINE( 943)							_gthis->boyfriend->playAnim(HX_("worried",30,ba,6f,a5),null(),null(),null());
            						}
            					}
            				}
            			}
            			else {
HXLINE( 947)				_gthis->boyfriend->playAnim(HX_("frozen",a0,89,d0,b5),null(),null(),null());
            			}
HXLINE( 949)			 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 950)			introAssets->set(HX_("default",c1,d8,c3,9b),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_32,3));
HXLINE( 951)			introAssets->set(HX_("school",74,b8,c8,40),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_33,3));
HXLINE( 956)			introAssets->set(HX_("schoolEvil",28,a1,f5,f7),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_34,3));
HXLINE( 962)			::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(HX_("default",c1,d8,c3,9b))) );
HXLINE( 963)			::String altSuffix = HX_("",00,00,00,00);
HXLINE( 965)			{
HXLINE( 965)				 ::Dynamic value = introAssets->keys();
HXDLIN( 965)				while(( (bool)(value->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 965)					::String value1 = ( (::String)(value->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 967)					if ((value1 == ::PlayState_obj::curStage)) {
HXLINE( 969)						introAlts = ( (::Array< ::String >)(introAssets->get(value1)) );
HXLINE( 970)						altSuffix = HX_("-pixel",39,03,b3,c0);
            					}
            				}
            			}
HXLINE( 974)			switch((int)(swagCounter->__get(0))){
            				case (int)0: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_981_startCountdown)
HXLINE( 982)						{
HXLINE( 982)							 ::flixel::FlxCamera _g = _gthis->camHUD;
HXDLIN( 982)							_g->set_alpha((_g->alpha + ((Float)0.166666666666666657)));
            						}
HXLINE( 983)						{
HXLINE( 983)							 ::flixel::FlxCamera _g1 = _gthis->camNOTES;
HXDLIN( 983)							_g1->set_alpha((_g1->alpha + ((Float)0.166666666666666657)));
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 978)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 978)					::String _hx_tmp1 = ::Paths_obj::sound((HX_("intro3",47,54,90,9e) + altSuffix),HX_("shared",a5,5e,2b,1d));
HXDLIN( 978)					_hx_tmp->play(_hx_tmp1,((((Float)0.6) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 980)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.03), ::Dynamic(new _hx_Closure_0(_gthis)),10);
            				}
            				break;
            				case (int)1: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,ready) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1003_startCountdown)
HXLINE(1003)						ready->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 986)					 ::flixel::FlxSprite ready =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 987)					if ((introAlts->__get(0) == HX_("ready",63,a0,ba,e6))) {
HXLINE( 988)						 ::flixel::FlxSprite ready1 = ready;
HXDLIN( 988)						ready1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
            					}
            					else {
HXLINE( 990)						 ::flixel::FlxSprite ready1 = ready;
HXDLIN( 990)						ready1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
            					}
HXLINE( 991)					ready->scrollFactor->set(null(),null());
HXLINE( 992)					ready->updateHitbox();
HXLINE( 994)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE( 995)						 ::flixel::FlxSprite ready1 = ready;
HXDLIN( 995)						Float _hx_tmp = ready->get_width();
HXDLIN( 995)						ready1->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE( 997)					ready->screenCenter(null());
HXLINE( 998)					_gthis->add(ready).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 999)					 ::flixel::FlxSprite ready1 = ready;
HXDLIN( 999)					 ::flixel::FlxSprite _g = ready;
HXDLIN( 999)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN( 999)					::flixel::tweens::FlxTween_obj::tween(ready1,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(ready)))));
HXLINE(1006)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1006)					::String _hx_tmp2 = ::Paths_obj::sound((HX_("intro2",46,54,90,9e) + altSuffix),HX_("shared",a5,5e,2b,1d));
HXDLIN(1006)					_hx_tmp1->play(_hx_tmp2,((((Float)0.6) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null());
            				}
            				break;
            				case (int)2: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::flixel::FlxSprite,set) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1025_startCountdown)
HXLINE(1025)						set->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1008)					 ::flixel::FlxSprite set =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(1009)					if ((introAlts->__get(1) == HX_("set",a2,9b,57,00))) {
HXLINE(1010)						 ::flixel::FlxSprite set1 = set;
HXDLIN(1010)						set1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
            					}
            					else {
HXLINE(1012)						 ::flixel::FlxSprite set1 = set;
HXDLIN(1012)						set1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
            					}
HXLINE(1014)					set->scrollFactor->set(null(),null());
HXLINE(1016)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(1017)						 ::flixel::FlxSprite set1 = set;
HXDLIN(1017)						Float _hx_tmp = set->get_width();
HXDLIN(1017)						set1->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1019)					set->screenCenter(null());
HXLINE(1020)					_gthis->add(set).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1021)					 ::flixel::FlxSprite set1 = set;
HXDLIN(1021)					 ::flixel::FlxSprite _g = set;
HXDLIN(1021)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1021)					::flixel::tweens::FlxTween_obj::tween(set1,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(set)))));
HXLINE(1028)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1028)					::String _hx_tmp2 = ::Paths_obj::sound((HX_("intro1",45,54,90,9e) + altSuffix),HX_("shared",a5,5e,2b,1d));
HXDLIN(1028)					_hx_tmp1->play(_hx_tmp2,((((Float)0.6) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null());
            				}
            				break;
            				case (int)3: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::flixel::FlxSprite,go) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1049_startCountdown)
HXLINE(1049)						go->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1030)					 ::flixel::FlxSprite go =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(1031)					if ((introAlts->__get(2) == HX_("go",28,5a,00,00))) {
HXLINE(1032)						 ::flixel::FlxSprite go1 = go;
HXDLIN(1032)						go1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
            					}
            					else {
HXLINE(1034)						 ::flixel::FlxSprite go1 = go;
HXDLIN(1034)						go1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
            					}
HXLINE(1036)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(1037)						 ::flixel::FlxSprite go1 = go;
HXDLIN(1037)						Float _hx_tmp = go->get_width();
HXDLIN(1037)						go1->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1039)					go->scrollFactor->set(null(),null());
HXLINE(1041)					go->updateHitbox();
HXLINE(1043)					go->screenCenter(null());
HXLINE(1044)					_gthis->add(go).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1045)					 ::flixel::FlxSprite go1 = go;
HXDLIN(1045)					 ::flixel::FlxSprite _g = go;
HXDLIN(1045)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1045)					::flixel::tweens::FlxTween_obj::tween(go1,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_3(go)))));
HXLINE(1052)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1052)					::String _hx_tmp2 = ::Paths_obj::sound((HX_("introGo",b4,7b,b9,1f) + altSuffix),HX_("shared",a5,5e,2b,1d));
HXDLIN(1052)					_hx_tmp1->play(_hx_tmp2,((((Float)0.6) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null());
            				}
            				break;
            				case (int)4: {
            				}
            				break;
            			}
HXLINE(1056)			::Array< int > swagCounter1 = swagCounter;
HXDLIN(1056)			int _hx_tmp = 0;
HXDLIN(1056)			swagCounter1[_hx_tmp] = (swagCounter1->__get(_hx_tmp) + 1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_915_startCountdown)
HXLINE( 914)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 916)		this->inCutscene = false;
HXLINE( 918)		bool _hx_tmp;
HXDLIN( 918)		if ((::PlayState_obj::gameplayArea == HX_("Endless",94,c8,4c,0c))) {
HXLINE( 918)			if ((::PlayState_obj::gameplayArea == HX_("Endless",94,c8,4c,0c))) {
HXLINE( 918)				_hx_tmp = (::PlayState_obj::loops == 0);
            			}
            			else {
HXLINE( 918)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 918)			_hx_tmp = true;
            		}
HXDLIN( 918)		if (_hx_tmp) {
HXLINE( 920)			this->generateStaticArrows(0);
HXLINE( 921)			this->generateStaticArrows(1);
            		}
HXLINE( 924)		this->talking = false;
HXLINE( 925)		this->startedCountdown = true;
HXLINE( 926)		::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE( 927)		 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::Conductor >();
HXDLIN( 927)		::Conductor_obj::songPosition = (::Conductor_obj::songPosition - (::Conductor_obj::crochet * ( (Float)(5) )));
HXLINE( 929)		::Array< int > swagCounter = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_40,1);
HXLINE( 931)		 ::flixel::util::FlxTimer _hx_tmp2 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN( 931)		this->startTimer = _hx_tmp2->start((::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_4(_gthis,swagCounter)),5);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startCountdown,(void))

void PlayState_obj::startSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1066_startSong)
HXLINE(1067)		this->startingSong = false;
HXLINE(1069)		this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(1070)		this->lastReportedPlayheadPosition = 0;
HXLINE(1072)		if (!(this->paused)) {
HXLINE(1073)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("VibeSwitch",6a,9e,5d,65),::hx::paccDynamic)) )) {
HXLINE(1075)				Float _hx_switch_0 = ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Vibe",d6,5b,28,39),::hx::paccDynamic)) );
            				if (  (_hx_switch_0==((Float)0.8)) ){
HXLINE(1078)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1078)					::String _hx_tmp1 = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/Inst_HIFI.",c0,0d,67,4c)) + HX_("ogg",4f,94,54,00));
HXDLIN(1078)					_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),false,null());
HXDLIN(1078)					goto _hx_goto_41;
            				}
            				if (  (_hx_switch_0==((Float)1.2)) ){
HXLINE(1080)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1080)					::String _hx_tmp1 = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/Inst_LOFI.",7e,a7,f8,9d)) + HX_("ogg",4f,94,54,00));
HXDLIN(1080)					_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),false,null());
HXDLIN(1080)					goto _hx_goto_41;
            				}
            				/* default */{
HXLINE(1082)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1082)					::String _hx_tmp1 = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
HXDLIN(1082)					_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),false,null());
            				}
            				_hx_goto_41:;
            			}
            			else {
HXLINE(1086)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1086)				::String _hx_tmp1 = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
HXDLIN(1086)				_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),false,null());
            			}
            		}
HXLINE(1087)		::flixel::FlxG_obj::sound->music->onComplete = this->endSong_dyn();
HXLINE(1088)		this->vocals->play(null(),null(),null());
HXLINE(1090)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("OffbeatSwitch",19,40,f0,64),::hx::paccDynamic)) )) {
HXLINE(1091)			this->vocals->set_time((::Conductor_obj::songPosition + ((( (Float)(512) ) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Offbeat",45,80,79,99),::hx::paccDynamic)) )) / ( (Float)(100) ))));
            		}
HXLINE(1094)		this->songLength = ::flixel::FlxG_obj::sound->music->_length;
HXLINE(1096)		if (( (bool)(::MainVariables_obj::_variables->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(1098)			this->remove(::PlayState_obj::songPosBG,null());
HXLINE(1099)			this->remove(::PlayState_obj::songPosBar,null());
HXLINE(1100)			this->remove(this->songName,null());
HXLINE(1102)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,10,null());
HXDLIN(1102)			::PlayState_obj::songPosBG = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE(1103)			if (::hx::IsEq( ::MainVariables_obj::_variables->__Field(HX_("scroll",0d,d8,64,47),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE(1104)				::PlayState_obj::songPosBG->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            			}
HXLINE(1105)			::PlayState_obj::songPosBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(1106)			::PlayState_obj::songPosBG->scrollFactor->set(null(),null());
HXLINE(1107)			this->add(::PlayState_obj::songPosBG);
HXLINE(1108)			::PlayState_obj::songPosBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1110)			Float _hx_tmp1 = (::PlayState_obj::songPosBG->x + 4);
HXDLIN(1110)			Float _hx_tmp2 = (::PlayState_obj::songPosBG->y + 4);
HXDLIN(1110)			int _hx_tmp3 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_width() - ( (Float)(8) )));
HXDLIN(1110)			int _hx_tmp4 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_height() - ( (Float)(8) )));
HXDLIN(1110)			::PlayState_obj::songPosBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp3,_hx_tmp4,::hx::ObjectPtr<OBJ_>(this),HX_("songPositionBar",d5,62,6e,a6),0,(this->songLength - ( (Float)(1000) )),null());
HXLINE(1112)			::PlayState_obj::songPosBar->set_numDivisions(1000);
HXLINE(1113)			::PlayState_obj::songPosBar->scrollFactor->set(null(),null());
HXLINE(1114)			::PlayState_obj::songPosBar->createFilledBar(-8355712,-16711936,null(),null());
HXLINE(1115)			this->add(::PlayState_obj::songPosBar);
HXLINE(1116)			::PlayState_obj::songPosBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1118)			Float songName = ::PlayState_obj::songPosBG->x;
HXDLIN(1118)			Float songName1 = ((songName + (::PlayState_obj::songPosBG->get_width() / ( (Float)(2) ))) - ( (Float)(20) ));
HXDLIN(1118)			 ::flixel::text::FlxText songName2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,songName1,::PlayState_obj::songPosBG->y,0,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),16,null());
HXLINE(1119)			if (::hx::IsEq( ::MainVariables_obj::_variables->__Field(HX_("scroll",0d,d8,64,47),::hx::paccDynamic),HX_("down",62,f8,6d,42) )) {
HXLINE(1120)				 ::flixel::text::FlxText _g = songName2;
HXDLIN(1120)				_g->set_y((_g->y - ( (Float)(3) )));
            			}
HXLINE(1121)			songName2->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1122)			songName2->scrollFactor->set(null(),null());
HXLINE(1123)			this->add(songName2);
HXLINE(1124)			songName2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1128)		::String _hx_switch_1 = this->curSong;
            		if (  (_hx_switch_1==HX_("Blammed",76,2a,51,09)) ||  (_hx_switch_1==HX_("Bopeebo",90,29,16,da)) ||  (_hx_switch_1==HX_("Cocoa",e9,0c,83,dd)) ||  (_hx_switch_1==HX_("Eggnog",81,78,4e,29)) ||  (_hx_switch_1==HX_("Philly",48,eb,f2,23)) ){
HXLINE(1130)			this->allowedToHeadbang = true;
HXDLIN(1130)			goto _hx_goto_42;
            		}
            		/* default */{
HXLINE(1131)			this->allowedToHeadbang = false;
            		}
            		_hx_goto_42:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startSong,(void))

void PlayState_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1144_generateSong)
HXLINE(1147)		 ::Dynamic songData = ::PlayState_obj::SONG;
HXLINE(1149)		::Conductor_obj::changeBPM(( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(1151)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("VibeSwitch",6a,9e,5d,65),::hx::paccDynamic)) )) {
HXLINE(1153)			Float _hx_switch_0 = ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Vibe",d6,5b,28,39),::hx::paccDynamic)) );
            			if (  (_hx_switch_0==((Float)0.8)) ){
HXLINE(1156)				::Conductor_obj::changeBPM((( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ) * ((Float)1.2)));
HXDLIN(1156)				goto _hx_goto_44;
            			}
            			if (  (_hx_switch_0==((Float)1.2)) ){
HXLINE(1158)				::Conductor_obj::changeBPM((( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ) * ((Float)0.8)));
HXDLIN(1158)				goto _hx_goto_44;
            			}
            			_hx_goto_44:;
            		}
HXLINE(1162)		this->curSong = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE(1164)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1165)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("VibeSwitch",6a,9e,5d,65),::hx::paccDynamic)) )) {
HXLINE(1167)				Float _hx_switch_1 = ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Vibe",d6,5b,28,39),::hx::paccDynamic)) );
            				if (  (_hx_switch_1==((Float)0.8)) ){
HXLINE(1170)					 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1170)					this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/Voices_HIFI.",7b,80,3f,17)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
HXDLIN(1170)					goto _hx_goto_45;
            				}
            				if (  (_hx_switch_1==((Float)1.2)) ){
HXLINE(1172)					 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1172)					this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/Voices_LOFI.",39,1a,d1,68)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
HXDLIN(1172)					goto _hx_goto_45;
            				}
            				/* default */{
HXLINE(1174)					 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1174)					this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
            				}
            				_hx_goto_45:;
            			}
            			else {
HXLINE(1178)				 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1178)				this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
            			}
            		}
            		else {
HXLINE(1180)			this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE(1182)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1184)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(1185)		this->add(this->notes);
HXLINE(1187)		::Array< ::Dynamic> noteData = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE(1192)		int playerCounter = 0;
HXLINE(1194)		int daBeats = 0;
HXLINE(1195)		{
HXLINE(1195)			int _g = 0;
HXDLIN(1195)			while((_g < noteData->length)){
HXLINE(1195)				 ::Dynamic section = noteData->__get(_g);
HXDLIN(1195)				_g = (_g + 1);
HXLINE(1197)				int coolSection = ::Std_obj::_hx_int((( (Float)(section->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) / ( (Float)(4) )));
HXLINE(1199)				{
HXLINE(1199)					int _g1 = 0;
HXDLIN(1199)					::cpp::VirtualArray _g2 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1199)					while((_g1 < _g2->get_length())){
HXLINE(1199)						 ::Dynamic songNotes = _g2->__get(_g1);
HXDLIN(1199)						_g1 = (_g1 + 1);
HXLINE(1202)						Float daStrumTime = ( (Float)(songNotes->__GetItem(0)) );
HXLINE(1203)						if ((daStrumTime < 0)) {
HXLINE(1204)							daStrumTime = ( (Float)(0) );
            						}
HXLINE(1205)						int daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__GetItem(1),4));
HXLINE(1207)						bool gottaHitNote = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(1209)						if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("OffbeatSwitch",19,40,f0,64),::hx::paccDynamic)) )) {
HXLINE(1211)							this->offbeatValue = ((( (Float)(512) ) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Offbeat",45,80,79,99),::hx::paccDynamic)) )) / ( (Float)(100) ));
            						}
HXLINE(1214)						if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("VibeSwitch",6a,9e,5d,65),::hx::paccDynamic)) )) {
HXLINE(1216)							Float _hx_switch_2 = ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Vibe",d6,5b,28,39),::hx::paccDynamic)) );
            							if (  (_hx_switch_2==((Float)0.8)) ){
HXLINE(1219)								daStrumTime = (( (Float)(((daStrumTime + ::MainVariables_obj::_variables->__Field(HX_("noteOffset",25,a5,53,fe),::hx::paccDynamic)) + this->offbeatValue)) ) * ((Float)0.8332));
HXDLIN(1219)								goto _hx_goto_48;
            							}
            							if (  (_hx_switch_2==((Float)1.2)) ){
HXLINE(1221)								daStrumTime = (( (Float)(((daStrumTime + ::MainVariables_obj::_variables->__Field(HX_("noteOffset",25,a5,53,fe),::hx::paccDynamic)) + this->offbeatValue)) ) * ((Float)1.25));
HXDLIN(1221)								goto _hx_goto_48;
            							}
            							/* default */{
HXLINE(1223)								daStrumTime = ( (Float)(((daStrumTime + ::MainVariables_obj::_variables->__Field(HX_("noteOffset",25,a5,53,fe),::hx::paccDynamic)) + this->offbeatValue)) );
            							}
            							_hx_goto_48:;
            						}
            						else {
HXLINE(1227)							daStrumTime = ( (Float)(((daStrumTime + ::MainVariables_obj::_variables->__Field(HX_("noteOffset",25,a5,53,fe),::hx::paccDynamic)) + this->offbeatValue)) );
            						}
HXLINE(1229)						if (::hx::IsGreater( songNotes->__GetItem(1),3 )) {
HXLINE(1231)							gottaHitNote = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            						}
HXLINE(1234)						::String _hx_switch_3 = ::PlayState_obj::chartType;
            						if (  (_hx_switch_3==HX_("chaos",40,9a,b3,45)) ){
HXLINE(1242)							switch((int)(::flixel::FlxG_obj::random->_hx_int(0,3,null()))){
            								case (int)0: {
HXLINE(1245)									daNoteData = 0;
            								}
            								break;
            								case (int)1: {
HXLINE(1247)									daNoteData = 1;
            								}
            								break;
            								case (int)2: {
HXLINE(1249)									daNoteData = 2;
            								}
            								break;
            								case (int)3: {
HXLINE(1251)									daNoteData = 3;
            								}
            								break;
            							}
HXLINE(1242)							goto _hx_goto_49;
            						}
            						if (  (_hx_switch_3==HX_("flip",ad,12,be,43)) ){
HXLINE(1239)							if (gottaHitNote) {
HXLINE(1240)								daNoteData = (3 - ::Std_obj::_hx_int(::hx::Mod(songNotes->__GetItem(1),4)));
            							}
HXLINE(1239)							goto _hx_goto_49;
            						}
            						if (  (_hx_switch_3==HX_("onearrow",a3,6d,b3,32)) ){
HXLINE(1254)							daNoteData = ::PlayState_obj::arrowLane;
HXDLIN(1254)							goto _hx_goto_49;
            						}
            						if (  (_hx_switch_3==HX_("stair",89,6c,0b,84)) ){
HXLINE(1256)							daNoteData = ::hx::Mod(this->stair,4);
HXLINE(1257)							this->stair++;
HXLINE(1255)							goto _hx_goto_49;
            						}
            						if (  (_hx_switch_3==HX_("standard",3d,37,78,ea)) ){
HXLINE(1237)							daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__GetItem(1),4));
HXDLIN(1237)							goto _hx_goto_49;
            						}
            						_hx_goto_49:;
HXLINE(1260)						 ::Note oldNote;
HXLINE(1261)						if ((this->unspawnNotes->length > 0)) {
HXLINE(1262)							oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
            						}
            						else {
HXLINE(1264)							oldNote = null();
            						}
HXLINE(1266)						 ::Note swagNote =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,oldNote,null());
HXLINE(1267)						swagNote->sustainLength = ( (Float)(songNotes->__GetItem(2)) );
HXLINE(1268)						swagNote->scrollFactor->set(0,0);
HXLINE(1270)						if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("WidenSwitch",2f,6d,9c,79),::hx::paccDynamic)) )) {
HXLINE(1271)							 ::flixel::math::FlxPoint _g = swagNote->scale;
HXDLIN(1271)							_g->set_x((_g->x * ((( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Widen",db,18,90,5d),::hx::paccDynamic)) ) / ( (Float)(100) )) + 1)));
            						}
HXLINE(1272)						bool _hx_tmp;
HXDLIN(1272)						if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("StretchSwitch",b9,1d,3f,3b),::hx::paccDynamic)) )) {
HXLINE(1272)							_hx_tmp = !(swagNote->isSustainNote);
            						}
            						else {
HXLINE(1272)							_hx_tmp = false;
            						}
HXDLIN(1272)						if (_hx_tmp) {
HXLINE(1273)							 ::flixel::math::FlxPoint _g = swagNote->scale;
HXDLIN(1273)							_g->set_y((_g->y * ((( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Stretch",e5,65,a4,c3),::hx::paccDynamic)) ) / ( (Float)(100) )) + 1)));
            						}
HXLINE(1275)						Float susLength = swagNote->sustainLength;
HXLINE(1277)						if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("EelNotesSwitch",89,94,f6,2c),::hx::paccDynamic)) )) {
HXLINE(1278)							susLength = (susLength + (( (Float)(10) ) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("EelNotes",b5,e0,13,34),::hx::paccDynamic)) )));
            						}
HXLINE(1280)						if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("VibeSwitch",6a,9e,5d,65),::hx::paccDynamic)) )) {
HXLINE(1282)							Float _hx_switch_4 = ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Vibe",d6,5b,28,39),::hx::paccDynamic)) );
            							if (  (_hx_switch_4==((Float)0.8)) ){
HXLINE(1285)								susLength = (((susLength / ::Conductor_obj::stepCrochet) * ((Float)0.8338)) / this->speedNote);
HXDLIN(1285)								goto _hx_goto_50;
            							}
            							if (  (_hx_switch_4==((Float)1.2)) ){
HXLINE(1287)								susLength = (((susLength / ::Conductor_obj::stepCrochet) * ((Float)1.25)) / this->speedNote);
HXDLIN(1287)								goto _hx_goto_50;
            							}
            							/* default */{
HXLINE(1289)								susLength = ((susLength / ::Conductor_obj::stepCrochet) / this->speedNote);
            							}
            							_hx_goto_50:;
            						}
            						else {
HXLINE(1293)							susLength = ((susLength / ::Conductor_obj::stepCrochet) / this->speedNote);
            						}
HXLINE(1295)						this->unspawnNotes->push(swagNote);
HXLINE(1297)						{
HXLINE(1297)							int _g = 0;
HXDLIN(1297)							int _g3 = ::Math_obj::floor(susLength);
HXDLIN(1297)							while((_g < _g3)){
HXLINE(1297)								_g = (_g + 1);
HXDLIN(1297)								int susNote = (_g - 1);
HXLINE(1299)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
HXLINE(1301)								 ::Note sustainNote =  ::Note_obj::__alloc( HX_CTX ,((daStrumTime + (::Conductor_obj::stepCrochet * ( (Float)(susNote) ))) + ::Conductor_obj::stepCrochet),daNoteData,oldNote,true);
HXLINE(1302)								sustainNote->scrollFactor->set(null(),null());
HXLINE(1303)								this->unspawnNotes->push(sustainNote);
HXLINE(1305)								sustainNote->mustPress = gottaHitNote;
HXLINE(1307)								if (sustainNote->mustPress) {
HXLINE(1309)									 ::Note _g = sustainNote;
HXDLIN(1309)									_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
            							}
            						}
HXLINE(1313)						swagNote->mustPress = gottaHitNote;
HXLINE(1315)						if (swagNote->mustPress) {
HXLINE(1317)							 ::Note _g = swagNote;
HXDLIN(1317)							_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            					}
            				}
HXLINE(1323)				daBeats = (daBeats + 1);
            			}
            		}
HXLINE(1329)		this->unspawnNotes->sort(this->sortByShit_dyn());
HXLINE(1331)		this->generatedMusic = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateSong,(void))

int PlayState_obj::sortByShit( ::Note Obj1, ::Note Obj2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1336_sortByShit)
HXDLIN(1336)		Float Value1 = Obj1->strumTime;
HXDLIN(1336)		Float Value2 = Obj2->strumTime;
HXDLIN(1336)		int result = 0;
HXDLIN(1336)		if ((Value1 < Value2)) {
HXDLIN(1336)			result = -1;
            		}
            		else {
HXDLIN(1336)			if ((Value1 > Value2)) {
HXDLIN(1336)				result = 1;
            			}
            		}
HXDLIN(1336)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByShit,return )

void PlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1343_generateStaticArrows)
HXDLIN(1343)		int _g = 0;
HXDLIN(1343)		while((_g < 4)){
HXDLIN(1343)			_g = (_g + 1);
HXDLIN(1343)			int i = (_g - 1);
HXLINE(1346)			 ::flixel::FlxSprite babyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,this->strumLine->y,null());
HXLINE(1348)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FlippedNotes",bf,7c,08,1d),::hx::paccDynamic)) )) {
HXLINE(1349)				this->noteOutput = ::Math_obj::abs(( (Float)((3 - i)) ));
            			}
            			else {
HXLINE(1351)				this->noteOutput = ::Math_obj::abs(( (Float)(i) ));
            			}
HXLINE(1353)			::String _hx_switch_0 = ::PlayState_obj::curStage;
            			if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ||  (_hx_switch_0==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE(1356)				babyArrow->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/pixelUI/arrows-pixels",b7,c3,c7,09)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),true,17,17,null(),null());
HXLINE(1357)				babyArrow->animation->add(HX_("green",c3,0e,ed,99),::Array_obj< int >::fromData( _hx_array_data_46c2835d_59,1),null(),null(),null(),null());
HXLINE(1358)				babyArrow->animation->add(HX_("red",51,d9,56,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_60,1),null(),null(),null(),null());
HXLINE(1359)				babyArrow->animation->add(HX_("blue",9a,42,19,41),::Array_obj< int >::fromData( _hx_array_data_46c2835d_61,1),null(),null(),null(),null());
HXLINE(1360)				babyArrow->animation->add(HX_("purplel",b0,7e,2d,e7),::Array_obj< int >::fromData( _hx_array_data_46c2835d_62,1),null(),null(),null(),null());
HXLINE(1362)				Float _hx_tmp = babyArrow->get_width();
HXDLIN(1362)				babyArrow->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
HXLINE(1363)				babyArrow->updateHitbox();
HXLINE(1364)				babyArrow->set_antialiasing(false);
HXLINE(1366)				Float _hx_switch_1 = this->noteOutput;
            				if (  (_hx_switch_1==( (Float)(0) )) ){
HXLINE(1369)					{
HXLINE(1369)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1369)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(0) ))));
            					}
HXLINE(1370)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_63,1),null(),null(),null(),null());
HXLINE(1371)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_64,2),12,false,null(),null());
HXLINE(1372)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_65,2),24,false,null(),null());
HXLINE(1368)					goto _hx_goto_57;
            				}
            				if (  (_hx_switch_1==( (Float)(1) )) ){
HXLINE(1374)					{
HXLINE(1374)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1374)						_g->set_x((_g->x + ::Note_obj::swagWidth));
            					}
HXLINE(1375)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_66,1),null(),null(),null(),null());
HXLINE(1376)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_67,2),12,false,null(),null());
HXLINE(1377)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_68,2),24,false,null(),null());
HXLINE(1373)					goto _hx_goto_57;
            				}
            				if (  (_hx_switch_1==( (Float)(2) )) ){
HXLINE(1379)					{
HXLINE(1379)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1379)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(2) ))));
            					}
HXLINE(1380)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_69,1),null(),null(),null(),null());
HXLINE(1381)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_70,2),12,false,null(),null());
HXLINE(1382)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_71,2),12,false,null(),null());
HXLINE(1378)					goto _hx_goto_57;
            				}
            				if (  (_hx_switch_1==( (Float)(3) )) ){
HXLINE(1384)					{
HXLINE(1384)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1384)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(3) ))));
            					}
HXLINE(1385)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_72,1),null(),null(),null(),null());
HXLINE(1386)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_73,2),12,false,null(),null());
HXLINE(1387)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_74,2),24,false,null(),null());
HXLINE(1383)					goto _hx_goto_57;
            				}
            				_hx_goto_57:;
HXLINE(1355)				goto _hx_goto_56;
            			}
            			/* default */{
HXLINE(1391)				::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d));
HXDLIN(1391)				babyArrow->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("shared",a5,5e,2b,1d))));
HXLINE(1392)				babyArrow->animation->addByPrefix(HX_("green",c3,0e,ed,99),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1393)				babyArrow->animation->addByPrefix(HX_("blue",9a,42,19,41),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1394)				babyArrow->animation->addByPrefix(HX_("purple",3c,f6,89,71),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1395)				babyArrow->animation->addByPrefix(HX_("red",51,d9,56,00),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1397)				babyArrow->set_antialiasing(true);
HXLINE(1398)				babyArrow->setGraphicSize(::Std_obj::_hx_int((babyArrow->get_width() * ((Float)0.7))),null());
HXLINE(1400)				Float _hx_switch_2 = this->noteOutput;
            				if (  (_hx_switch_2==( (Float)(0) )) ){
HXLINE(1403)					{
HXLINE(1403)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1403)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(0) ))));
            					}
HXLINE(1404)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1405)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("left press",aa,26,70,8e),24,false,null(),null());
HXLINE(1406)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("left confirm",e7,c7,19,fe),24,false,null(),null());
HXLINE(1402)					goto _hx_goto_55;
            				}
            				if (  (_hx_switch_2==( (Float)(1) )) ){
HXLINE(1408)					{
HXLINE(1408)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1408)						_g->set_x((_g->x + ::Note_obj::swagWidth));
            					}
HXLINE(1409)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1410)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("down press",45,4d,63,9c),24,false,null(),null());
HXLINE(1411)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("down confirm",42,0b,18,cc),24,false,null(),null());
HXLINE(1407)					goto _hx_goto_55;
            				}
            				if (  (_hx_switch_2==( (Float)(2) )) ){
HXLINE(1413)					{
HXLINE(1413)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1413)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(2) ))));
            					}
HXLINE(1414)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1415)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("up press",fe,fb,65,e9),24,false,null(),null());
HXLINE(1416)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("up confirm",3b,9a,2e,62),24,false,null(),null());
HXLINE(1412)					goto _hx_goto_55;
            				}
            				if (  (_hx_switch_2==( (Float)(3) )) ){
HXLINE(1418)					{
HXLINE(1418)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1418)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(3) ))));
            					}
HXLINE(1419)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1420)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("right press",3f,38,e4,c8),24,false,null(),null());
HXLINE(1421)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("right confirm",bc,28,e5,ca),24,false,null(),null());
HXLINE(1417)					goto _hx_goto_55;
            				}
            				_hx_goto_55:;
            			}
            			_hx_goto_56:;
HXLINE(1425)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FlippedNotes",bf,7c,08,1d),::hx::paccDynamic)) )) {
HXLINE(1427)				babyArrow->set_flipX(true);
HXLINE(1428)				babyArrow->set_flipY(true);
            			}
HXLINE(1431)			babyArrow->updateHitbox();
HXLINE(1432)			babyArrow->scrollFactor->set(null(),null());
HXLINE(1434)			babyArrow->ID = i;
HXLINE(1436)			switch((int)(player)){
            				case (int)0: {
HXLINE(1440)					this->player2Strums->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            				}
            				break;
            				case (int)1: {
HXLINE(1444)					this->playerStrums->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            				}
            				break;
            			}
HXLINE(1448)			babyArrow->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
HXLINE(1449)			{
HXLINE(1449)				 ::flixel::FlxSprite _g1 = babyArrow;
HXDLIN(1449)				_g1->set_x((_g1->x + 95));
            			}
HXLINE(1450)			{
HXLINE(1450)				 ::flixel::FlxSprite _g2 = babyArrow;
HXDLIN(1450)				_g2->set_x((_g2->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) * ( (Float)(player) ))));
            			}
HXLINE(1452)			this->strumLineNotes->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateStaticArrows,(void))

void PlayState_obj::tweenCamIn(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1458_tweenCamIn)
HXDLIN(1458)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),((Float)1.3))),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,tweenCamIn,(void))

void PlayState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1462_openSubState)
HXLINE(1463)		if (this->paused) {
HXLINE(1465)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1467)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1468)				this->vocals->pause();
            			}
HXLINE(1471)			if (!(this->startTimer->finished)) {
HXLINE(1472)				this->startTimer->active = false;
            			}
            		}
HXLINE(1475)		this->super::openSubState(SubState);
            	}


void PlayState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1479_closeSubState)
HXLINE(1480)		if (this->paused) {
HXLINE(1482)			bool _hx_tmp;
HXDLIN(1482)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1482)				_hx_tmp = !(this->startingSong);
            			}
            			else {
HXLINE(1482)				_hx_tmp = false;
            			}
HXDLIN(1482)			if (_hx_tmp) {
HXLINE(1484)				this->resyncVocals();
            			}
HXLINE(1487)			if (!(this->startTimer->finished)) {
HXLINE(1488)				this->startTimer->active = true;
            			}
HXLINE(1489)			this->paused = false;
HXLINE(1492)			if (this->startTimer->finished) {
HXLINE(1494)				::DiscordClient_obj::changePresence(this->detailsText,( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),this->iconRPC,true,(this->songLength - ::Conductor_obj::songPosition));
            			}
            			else {
HXLINE(1498)				::DiscordClient_obj::changePresence(this->detailsText,( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),this->iconRPC,null(),null());
            			}
            		}
HXLINE(1503)		this->super::closeSubState();
            	}


void PlayState_obj::onFocus(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1507_onFocus)
HXLINE(1509)		bool _hx_tmp;
HXDLIN(1509)		if ((this->health > ((Float)-0.1))) {
HXLINE(1509)			_hx_tmp = !(this->paused);
            		}
            		else {
HXLINE(1509)			_hx_tmp = false;
            		}
HXDLIN(1509)		if (_hx_tmp) {
HXLINE(1511)			if ((::Conductor_obj::songPosition > ((Float)0.0))) {
HXLINE(1513)				::DiscordClient_obj::changePresence(this->detailsText,( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),this->iconRPC,true,(this->songLength - ::Conductor_obj::songPosition));
            			}
            			else {
HXLINE(1517)				::DiscordClient_obj::changePresence(this->detailsText,( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),this->iconRPC,null(),null());
            			}
            		}
HXLINE(1522)		this->super::onFocus();
            	}


void PlayState_obj::onFocusLost(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1526_onFocusLost)
HXLINE(1528)		bool _hx_tmp;
HXDLIN(1528)		if ((this->health > ((Float)-0.00001))) {
HXLINE(1528)			_hx_tmp = !(this->paused);
            		}
            		else {
HXLINE(1528)			_hx_tmp = false;
            		}
HXDLIN(1528)		if (_hx_tmp) {
HXLINE(1530)			::DiscordClient_obj::changePresence(this->detailsPausedText,( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),this->iconRPC,null(),null());
            		}
HXLINE(1534)		this->super::onFocusLost();
            	}


void PlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1538_resyncVocals)
HXLINE(1539)		this->vocals->pause();
HXLINE(1541)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1542)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(1543)		if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("OffbeatSwitch",19,40,f0,64),::hx::paccDynamic)) )) {
HXLINE(1545)			this->vocals->set_time((::Conductor_obj::songPosition + ((( (Float)(512) ) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Offbeat",45,80,79,99),::hx::paccDynamic)) )) / ( (Float)(100) ))));
            		}
            		else {
HXLINE(1548)			this->vocals->set_time(::Conductor_obj::songPosition);
            		}
HXLINE(1550)		this->vocals->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resyncVocals,(void))

Float PlayState_obj::truncateFloat(Float number,int precision){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1557_truncateFloat)
HXLINE(1558)		Float num = number;
HXLINE(1559)		num = (num * ::Math_obj::pow(( (Float)(10) ),( (Float)(precision) )));
HXLINE(1560)		num = (( (Float)(::Math_obj::round(num)) ) / ::Math_obj::pow(( (Float)(10) ),( (Float)(precision) )));
HXLINE(1561)		return num;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,truncateFloat,return )

void PlayState_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite heart){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2228_update)
HXLINE(2228)			if ((heart->ID > (_gthis->lives - ( (Float)(1) )))) {
HXLINE(2230)				Float a = heart->angle;
HXDLIN(2230)				heart->set_angle((a + ((_gthis->miscLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(30) ) - a))));
HXLINE(2231)				Float a1 = heart->y;
HXDLIN(2231)				int b = ::flixel::FlxG_obj::height;
HXDLIN(2231)				Float b1 = ((b + heart->get_height()) + 100);
HXDLIN(2231)				heart->set_y((a1 + ((_gthis->miscLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b1 - a1))));
HXLINE(2232)				Float heart1 = heart->y;
HXDLIN(2232)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(2232)				if ((heart1 >= (_hx_tmp + heart->get_height()))) {
HXLINE(2233)					heart->kill();
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1565_update)
HXLINE(1564)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1570)		if (this->startedCountdown) {
HXLINE(1572)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("EarthquakeSwitch",01,5a,49,21),::hx::paccDynamic)) )) {
HXLINE(1573)				::flixel::FlxG_obj::cameras->shake((( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Earthquake",2d,bc,c0,04),::hx::paccDynamic)) ) / ( (Float)(2000) )),((Float)0.2),null(),null(),null());
            			}
HXLINE(1575)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("LoveSwitch",26,50,0e,4c),::hx::paccDynamic)) )) {
HXLINE(1576)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1576)				_hx_tmp->health = (_hx_tmp->health + (( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Love",92,d8,90,32),::hx::paccDynamic)) ) / ( (Float)(600000) )));
            			}
HXLINE(1578)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FrightSwitch",6a,10,56,29),::hx::paccDynamic)) )) {
HXLINE(1579)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1579)				_hx_tmp->health = (_hx_tmp->health - (( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic)) ) / ( (Float)(700000) )));
            			}
HXLINE(1581)			bool _hx_tmp;
HXDLIN(1581)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("PaparazziSwitch",ec,03,c3,d0),::hx::paccDynamic)) )) {
HXLINE(1581)				_hx_tmp = (this->paparazziInt == 0);
            			}
            			else {
HXLINE(1581)				_hx_tmp = false;
            			}
HXDLIN(1581)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1585_update)
HXLINE(1586)					 ::flixel::FlxCamera _gthis1 = _gthis->camHUD;
HXDLIN(1586)					_gthis1->flash(-1,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.3),null()),null(),true);
HXLINE(1587)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1587)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("paparazzi",f8,f3,e5,d3),HX_("shared",a5,5e,2b,1d));
HXDLIN(1587)					Float _hx_tmp2 = ::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.3),null());
HXDLIN(1587)					_hx_tmp->play(_hx_tmp1,((_hx_tmp2 * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE(1588)					_gthis->paparazziInt = 0;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1583)				this->paparazziInt = 1;
HXLINE(1584)				 ::flixel::util::FlxTimer _hx_tmp =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(1584)				_hx_tmp->start(::flixel::FlxG_obj::random->_hx_float((( (Float)(2) ) / ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Paparazzi",d8,d3,b8,75),::hx::paccDynamic)) )),(( (Float)(6) ) / ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Paparazzi",d8,d3,b8,75),::hx::paccDynamic)) )),null()), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
HXLINE(1592)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("SeasickSwitch",81,01,b6,c2),::hx::paccDynamic)) )) {
HXLINE(1594)				{
HXLINE(1594)					 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(1594)					_g->set_angle((_g->angle + (::Math_obj::sin((((::Conductor_obj::songPosition * ::Conductor_obj::bpm) / ( (Float)(100) )) / ( (Float)(500) ))) * (((Float)0.008) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Seasick",ad,c3,b2,03),::hx::paccDynamic)) )))));
            				}
HXLINE(1595)				{
HXLINE(1595)					 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(1595)					_g1->set_angle((_g1->angle + (::Math_obj::cos((((::Conductor_obj::songPosition * ::Conductor_obj::bpm) / ( (Float)(100) )) / ( (Float)(500) ))) * (((Float)0.008) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Seasick",ad,c3,b2,03),::hx::paccDynamic)) )))));
            				}
HXLINE(1596)				{
HXLINE(1596)					 ::flixel::FlxCamera _g2 = this->camNOTES;
HXDLIN(1596)					_g2->set_angle((_g2->angle + (::Math_obj::cos((((::Conductor_obj::songPosition * ::Conductor_obj::bpm) / ( (Float)(100) )) / ( (Float)(500) ))) * (((Float)0.008) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Seasick",ad,c3,b2,03),::hx::paccDynamic)) )))));
            				}
            			}
HXLINE(1599)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("CameraSwitch",99,5a,7a,56),::hx::paccDynamic)) )) {
HXLINE(1601)				{
HXLINE(1601)					 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(1601)					_g->set_angle((_g->angle + (((Float)0.01) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Camera",c5,ba,20,ec),::hx::paccDynamic)) ))));
            				}
HXLINE(1602)				{
HXLINE(1602)					 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(1602)					_g1->set_angle((_g1->angle - (((Float)0.01) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Camera",c5,ba,20,ec),::hx::paccDynamic)) ))));
            				}
HXLINE(1603)				{
HXLINE(1603)					 ::flixel::FlxCamera _g2 = this->camNOTES;
HXDLIN(1603)					_g2->set_angle((_g2->angle - (((Float)0.01) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Camera",c5,ba,20,ec),::hx::paccDynamic)) ))));
            				}
            			}
            		}
HXLINE(1607)		::PlayState_obj::cameraX = this->camFollow->x;
HXLINE(1608)		::PlayState_obj::cameraY = this->camFollow->y;
HXLINE(1610)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1610)		if (_this->keyManager->checkStatus(57,_this->status)) {
HXLINE(1612)			if ((this->iconP1->animation->_curAnim->name == HX_("bf-old",5e,ba,eb,07))) {
HXLINE(1613)				this->iconP1->animation->play(( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
            			}
            			else {
HXLINE(1615)				this->iconP1->animation->play(HX_("bf-old",5e,ba,eb,07),null(),null(),null());
            			}
            		}
HXLINE(1618)		if (::hx::IsEq( this->currentFrames,::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic) )) {
HXLINE(1620)			{
HXLINE(1620)				int _g = 0;
HXDLIN(1620)				int _g1 = this->notesHitArray->length;
HXDLIN(1620)				while((_g < _g1)){
HXLINE(1620)					_g = (_g + 1);
HXDLIN(1620)					int i = (_g - 1);
HXLINE(1622)					 ::Date cock = this->notesHitArray->__get(i).StaticCast<  ::Date >();
HXLINE(1623)					if (::hx::IsNotNull( cock )) {
HXLINE(1624)						Float _hx_tmp = (cock->getTime() + 2000);
HXDLIN(1624)						if ((_hx_tmp < ::Date_obj::now()->getTime())) {
HXLINE(1625)							this->notesHitArray->remove(cock);
            						}
            					}
            				}
            			}
HXLINE(1627)			this->nps = ::Math_obj::floor((( (Float)(this->notesHitArray->length) ) / ( (Float)(2) )));
HXLINE(1628)			this->currentFrames = 0;
            		}
            		else {
HXLINE(1631)			this->currentFrames++;
            		}
HXLINE(1633)		if ((::PlayState_obj::curStage == HX_("philly",28,77,5e,ef))) {
HXLINE(1636)			if (this->trainMoving) {
HXLINE(1638)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1638)				_hx_tmp->trainFrameTiming = (_hx_tmp->trainFrameTiming + elapsed);
HXLINE(1640)				if ((this->trainFrameTiming >= ((Float)0.0416666666666666644))) {
HXLINE(1642)					this->updateTrainPos();
HXLINE(1643)					this->trainFrameTiming = ( (Float)(0) );
            				}
            			}
            		}
HXLINE(1649)		this->super::update(elapsed);
HXLINE(1651)		this->scoreTxt->set_text((HX_("Score: ",58,c6,eb,45) + this->songScore));
HXLINE(1652)		this->missTxt->set_text((HX_("Misses: ",b0,3f,b3,b7) + ::PlayState_obj::misses));
HXLINE(1653)		 ::flixel::text::FlxText _hx_tmp = this->accuracyTxt;
HXDLIN(1653)		_hx_tmp->set_text(((HX_("Accuracy: ",3f,fd,6e,36) + this->truncateFloat(::PlayState_obj::accuracy,2)) + HX_("%",25,00,00,00)));
HXLINE(1654)		this->npsTxt->set_text((HX_("NPS: ",b7,7e,61,1e) + this->nps));
HXLINE(1656)		bool _hx_tmp1;
HXDLIN(1656)		bool _hx_tmp2;
HXDLIN(1656)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1656)		if (_this1->keyManager->checkStatus(13,_this1->status)) {
HXLINE(1656)			_hx_tmp2 = this->startedCountdown;
            		}
            		else {
HXLINE(1656)			_hx_tmp2 = false;
            		}
HXDLIN(1656)		if (_hx_tmp2) {
HXLINE(1656)			_hx_tmp1 = this->canPause;
            		}
            		else {
HXLINE(1656)			_hx_tmp1 = false;
            		}
HXDLIN(1656)		if (_hx_tmp1) {
HXLINE(1658)			this->persistentUpdate = false;
HXLINE(1659)			this->persistentDraw = true;
HXLINE(1660)			this->paused = true;
HXLINE(1663)			if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < ((Float)0.1))) {
HXLINE(1666)				 ::flixel::FlxState nextState =  ::GitarooPause_obj::__alloc( HX_CTX );
HXDLIN(1666)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1666)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            			else {
HXLINE(1670)				Float _hx_tmp = this->boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(1670)				this->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ,_hx_tmp,this->boyfriend->getScreenPosition(null(),null())->y));
            			}
HXLINE(1674)			::DiscordClient_obj::changePresence(this->detailsPausedText,( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),this->iconRPC,null(),null());
            		}
HXLINE(1678)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1678)		if (_this2->keyManager->checkStatus(55,_this2->status)) {
HXLINE(1680)			this->canDie = false;
HXLINE(1681)			{
HXLINE(1681)				 ::flixel::FlxState nextState =  ::ChartingState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(1681)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1681)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(1684)			::DiscordClient_obj::changePresence(HX_("Charting a song",b0,65,45,68),null(),null(),true,null());
            		}
HXLINE(1691)		 ::HealthIcon _hx_tmp3 = this->iconP1;
HXDLIN(1691)		Float a = this->iconP1->get_width();
HXDLIN(1691)		_hx_tmp3->setGraphicSize(::Std_obj::_hx_int((a + ((this->zoomLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(150) ) - a)))),null());
HXLINE(1692)		 ::HealthIcon _hx_tmp4 = this->iconP2;
HXDLIN(1692)		Float a1 = this->iconP2->get_width();
HXDLIN(1692)		_hx_tmp4->setGraphicSize(::Std_obj::_hx_int((a1 + ((this->zoomLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(150) ) - a1)))),null());
HXLINE(1694)		this->iconP1->updateHitbox();
HXLINE(1695)		this->iconP2->updateHitbox();
HXLINE(1697)		int iconOffset = 26;
HXLINE(1699)		 ::HealthIcon _hx_tmp5 = this->iconP1;
HXDLIN(1699)		Float _hx_tmp6 = this->healthBar->x;
HXDLIN(1699)		Float _hx_tmp7 = this->healthBar->get_width();
HXDLIN(1699)		_hx_tmp5->set_x((_hx_tmp6 + ((_hx_tmp7 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))) - ( (Float)(iconOffset) ))));
HXLINE(1700)		 ::HealthIcon _hx_tmp8 = this->iconP2;
HXDLIN(1700)		Float _hx_tmp9 = this->healthBar->x;
HXDLIN(1700)		Float _hx_tmp10 = this->healthBar->get_width();
HXDLIN(1700)		Float _hx_tmp11 = (_hx_tmp9 + (_hx_tmp10 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))));
HXDLIN(1700)		_hx_tmp8->set_x((_hx_tmp11 - (this->iconP2->get_width() - ( (Float)(iconOffset) ))));
HXLINE(1702)		if ((this->health > 2)) {
HXLINE(1703)			this->health = ( (Float)(2) );
            		}
HXLINE(1705)		if ((this->healthBar->get_percent() < 20)) {
HXLINE(1706)			this->iconP1->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(1707)			if ((this->healthBar->get_percent() > 80)) {
HXLINE(1708)				this->iconP1->animation->_curAnim->set_curFrame(2);
            			}
            			else {
HXLINE(1710)				this->iconP1->animation->_curAnim->set_curFrame(0);
            			}
            		}
HXLINE(1712)		if ((this->healthBar->get_percent() > 80)) {
HXLINE(1713)			this->iconP2->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(1714)			if ((this->healthBar->get_percent() < 20)) {
HXLINE(1715)				this->iconP2->animation->_curAnim->set_curFrame(2);
            			}
            			else {
HXLINE(1717)				this->iconP2->animation->_curAnim->set_curFrame(0);
            			}
            		}
HXLINE(1723)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1723)		if (_this3->keyManager->checkStatus(56,_this3->status)) {
HXLINE(1724)			 ::flixel::FlxState nextState =  ::AnimationDebug_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXDLIN(1724)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1724)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE(1727)		if (this->startingSong) {
HXLINE(1729)			if (this->startedCountdown) {
HXLINE(1731)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(1731)				::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(1732)				if ((::Conductor_obj::songPosition >= 0)) {
HXLINE(1733)					this->startSong();
            				}
            			}
            		}
            		else {
HXLINE(1739)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(1739)			::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(1740)			this->songPositionBar = ::Conductor_obj::songPosition;
HXLINE(1742)			if (!(this->paused)) {
HXLINE(1744)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1744)				_hx_tmp->songTime = (_hx_tmp->songTime + (::flixel::FlxG_obj::game->ticks - this->previousFrameTime));
HXLINE(1745)				this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(1748)				if ((::Conductor_obj::lastSongPos != ::Conductor_obj::songPosition)) {
HXLINE(1750)					this->songTime = ((this->songTime + ::Conductor_obj::songPosition) / ( (Float)(2) ));
HXLINE(1751)					::Conductor_obj::lastSongPos = ::Conductor_obj::songPosition;
            				}
            			}
            		}
HXLINE(1760)		bool _hx_tmp12;
HXDLIN(1760)		if (this->generatedMusic) {
HXLINE(1760)			_hx_tmp12 = ::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) )))) );
            		}
            		else {
HXLINE(1760)			_hx_tmp12 = false;
            		}
HXDLIN(1760)		if (_hx_tmp12) {
HXLINE(1763)			if (this->allowedToHeadbang) {
HXLINE(1766)				bool _hx_tmp;
HXDLIN(1766)				bool _hx_tmp1;
HXDLIN(1766)				if ((this->gf->animation->_curAnim->name != HX_("danceLeft",da,cc,f9,df))) {
HXLINE(1766)					_hx_tmp1 = (this->gf->animation->_curAnim->name == HX_("danceRight",a9,7f,a6,91));
            				}
            				else {
HXLINE(1766)					_hx_tmp1 = true;
            				}
HXDLIN(1766)				if (!(_hx_tmp1)) {
HXLINE(1766)					_hx_tmp = (this->gf->animation->_curAnim->name == HX_("idle",14,a7,b3,45));
            				}
            				else {
HXLINE(1766)					_hx_tmp = true;
            				}
HXDLIN(1766)				if (_hx_tmp) {
HXLINE(1769)					::String _hx_switch_0 = this->curSong;
            					if (  (_hx_switch_0==HX_("Blammed",76,2a,51,09)) ){
HXLINE(1808)						bool _hx_tmp;
HXDLIN(1808)						if ((this->curBeat > 30)) {
HXLINE(1808)							_hx_tmp = (this->curBeat < 190);
            						}
            						else {
HXLINE(1808)							_hx_tmp = false;
            						}
HXDLIN(1808)						if (_hx_tmp) {
HXLINE(1810)							bool _hx_tmp;
HXDLIN(1810)							if ((this->curBeat >= 90)) {
HXLINE(1810)								_hx_tmp = (this->curBeat > 128);
            							}
            							else {
HXLINE(1810)								_hx_tmp = true;
            							}
HXDLIN(1810)							if (_hx_tmp) {
HXLINE(1812)								if ((::hx::Mod(this->curBeat,4) == 2)) {
HXLINE(1814)									if (!(this->triggeredAlready)) {
HXLINE(1816)										this->gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(1817)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(1819)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(1808)						goto _hx_goto_83;
            					}
            					if (  (_hx_switch_0==HX_("Bopeebo",90,29,16,da)) ){
HXLINE(1794)						bool _hx_tmp;
HXDLIN(1794)						if ((this->curBeat > 5)) {
HXLINE(1794)							_hx_tmp = (this->curBeat < 130);
            						}
            						else {
HXLINE(1794)							_hx_tmp = false;
            						}
HXDLIN(1794)						if (_hx_tmp) {
HXLINE(1796)							if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(1798)								if (!(this->triggeredAlready)) {
HXLINE(1800)									this->gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(1801)									this->triggeredAlready = true;
            								}
            							}
            							else {
HXLINE(1803)								this->triggeredAlready = false;
            							}
            						}
HXLINE(1794)						goto _hx_goto_83;
            					}
            					if (  (_hx_switch_0==HX_("Cocoa",e9,0c,83,dd)) ){
HXLINE(1825)						if ((this->curBeat < 170)) {
HXLINE(1827)							bool _hx_tmp;
HXDLIN(1827)							if ((this->curBeat >= 65)) {
HXLINE(1827)								if ((this->curBeat > 130)) {
HXLINE(1827)									_hx_tmp = (this->curBeat < 145);
            								}
            								else {
HXLINE(1827)									_hx_tmp = false;
            								}
            							}
            							else {
HXLINE(1827)								_hx_tmp = true;
            							}
HXDLIN(1827)							if (_hx_tmp) {
HXLINE(1829)								if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(1831)									if (!(this->triggeredAlready)) {
HXLINE(1833)										this->gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(1834)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(1836)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(1825)						goto _hx_goto_83;
            					}
            					if (  (_hx_switch_0==HX_("Eggnog",81,78,4e,29)) ){
HXLINE(1842)						bool _hx_tmp;
HXDLIN(1842)						bool _hx_tmp1;
HXDLIN(1842)						if ((this->curBeat > 10)) {
HXLINE(1842)							_hx_tmp1 = (this->curBeat != 111);
            						}
            						else {
HXLINE(1842)							_hx_tmp1 = false;
            						}
HXDLIN(1842)						if (_hx_tmp1) {
HXLINE(1842)							_hx_tmp = (this->curBeat < 220);
            						}
            						else {
HXLINE(1842)							_hx_tmp = false;
            						}
HXDLIN(1842)						if (_hx_tmp) {
HXLINE(1844)							if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(1846)								if (!(this->triggeredAlready)) {
HXLINE(1848)									this->gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(1849)									this->triggeredAlready = true;
            								}
            							}
            							else {
HXLINE(1851)								this->triggeredAlready = false;
            							}
            						}
HXLINE(1842)						goto _hx_goto_83;
            					}
            					if (  (_hx_switch_0==HX_("Philly",48,eb,f2,23)) ){
HXLINE(1774)						if ((this->curBeat < 250)) {
HXLINE(1777)							bool _hx_tmp;
HXDLIN(1777)							if ((this->curBeat != 184)) {
HXLINE(1777)								_hx_tmp = (this->curBeat != 216);
            							}
            							else {
HXLINE(1777)								_hx_tmp = false;
            							}
HXDLIN(1777)							if (_hx_tmp) {
HXLINE(1779)								if ((::hx::Mod(this->curBeat,16) == 8)) {
HXLINE(1782)									if (!(this->triggeredAlready)) {
HXLINE(1784)										this->gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(1785)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(1787)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(1774)						goto _hx_goto_83;
            					}
            					_hx_goto_83:;
            				}
            			}
            		}
HXLINE(1859)		bool _hx_tmp13;
HXDLIN(1859)		if (this->generatedMusic) {
HXLINE(1859)			_hx_tmp13 = ::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) )))) );
            		}
            		else {
HXLINE(1859)			_hx_tmp13 = false;
            		}
HXDLIN(1859)		if (_hx_tmp13) {
HXLINE(1861)			bool _hx_tmp = (::hx::Mod(this->curBeat,4) == 0);
HXLINE(1866)			bool _hx_tmp1;
HXDLIN(1866)			Float _hx_tmp2 = this->camFollow->x;
HXDLIN(1866)			if ((_hx_tmp2 != (this->dad->getMidpoint(null())->x + 150))) {
HXLINE(1866)				_hx_tmp1 = !(( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(1866)				_hx_tmp1 = false;
            			}
HXDLIN(1866)			if (_hx_tmp1) {
HXLINE(1868)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(1868)				Float a = this->camFollow->x;
HXDLIN(1868)				Float b = (this->dad->getMidpoint(null())->x + 150);
HXDLIN(1868)				_hx_tmp->set_x((a + (((this->camLerp * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("cameraSpeed",a2,8a,af,75),::hx::paccDynamic)) )) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b - a))));
HXLINE(1869)				 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(1869)				Float a1 = this->camFollow->y;
HXDLIN(1869)				Float b1 = (this->dad->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN(1869)				_hx_tmp1->set_y((a1 + (((this->camLerp * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("cameraSpeed",a2,8a,af,75),::hx::paccDynamic)) )) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b1 - a1))));
HXLINE(1872)				::String _hx_switch_1 = this->dad->curCharacter;
            				if (  (_hx_switch_1==HX_("mom",cb,16,53,00)) ){
HXLINE(1875)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(1875)					Float a = this->camFollow->y;
HXDLIN(1875)					Float b = this->dad->getMidpoint(null())->y;
HXDLIN(1875)					_hx_tmp->set_y((a + (((this->camLerp * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("cameraSpeed",a2,8a,af,75),::hx::paccDynamic)) )) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b - a))));
HXDLIN(1875)					goto _hx_goto_84;
            				}
            				if (  (_hx_switch_1==HX_("senpai",3c,df,8d,6b)) ||  (_hx_switch_1==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE(1877)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(1877)					Float a = this->camFollow->x;
HXDLIN(1877)					Float b = (this->dad->getMidpoint(null())->x - ( (Float)(190) ));
HXDLIN(1877)					_hx_tmp->set_x((a + (((this->camLerp * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("cameraSpeed",a2,8a,af,75),::hx::paccDynamic)) )) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b - a))));
HXLINE(1878)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(1878)					Float a1 = this->camFollow->y;
HXDLIN(1878)					Float b1 = (this->dad->getMidpoint(null())->y - ( (Float)(830) ));
HXDLIN(1878)					_hx_tmp1->set_y((a1 + (((this->camLerp * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("cameraSpeed",a2,8a,af,75),::hx::paccDynamic)) )) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b1 - a1))));
HXLINE(1876)					goto _hx_goto_84;
            				}
            				_hx_goto_84:;
HXLINE(1881)				if ((this->dad->curCharacter == HX_("mom",cb,16,53,00))) {
HXLINE(1882)					this->vocals->set_volume((( (Float)(::MainVariables_obj::_variables->__Field(HX_("vvolume",d0,e6,37,8a),::hx::paccDynamic)) ) / ( (Float)(100) )));
            				}
HXLINE(1884)				if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("tutorial",9e,8f,b5,82))) {
HXLINE(1886)					this->tweenCamIn();
            				}
            			}
HXLINE(1890)			bool _hx_tmp3;
HXDLIN(1890)			if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(1890)				Float _hx_tmp = this->camFollow->x;
HXDLIN(1890)				_hx_tmp3 = (_hx_tmp != (this->boyfriend->getMidpoint(null())->x - ( (Float)(100) )));
            			}
            			else {
HXLINE(1890)				_hx_tmp3 = false;
            			}
HXDLIN(1890)			if (_hx_tmp3) {
HXLINE(1892)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(1892)				Float a = this->camFollow->x;
HXDLIN(1892)				Float b = (this->boyfriend->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN(1892)				_hx_tmp->set_x((a + (((this->camLerp * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("cameraSpeed",a2,8a,af,75),::hx::paccDynamic)) )) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b - a))));
HXLINE(1893)				 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(1893)				Float a1 = this->camFollow->y;
HXDLIN(1893)				Float b1 = (this->boyfriend->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN(1893)				_hx_tmp1->set_y((a1 + (((this->camLerp * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("cameraSpeed",a2,8a,af,75),::hx::paccDynamic)) )) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b1 - a1))));
HXLINE(1895)				::String _hx_switch_2 = ::PlayState_obj::curStage;
            				if (  (_hx_switch_2==HX_("limo",1f,17,b3,47)) ){
HXLINE(1898)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(1898)					Float a = this->camFollow->x;
HXDLIN(1898)					Float b = (this->boyfriend->getMidpoint(null())->x - ( (Float)(300) ));
HXDLIN(1898)					_hx_tmp->set_x((a + (((this->camLerp * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("cameraSpeed",a2,8a,af,75),::hx::paccDynamic)) )) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b - a))));
HXDLIN(1898)					goto _hx_goto_85;
            				}
            				if (  (_hx_switch_2==HX_("mall",d4,3a,56,48)) ){
HXLINE(1900)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(1900)					Float a = this->camFollow->y;
HXDLIN(1900)					Float b = (this->boyfriend->getMidpoint(null())->y - ( (Float)(200) ));
HXDLIN(1900)					_hx_tmp->set_y((a + (((this->camLerp * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("cameraSpeed",a2,8a,af,75),::hx::paccDynamic)) )) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b - a))));
HXDLIN(1900)					goto _hx_goto_85;
            				}
            				if (  (_hx_switch_2==HX_("school",74,b8,c8,40)) ||  (_hx_switch_2==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE(1902)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(1902)					Float a = this->camFollow->x;
HXDLIN(1902)					Float b = (this->boyfriend->getMidpoint(null())->x - ( (Float)(300) ));
HXDLIN(1902)					_hx_tmp->set_x((a + (((this->camLerp * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("cameraSpeed",a2,8a,af,75),::hx::paccDynamic)) )) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b - a))));
HXLINE(1903)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(1903)					Float a1 = this->camFollow->y;
HXDLIN(1903)					Float b1 = (this->boyfriend->getMidpoint(null())->y - ( (Float)(300) ));
HXDLIN(1903)					_hx_tmp1->set_y((a1 + (((this->camLerp * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("cameraSpeed",a2,8a,af,75),::hx::paccDynamic)) )) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b1 - a1))));
HXLINE(1901)					goto _hx_goto_85;
            				}
            				_hx_goto_85:;
HXLINE(1906)				if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("tutorial",9e,8f,b5,82))) {
HXLINE(1908)					::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("zoom",13,a3,f8,50),1)),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
            				}
            			}
            		}
HXLINE(1913)		if (this->camZooming) {
HXLINE(1915)			Float a = ::flixel::FlxG_obj::camera->zoom;
HXDLIN(1915)			::flixel::FlxG_obj::camera->set_zoom((a + ((this->zoomLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (this->defaultCamZoom - a))));
HXLINE(1916)			Float a1 = this->camHUD->zoom;
HXDLIN(1916)			this->camHUD->set_zoom((a1 + ((this->zoomLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(1) ) - a1))));
HXLINE(1917)			Float a2 = this->camNOTES->zoom;
HXDLIN(1917)			this->camNOTES->set_zoom((a2 + ((this->zoomLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(1) ) - a2))));
            		}
HXLINE(1920)		{
HXLINE(1920)			 ::flixel::_hx_system::frontEnds::WatchFrontEnd _this4 = ::flixel::FlxG_obj::watch;
HXDLIN(1920)			 ::flixel::_hx_system::debug::watch::Watch _hx_tmp14 = ::flixel::FlxG_obj::game->debugger->watch;
HXDLIN(1920)			_hx_tmp14->add(HX_("beatShit",56,d0,8c,17),::flixel::_hx_system::debug::watch::WatchEntryData_obj::QUICK(::Std_obj::string(this->curBeat)));
            		}
HXLINE(1921)		{
HXLINE(1921)			 ::flixel::_hx_system::frontEnds::WatchFrontEnd _this5 = ::flixel::FlxG_obj::watch;
HXDLIN(1921)			 ::flixel::_hx_system::debug::watch::Watch _hx_tmp15 = ::flixel::FlxG_obj::game->debugger->watch;
HXDLIN(1921)			_hx_tmp15->add(HX_("stepShit",2c,79,7b,9f),::flixel::_hx_system::debug::watch::WatchEntryData_obj::QUICK(::Std_obj::string(this->curStep)));
            		}
HXLINE(1923)		if ((this->curSong == HX_("Fresh",4e,f6,b3,99))) {
HXLINE(1925)			switch((int)(this->curBeat)){
            				case (int)16: {
HXLINE(1928)					this->camZooming = true;
HXLINE(1929)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)48: {
HXLINE(1931)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)80: {
HXLINE(1933)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)112: {
HXLINE(1935)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)163: {
            				}
            				break;
            			}
            		}
HXLINE(1942)		if ((this->curSong == HX_("Bopeebo",90,29,16,da))) {
HXLINE(1944)			switch((int)(this->curBeat)){
            				case (int)128: case (int)129: case (int)130: {
HXLINE(1947)					this->vocals->set_volume(( (Float)(0) ));
            				}
            				break;
            			}
            		}
HXLINE(1955)		if (::PlayerSettings_obj::player1->controls->_reset->check()) {
HXLINE(1957)			this->canDie = true;
HXLINE(1958)			this->health = ( (Float)(-10) );
HXLINE(1959)			::haxe::Log_obj::trace(HX_("RESET = True",82,e0,2a,fe),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),1959,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
            		}
HXLINE(1963)		if (::PlayerSettings_obj::player1->controls->_cheat->check()) {
HXLINE(1965)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1965)			_hx_tmp->health = (_hx_tmp->health + 1);
HXLINE(1966)			::haxe::Log_obj::trace(HX_("User is cheating!",b1,80,7f,1b),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),1966,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
            		}
HXLINE(1969)		bool _hx_tmp16;
HXDLIN(1969)		bool _hx_tmp17;
HXDLIN(1969)		bool _hx_tmp18;
HXDLIN(1969)		if ((this->health <= ((Float)-0.00001))) {
HXLINE(1969)			_hx_tmp18 = this->canDie;
            		}
            		else {
HXLINE(1969)			_hx_tmp18 = false;
            		}
HXDLIN(1969)		if (_hx_tmp18) {
HXLINE(1969)			_hx_tmp17 = !(( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("Practice",db,bc,98,7a),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE(1969)			_hx_tmp17 = false;
            		}
HXDLIN(1969)		if (_hx_tmp17) {
HXLINE(1969)			_hx_tmp16 = !(::PlayState_obj::ended);
            		}
            		else {
HXLINE(1969)			_hx_tmp16 = false;
            		}
HXDLIN(1969)		if (_hx_tmp16) {
HXLINE(1971)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1971)			_hx_tmp->lives = (_hx_tmp->lives - ( (Float)(1) ));
HXLINE(1973)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FreezeSwitch",cb,6f,13,18),::hx::paccDynamic)) )) {
HXLINE(1975)				this->missCounter = 0;
HXLINE(1976)				if (this->frozen) {
HXLINE(1978)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1978)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("Ice_Shatter",a5,21,a6,c6),HX_("shared",a5,5e,2b,1d));
HXDLIN(1978)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE(1979)					this->frozen = false;
HXLINE(1980)					this->freezeIndicator->set_alpha(( (Float)(0) ));
            				}
            			}
HXLINE(1984)			if ((this->lives <= 0)) {
HXLINE(1986)				this->boyfriend->stunned = true;
HXLINE(1988)				this->persistentUpdate = false;
HXLINE(1989)				this->persistentDraw = false;
HXLINE(1990)				this->paused = true;
HXLINE(1992)				{
HXLINE(1992)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(1992)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(1993)				{
HXLINE(1993)					 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(1993)					_this1->cleanup(_this1->autoDestroy,true);
            				}
HXLINE(1995)				Float _hx_tmp = this->boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(1995)				this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,this->boyfriend->getScreenPosition(null(),null())->y));
HXLINE(1997)				if ((::PlayState_obj::gameplayArea == HX_("Endless",94,c8,4c,0c))) {
HXLINE(1998)					::String _hx_tmp = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
HXDLIN(1998)					::Highscore_obj::saveEndlessScore(_hx_tmp,this->songScore);
            				}
HXLINE(2000)				::PlayState_obj::speed = ( (Float)(0) );
HXLINE(2001)				::PlayState_obj::loops = 0;
HXLINE(2003)				this->camHUD->set_angle(( (Float)(0) ));
HXLINE(2004)				this->camNOTES->set_angle(( (Float)(0) ));
HXLINE(2005)				::flixel::FlxG_obj::camera->set_angle(( (Float)(0) ));
HXLINE(2007)				::flixel::FlxG_obj::game->set_scaleX(( (Float)(1) ));
HXLINE(2008)				::flixel::FlxG_obj::game->set_x(( (Float)(0) ));
HXLINE(2009)				::flixel::FlxG_obj::game->set_scaleY(( (Float)(1) ));
HXLINE(2010)				::flixel::FlxG_obj::game->set_y(( (Float)(0) ));
HXLINE(2016)				::DiscordClient_obj::changePresence((HX_("Aw man, I died at ",8c,11,ef,a9) + this->detailsText),( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),this->iconRPC,null(),null());
            			}
            			else {
HXLINE(2021)				if ((this->lives > 0)) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2026_update)
HXLINE(2026)						_gthis->gf->playAnim(HX_("sad",16,98,57,00),true,null(),null());
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(2023)					::flixel::FlxG_obj::camera->flash(-65536,((((Float)0.3) * ( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null());
HXLINE(2024)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.0833333333333333287), ::Dynamic(new _hx_Closure_1(_gthis)),null());
HXLINE(2028)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2028)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("missnote2",84,37,74,8f),HX_("shared",a5,5e,2b,1d));
HXDLIN(2028)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE(2029)					this->health = ((( (Float)(1) ) / ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Lives",e7,5f,35,08),::hx::paccDynamic)) )) * this->lives);
            				}
            			}
            		}
HXLINE(2034)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::Note >() )) {
HXLINE(2036)			if (((this->unspawnNotes->__get(0).StaticCast<  ::Note >()->strumTime - ::Conductor_obj::songPosition) < 1500)) {
HXLINE(2038)				 ::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::Note >();
HXLINE(2039)				this->notes->add(dunceNote).StaticCast<  ::Note >();
HXLINE(2041)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE(2042)				this->unspawnNotes->removeRange(index,1);
            			}
            		}
HXLINE(2046)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2049_update)
HXLINE(2050)				daNote->scrollFactor->set(null(),null());
HXLINE(2051)				daNote->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camNOTES));
HXLINE(2053)				if ((daNote->y > ::flixel::FlxG_obj::height)) {
HXLINE(2055)					daNote->set_active(false);
HXLINE(2056)					daNote->set_visible(false);
            				}
            				else {
HXLINE(2060)					if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("InvisibleNotes",f4,a9,72,91),::hx::paccDynamic)) )) {
HXLINE(2061)						daNote->set_visible(false);
            					}
            					else {
HXLINE(2063)						daNote->set_visible(true);
            					}
HXLINE(2065)					daNote->set_active(true);
            				}
HXLINE(2068)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("NoteSpeedSwitch",e9,bd,d7,44),::hx::paccDynamic)) )) {
HXLINE(2069)					_gthis->speedNote = (1 + (( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("NoteSpeed",15,c2,c9,60),::hx::paccDynamic)) ) / ( (Float)(100) )));
            				}
HXLINE(2071)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("DrunkNotesSwitch",71,42,53,20),::hx::paccDynamic)) )) {
HXLINE(2072)					_gthis->noteDrunk = (( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("DrunkNotes",9d,b0,b7,00),::hx::paccDynamic)) ) * ( (Float)(3) ));
            				}
HXLINE(2074)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("AccelNotesSwitch",2d,92,cf,2d),::hx::paccDynamic)) )) {
HXLINE(2075)					 ::PlayState _gthis1 = _gthis;
HXDLIN(2075)					_gthis1->noteAccel = (_gthis1->noteAccel + (( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("AccelNotes",59,4b,41,4e),::hx::paccDynamic)) ) * ((Float)0.0001)));
            				}
HXLINE(2077)				 ::Note daNote1 = daNote;
HXDLIN(2077)				Float _hx_tmp = (_gthis->strumLine->y - (((::Conductor_obj::songPosition - daNote->strumTime) + _gthis->noteAccel) + (( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("DrunkNotes",9d,b0,b7,00),::hx::paccDynamic)) ) * ::Math_obj::sin((::Conductor_obj::songPosition / ( (Float)(300) ))))));
HXDLIN(2077)				Float _hx_tmp1 = (((Float)0.45) * ::flixel::math::FlxMath_obj::roundDecimal(( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ),2));
HXDLIN(2077)				daNote1->set_y((_hx_tmp * (_hx_tmp1 * _gthis->speedNote)));
HXLINE(2079)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("SnakeNotesSwitch",95,9e,ee,e6),::hx::paccDynamic)) )) {
HXLINE(2080)					 ::Note _g = daNote;
HXDLIN(2080)					_g->set_x((_g->x + ((( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("SnakeNotes",c1,99,79,9e),::hx::paccDynamic)) ) * ((Float)0.025)) * ::Math_obj::sin((::Conductor_obj::songPosition / ( (Float)(300) ))))));
            				}
HXLINE(2082)				bool _hx_tmp2;
HXDLIN(2082)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("ShortsightedSwitch",34,6f,61,b9),::hx::paccDynamic)) )) {
HXLINE(2082)					_hx_tmp2 = (daNote->y > ((( (Float)(::flixel::FlxG_obj::height) ) - ((( (Float)(::flixel::FlxG_obj::height) ) - _gthis->strumLine->y) * (( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Shortsighted",20,19,0c,23),::hx::paccDynamic)) ) / ( (Float)(100) )))) - (( (Float)(11) ) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("AccelNotes",59,4b,41,4e),::hx::paccDynamic)) ))));
            				}
            				else {
HXLINE(2082)					_hx_tmp2 = false;
            				}
HXDLIN(2082)				if (_hx_tmp2) {
HXLINE(2083)					daNote->set_alpha(( (Float)(0) ));
            				}
            				else {
HXLINE(2084)					bool _hx_tmp;
HXDLIN(2084)					if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("ShortsightedSwitch",34,6f,61,b9),::hx::paccDynamic)) )) {
HXLINE(2084)						_hx_tmp = (daNote->y <= ((( (Float)(::flixel::FlxG_obj::height) ) - ((( (Float)(::flixel::FlxG_obj::height) ) - _gthis->strumLine->y) * (( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Shortsighted",20,19,0c,23),::hx::paccDynamic)) ) / ( (Float)(100) )))) - (( (Float)(11) ) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("AccelNotes",59,4b,41,4e),::hx::paccDynamic)) ))));
            					}
            					else {
HXLINE(2084)						_hx_tmp = false;
            					}
HXDLIN(2084)					if (_hx_tmp) {
HXLINE(2085)						Float a = daNote->alpha;
HXDLIN(2085)						daNote->set_alpha((a + ((_gthis->miscLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(1) ) - a))));
            					}
            				}
HXLINE(2087)				bool _hx_tmp3;
HXDLIN(2087)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("LongsightedSwitch",f4,49,94,39),::hx::paccDynamic)) )) {
HXLINE(2087)					_hx_tmp3 = (daNote->y > ((_gthis->strumLine->y + ((( (Float)(::flixel::FlxG_obj::height) ) - _gthis->strumLine->y) * (( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Longsighted",e0,63,52,86),::hx::paccDynamic)) ) / ( (Float)(100) )))) - (( (Float)(11) ) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("AccelNotes",59,4b,41,4e),::hx::paccDynamic)) ))));
            				}
            				else {
HXLINE(2087)					_hx_tmp3 = false;
            				}
HXDLIN(2087)				if (_hx_tmp3) {
HXLINE(2088)					daNote->set_alpha(( (Float)(1) ));
            				}
            				else {
HXLINE(2089)					bool _hx_tmp;
HXDLIN(2089)					if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("LongsightedSwitch",f4,49,94,39),::hx::paccDynamic)) )) {
HXLINE(2089)						_hx_tmp = (daNote->y <= ((_gthis->strumLine->y + ((( (Float)(::flixel::FlxG_obj::height) ) - _gthis->strumLine->y) * (( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Longsighted",e0,63,52,86),::hx::paccDynamic)) ) / ( (Float)(100) )))) - (( (Float)(11) ) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("AccelNotes",59,4b,41,4e),::hx::paccDynamic)) ))));
            					}
            					else {
HXLINE(2089)						_hx_tmp = false;
            					}
HXDLIN(2089)					if (_hx_tmp) {
HXLINE(2090)						Float a = daNote->alpha;
HXDLIN(2090)						daNote->set_alpha((a + ((_gthis->miscLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(0) ) - a))));
            					}
            				}
HXLINE(2092)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("HyperNotesSwitch",29,3a,0a,db),::hx::paccDynamic)) )) {
HXLINE(2094)					{
HXLINE(2094)						 ::Note _g = daNote;
HXDLIN(2094)						Float _g1 = _g->x;
HXDLIN(2094)						 ::flixel::math::FlxRandom _hx_tmp = ::flixel::FlxG_obj::random;
HXDLIN(2094)						int _hx_tmp1 = ::Std_obj::_hx_int((( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("HyperNotes",55,8e,bd,fe),::hx::paccDynamic)) ) * ( (Float)(-1) )));
HXDLIN(2094)						_g->set_x((_g1 + (((Float)0.25) * ( (Float)(_hx_tmp->_hx_int(_hx_tmp1,::Std_obj::_hx_int(( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("HyperNotes",55,8e,bd,fe),::hx::paccDynamic)) )),null())) ))));
            					}
HXLINE(2095)					{
HXLINE(2095)						 ::Note _g2 = daNote;
HXDLIN(2095)						Float _g3 = _g2->y;
HXDLIN(2095)						 ::flixel::math::FlxRandom _hx_tmp2 = ::flixel::FlxG_obj::random;
HXDLIN(2095)						int _hx_tmp3 = ::Std_obj::_hx_int((( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("HyperNotes",55,8e,bd,fe),::hx::paccDynamic)) ) * ( (Float)(-1) )));
HXDLIN(2095)						_g2->set_y((_g3 + (((Float)0.25) * ( (Float)(_hx_tmp2->_hx_int(_hx_tmp3,::Std_obj::_hx_int(( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("HyperNotes",55,8e,bd,fe),::hx::paccDynamic)) )),null())) ))));
            					}
            				}
HXLINE(2099)				bool _hx_tmp4;
HXDLIN(2099)				bool _hx_tmp5;
HXDLIN(2099)				if (daNote->isSustainNote) {
HXLINE(2099)					_hx_tmp5 = ((daNote->y + daNote->offset->y) <= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            				}
            				else {
HXLINE(2099)					_hx_tmp5 = false;
            				}
HXDLIN(2099)				if (_hx_tmp5) {
HXLINE(2101)					if (daNote->mustPress) {
HXLINE(2101)						if (!(daNote->wasGoodHit)) {
HXLINE(2101)							if (daNote->prevNote->wasGoodHit) {
HXLINE(2099)								_hx_tmp4 = !(daNote->canBeHit);
            							}
            							else {
HXLINE(2099)								_hx_tmp4 = false;
            							}
            						}
            						else {
HXLINE(2099)							_hx_tmp4 = true;
            						}
            					}
            					else {
HXLINE(2099)						_hx_tmp4 = true;
            					}
            				}
            				else {
HXLINE(2099)					_hx_tmp4 = false;
            				}
HXDLIN(2099)				if (_hx_tmp4) {
HXLINE(2103)					Float swagRect = ((_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y);
HXDLIN(2103)					Float swagRect1 = (daNote->get_width() * ( (Float)(2) ));
HXDLIN(2103)					 ::flixel::math::FlxRect swagRect2 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,swagRect,swagRect1,(daNote->get_height() * ( (Float)(2) )));
HXLINE(2104)					 ::flixel::math::FlxRect swagRect3 = swagRect2;
HXDLIN(2104)					swagRect3->y = (swagRect3->y / daNote->scale->y);
HXLINE(2105)					 ::flixel::math::FlxRect swagRect4 = swagRect2;
HXDLIN(2105)					swagRect4->height = (swagRect4->height - swagRect2->y);
HXLINE(2107)					daNote->set_clipRect(swagRect2);
            				}
HXLINE(2110)				bool _hx_tmp6;
HXDLIN(2110)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FlippedNotes",bf,7c,08,1d),::hx::paccDynamic)) )) {
HXLINE(2110)					_hx_tmp6 = !(daNote->isSustainNote);
            				}
            				else {
HXLINE(2110)					_hx_tmp6 = false;
            				}
HXDLIN(2110)				if (_hx_tmp6) {
HXLINE(2112)					daNote->set_flipX(true);
HXLINE(2113)					daNote->set_flipY(true);
            				}
HXLINE(2116)				bool _hx_tmp7;
HXDLIN(2116)				if (!(daNote->mustPress)) {
HXLINE(2116)					_hx_tmp7 = daNote->wasGoodHit;
            				}
            				else {
HXLINE(2116)					_hx_tmp7 = false;
            				}
HXDLIN(2116)				if (_hx_tmp7) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            					void _hx_run( ::flixel::FlxSprite spr){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2143_update)
HXLINE(2143)						if ((::Math_obj::abs(( (Float)(daNote->noteData) )) == spr->ID)) {
HXLINE(2145)							spr->animation->play(HX_("confirm",00,9d,39,10),true,null(),null());
HXLINE(2146)							_gthis->sustain2(spr->ID,daNote);
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(2118)					if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic),HX_("Tutorial",be,4b,67,5c) )) {
HXLINE(2119)						_gthis->camZooming = true;
            					}
HXLINE(2121)					::String altAnim = HX_("",00,00,00,00);
HXLINE(2123)					if (::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(_gthis->curStep) ) / ( (Float)(16) )))) )) {
HXLINE(2125)						if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(_gthis->curStep) ) / ( (Float)(16) ))))->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) )) {
HXLINE(2126)							altAnim = HX_("-alt",1c,93,08,1e);
            						}
            					}
HXLINE(2129)					Float _hx_switch_3 = ::Math_obj::abs(( (Float)(daNote->noteData) ));
            					if (  (_hx_switch_3==( (Float)(0) )) ){
HXLINE(2132)						_gthis->dad->playAnim((HX_("singLEFT",d6,39,ef,3b) + altAnim),true,null(),null());
HXDLIN(2132)						goto _hx_goto_86;
            					}
            					if (  (_hx_switch_3==( (Float)(1) )) ){
HXLINE(2134)						_gthis->dad->playAnim((HX_("singDOWN",31,2a,ad,36) + altAnim),true,null(),null());
HXDLIN(2134)						goto _hx_goto_86;
            					}
            					if (  (_hx_switch_3==( (Float)(2) )) ){
HXLINE(2136)						_gthis->dad->playAnim((HX_("singUP",6a,52,21,b9) + altAnim),true,null(),null());
HXDLIN(2136)						goto _hx_goto_86;
            					}
            					if (  (_hx_switch_3==( (Float)(3) )) ){
HXLINE(2138)						_gthis->dad->playAnim((HX_("singRIGHT",0d,6f,70,ac) + altAnim),true,null(),null());
HXDLIN(2138)						goto _hx_goto_86;
            					}
            					_hx_goto_86:;
HXLINE(2141)					_gthis->player2Strums->forEach( ::Dynamic(new _hx_Closure_2(_gthis,daNote)),null());
HXLINE(2150)					_gthis->dad->holdTimer = ( (Float)(0) );
HXLINE(2152)					if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(2153)						_gthis->vocals->set_volume((( (Float)(::MainVariables_obj::_variables->__Field(HX_("vvolume",d0,e6,37,8a),::hx::paccDynamic)) ) / ( (Float)(100) )));
            					}
HXLINE(2155)					daNote->kill();
HXLINE(2156)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(2157)					daNote->destroy();
            				}
HXLINE(2163)				Float daNote2 = daNote->y;
HXDLIN(2163)				Float _hx_tmp8 = -(daNote->get_height());
HXDLIN(2163)				if ((daNote2 < (((((_hx_tmp8 - (( (Float)(25) ) * ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ))) - (( (Float)(70) ) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("NoteSpeed",15,c2,c9,60),::hx::paccDynamic)) ))) - (((Float)1.5) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("DrunkNotes",9d,b0,b7,00),::hx::paccDynamic)) ))) - (( (Float)(11) ) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("AccelNotes",59,4b,41,4e),::hx::paccDynamic)) ))) - (( (Float)(128) ) * ::Math_obj::abs((( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Offbeat",45,80,79,99),::hx::paccDynamic)) ) / ( (Float)(100) ))))))) {
HXLINE(2165)					bool _hx_tmp;
HXDLIN(2165)					if (daNote->isSustainNote) {
HXLINE(2165)						_hx_tmp = daNote->wasGoodHit;
            					}
            					else {
HXLINE(2165)						_hx_tmp = false;
            					}
HXDLIN(2165)					if (_hx_tmp) {
HXLINE(2167)						daNote->kill();
HXLINE(2168)						_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(2169)						daNote->destroy();
            					}
            					else {
HXLINE(2173)						bool _hx_tmp;
HXDLIN(2173)						if (_gthis->startedCountdown) {
HXLINE(2173)							_hx_tmp = daNote->mustPress;
            						}
            						else {
HXLINE(2173)							_hx_tmp = false;
            						}
HXDLIN(2173)						if (_hx_tmp) {
HXLINE(2175)							if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("HPLossSwitch",5f,d1,fb,a9),::hx::paccDynamic)) )) {
HXLINE(2176)								 ::PlayState _gthis1 = _gthis;
HXDLIN(2176)								_gthis1->health = (_gthis1->health - (((Float)0.0475) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("HPLoss",0b,39,51,0c),::hx::paccDynamic)) )));
            							}
            							else {
HXLINE(2178)								 ::PlayState _gthis1 = _gthis;
HXDLIN(2178)								_gthis1->health = (_gthis1->health - ((Float)0.0475));
            							}
HXLINE(2180)							if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("Perfect",ed,6c,27,48),::hx::paccDynamic)) )) {
HXLINE(2181)								_gthis->health = ( (Float)(-10) );
            							}
HXLINE(2182)							switch((int)(daNote->noteData)){
            								case (int)0: {
HXLINE(2185)									_gthis->boyfriend->playAnim(HX_("singLEFTmiss",d2,2f,9c,b6),true,null(),null());
            								}
            								break;
            								case (int)1: {
HXLINE(2187)									_gthis->boyfriend->playAnim(HX_("singDOWNmiss",ad,e9,88,e4),true,null(),null());
            								}
            								break;
            								case (int)2: {
HXLINE(2189)									_gthis->boyfriend->playAnim(HX_("singUPmiss",66,22,08,8a),true,null(),null());
            								}
            								break;
            								case (int)3: {
HXLINE(2191)									_gthis->boyfriend->playAnim(HX_("singRIGHTmiss",89,cc,65,e3),true,null(),null());
            								}
            								break;
            							}
HXLINE(2193)							if (( (bool)(::MainVariables_obj::_variables->__Field(HX_("muteMiss",75,ce,dd,17),::hx::paccDynamic)) )) {
HXLINE(2194)								_gthis->vocals->set_volume(( (Float)(0) ));
            							}
HXLINE(2196)							 ::PlayState _gthis1 = _gthis;
HXDLIN(2196)							Float _hx_tmp;
HXDLIN(2196)							if (( (bool)(::MainVariables_obj::_variables->__Field(HX_("comboP",42,1c,26,c7),::hx::paccDynamic)) )) {
HXLINE(2196)								_hx_tmp = (((Float)0.3) * ( (Float)(_gthis->combo) ));
            							}
            							else {
HXLINE(2196)								_hx_tmp = ( (Float)(0) );
            							}
HXDLIN(2196)							_gthis1->songScore = (_gthis1->songScore - ::Math_obj::floor((10 + (_hx_tmp * ::MenuModifiers_obj::fakeMP))));
HXLINE(2198)							bool _hx_tmp1;
HXDLIN(2198)							bool _hx_tmp2;
HXDLIN(2198)							if (daNote->isSustainNote) {
HXLINE(2198)								_hx_tmp2 = !(daNote->wasGoodHit);
            							}
            							else {
HXLINE(2198)								_hx_tmp2 = false;
            							}
HXDLIN(2198)							if (!(_hx_tmp2)) {
HXLINE(2198)								_hx_tmp1 = !(daNote->isSustainNote);
            							}
            							else {
HXLINE(2198)								_hx_tmp1 = true;
            							}
HXDLIN(2198)							if (_hx_tmp1) {
HXLINE(2200)								_gthis->updateAccuracy();
HXLINE(2201)								::PlayState_obj::misses++;
HXLINE(2202)								_gthis->combo = 0;
            							}
HXLINE(2205)							bool _hx_tmp3;
HXDLIN(2205)							if (!(_gthis->frozen)) {
HXLINE(2205)								_hx_tmp3 = ( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FreezeSwitch",cb,6f,13,18),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2205)								_hx_tmp3 = false;
            							}
HXDLIN(2205)							if (_hx_tmp3) {
HXLINE(2207)								_gthis->missCounter++;
HXLINE(2208)								_gthis->freezeIndicator->set_alpha((( (Float)(_gthis->missCounter) ) / (( (Float)(31) ) - ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Freeze",77,fe,b8,e3),::hx::paccDynamic)) ))));
            							}
HXLINE(2211)							bool _hx_tmp4;
HXDLIN(2211)							if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FreezeSwitch",cb,6f,13,18),::hx::paccDynamic)) )) {
HXLINE(2211)								_hx_tmp4 = (_gthis->missCounter >= (( (Float)(31) ) - ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Freeze",77,fe,b8,e3),::hx::paccDynamic)) )));
            							}
            							else {
HXLINE(2211)								_hx_tmp4 = false;
            							}
HXDLIN(2211)							if (_hx_tmp4) {
HXLINE(2212)								_gthis->freezeBF();
            							}
            						}
            					}
HXLINE(2216)					daNote->set_active(false);
HXLINE(2217)					daNote->set_visible(false);
HXLINE(2219)					daNote->kill();
HXLINE(2220)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(2221)					daNote->destroy();
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2048)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_3(_gthis)),null());
            		}
HXLINE(2226)		this->hearts->forEach( ::Dynamic(new _hx_Closure_4(_gthis)),null());
HXLINE(2237)		if (!(this->inCutscene)) {
HXLINE(2238)			this->keyShit();
            		}
HXLINE(2241)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2241)		if (_this6->keyManager->checkStatus(49,_this6->status)) {
HXLINE(2242)			this->endSong();
            		}
            	}


void PlayState_obj::sustain2(int strum, ::Note note){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2247_sustain2)
HXLINE(2246)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2248)		Float length = note->sustainLength;
HXLINE(2250)		if ((length > 0)) {
HXLINE(2252)			switch((int)(strum)){
            				case (int)0: {
HXLINE(2255)					this->strums2->__get(0).StaticCast< ::Array< bool > >()[0] = true;
            				}
            				break;
            				case (int)1: {
HXLINE(2257)					this->strums2->__get(1).StaticCast< ::Array< bool > >()[0] = true;
            				}
            				break;
            				case (int)2: {
HXLINE(2259)					this->strums2->__get(2).StaticCast< ::Array< bool > >()[0] = true;
            				}
            				break;
            				case (int)3: {
HXLINE(2261)					this->strums2->__get(3).StaticCast< ::Array< bool > >()[0] = true;
            				}
            				break;
            			}
            		}
HXLINE(2265)		Float bps = (::Conductor_obj::bpm / ( (Float)(60) ));
HXLINE(2266)		Float spb = (( (Float)(1) ) / bps);
HXLINE(2268)		if (!(note->isSustainNote)) {
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,Float,length,int,strum) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2273_sustain2)
HXLINE(2273)				switch((int)(strum)){
            					case (int)0: {
HXLINE(2276)						if (!(_gthis->strums2->__get(0).StaticCast< ::Array< bool > >()->__get(0))) {
HXLINE(2278)							_gthis->strums2->__get(0).StaticCast< ::Array< bool > >()[1] = true;
            						}
            						else {
HXLINE(2279)							if ((length > 0)) {
HXLINE(2280)								_gthis->strums2->__get(0).StaticCast< ::Array< bool > >()[0] = false;
HXLINE(2281)								_gthis->strums2->__get(0).StaticCast< ::Array< bool > >()[1] = true;
            							}
            						}
            					}
            					break;
            					case (int)1: {
HXLINE(2284)						if (!(_gthis->strums2->__get(1).StaticCast< ::Array< bool > >()->__get(0))) {
HXLINE(2286)							_gthis->strums2->__get(1).StaticCast< ::Array< bool > >()[1] = true;
            						}
            						else {
HXLINE(2287)							if ((length > 0)) {
HXLINE(2288)								_gthis->strums2->__get(1).StaticCast< ::Array< bool > >()[0] = false;
HXLINE(2289)								_gthis->strums2->__get(1).StaticCast< ::Array< bool > >()[1] = true;
            							}
            						}
            					}
            					break;
            					case (int)2: {
HXLINE(2292)						if (!(_gthis->strums2->__get(2).StaticCast< ::Array< bool > >()->__get(0))) {
HXLINE(2294)							_gthis->strums2->__get(2).StaticCast< ::Array< bool > >()[1] = true;
            						}
            						else {
HXLINE(2295)							if ((length > 0)) {
HXLINE(2296)								_gthis->strums2->__get(2).StaticCast< ::Array< bool > >()[0] = false;
HXLINE(2297)								_gthis->strums2->__get(2).StaticCast< ::Array< bool > >()[1] = true;
            							}
            						}
            					}
            					break;
            					case (int)3: {
HXLINE(2300)						if (!(_gthis->strums2->__get(3).StaticCast< ::Array< bool > >()->__get(0))) {
HXLINE(2302)							_gthis->strums2->__get(3).StaticCast< ::Array< bool > >()[1] = true;
            						}
            						else {
HXLINE(2303)							if ((length > 0)) {
HXLINE(2304)								_gthis->strums2->__get(3).StaticCast< ::Array< bool > >()[0] = false;
HXLINE(2305)								_gthis->strums2->__get(3).StaticCast< ::Array< bool > >()[1] = true;
            							}
            						}
            					}
            					break;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2271)			Float _hx_tmp;
HXDLIN(2271)			if ((length == 0)) {
HXLINE(2271)				_hx_tmp = ((Float)0.2);
            			}
            			else {
HXLINE(2271)				_hx_tmp = (((length / ::Conductor_obj::crochet) * spb) + ((Float)0.1));
            			}
HXDLIN(2271)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(_hx_tmp, ::Dynamic(new _hx_Closure_0(_gthis,length,strum)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sustain2,(void))

void PlayState_obj::endSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2314_endSong)
HXLINE(2313)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2315)		this->canPause = false;
HXLINE(2316)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE(2317)		this->vocals->set_volume(( (Float)(0) ));
HXLINE(2319)		if ((::PlayState_obj::gameplayArea != HX_("Endless",94,c8,4c,0c))) {
HXLINE(2321)			this->camHUD->set_angle(( (Float)(0) ));
HXLINE(2322)			this->camNOTES->set_angle(( (Float)(0) ));
HXLINE(2324)			if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(2327)				::Highscore_obj::saveScore(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),this->songScore,::PlayState_obj::storyDifficulty);
            			}
            		}
HXLINE(2332)		this->canDie = false;
HXLINE(2333)		::PlayState_obj::ended = true;
HXLINE(2335)		::String _hx_switch_0 = ::PlayState_obj::gameplayArea;
            		if (  (_hx_switch_0==HX_("Charting",e4,0a,35,96)) ){
HXLINE(2509)			 ::flixel::FlxState nextState =  ::ChartingState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2509)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2509)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN(2509)			goto _hx_goto_95;
            		}
            		if (  (_hx_switch_0==HX_("Endless",94,c8,4c,0c)) ){
HXLINE(2460)			::PlayState_obj::loops++;
HXLINE(2462)			bool _hx_tmp;
HXDLIN(2462)			if ((::PlayState_obj::speed < 8)) {
HXLINE(2462)				_hx_tmp = ( (bool)(::Endless_Substate_obj::_endless->__Field(HX_("ramp",d2,4c,a4,4b),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(2462)				_hx_tmp = false;
            			}
HXDLIN(2462)			if (_hx_tmp) {
HXLINE(2463)				::PlayState_obj::speed = ( (Float)((::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic) + ((Float)0.15))) );
            			}
HXLINE(2465)			{
HXLINE(2465)				 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2465)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE(2466)			{
HXLINE(2466)				 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN(2466)				_this1->cleanup(_this1->autoDestroy,true);
            			}
HXLINE(2469)			this->detailsText = (HX_("Endless: Loop ",a2,06,f6,12) + ::PlayState_obj::loops);
HXLINE(2470)			::DiscordClient_obj::changePresence(this->detailsText,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),this->iconRPC,true,null());
HXLINE(2473)			::flixel::FlxG_obj::sound->music->set_volume((( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )));
HXLINE(2474)			this->vocals->set_volume((( (Float)(::MainVariables_obj::_variables->__Field(HX_("vvolume",d0,e6,37,8a),::hx::paccDynamic)) ) / ( (Float)(100) )));
HXLINE(2476)			this->canPause = true;
HXLINE(2477)			this->canDie = true;
HXLINE(2478)			::PlayState_obj::ended = false;
HXLINE(2480)			bool _hx_tmp1;
HXDLIN(2480)			bool _hx_tmp2;
HXDLIN(2480)			bool _hx_tmp3;
HXDLIN(2480)			if ((::PlayState_obj::storyDifficulty < 5)) {
HXLINE(2480)				_hx_tmp3 = (::hx::Mod(::PlayState_obj::loops,8) == 0);
            			}
            			else {
HXLINE(2480)				_hx_tmp3 = false;
            			}
HXDLIN(2480)			if (_hx_tmp3) {
HXLINE(2480)				_hx_tmp2 = (::PlayState_obj::loops > 0);
            			}
            			else {
HXLINE(2480)				_hx_tmp2 = false;
            			}
HXDLIN(2480)			if (_hx_tmp2) {
HXLINE(2480)				_hx_tmp1 = ( (bool)(::Endless_Substate_obj::_endless->__Field(HX_("ramp",d2,4c,a4,4b),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(2480)				_hx_tmp1 = false;
            			}
HXDLIN(2480)			if (_hx_tmp1) {
HXLINE(2482)				::PlayState_obj::storyDifficulty++;
HXLINE(2484)				::String diffic = HX_("",00,00,00,00);
HXLINE(2486)				switch((int)(::PlayState_obj::storyDifficulty)){
            					case (int)0: {
HXLINE(2489)						diffic = HX_("-noob",41,2e,12,32);
            					}
            					break;
            					case (int)1: {
HXLINE(2491)						diffic = HX_("-easy",af,a6,14,2c);
            					}
            					break;
            					case (int)3: {
HXLINE(2493)						diffic = HX_("-hard",98,49,10,2e);
            					}
            					break;
            					case (int)4: {
HXLINE(2495)						diffic = HX_("-expert",d7,da,bb,13);
            					}
            					break;
            					case (int)5: {
HXLINE(2497)						diffic = HX_("-insane",97,16,20,ed);
            					}
            					break;
            				}
HXLINE(2500)				::String _hx_tmp = (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() + diffic);
HXDLIN(2500)				::PlayState_obj::SONG = ::Song_obj::loadFromJson(_hx_tmp,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase());
            			}
HXLINE(2503)			::PlayState_obj::SONG->__SetField(HX_("speed",87,97,69,81),::PlayState_obj::speed,::hx::paccDynamic);
HXLINE(2505)			::Conductor_obj::songPosition = ( (Float)(-5000) );
HXLINE(2506)			this->generateSong(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE(2507)			this->startCountdown();
HXLINE(2459)			goto _hx_goto_95;
            		}
            		if (  (_hx_switch_0==HX_("Freeplay",c0,4c,38,fc)) ){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2395_endSong)
HXLINE(2396)				{
HXLINE(2396)					 ::flixel::FlxCamera _g = _gthis->camHUD;
HXDLIN(2396)					_g->set_alpha((_g->alpha - ((Float)0.1)));
            				}
HXLINE(2397)				{
HXLINE(2397)					 ::flixel::FlxCamera _g1 = _gthis->camNOTES;
HXDLIN(2397)					_g1->set_alpha((_g1->alpha - ((Float)0.1)));
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2394)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_0(_gthis)),10);
HXLINE(2400)			Float _hx_tmp = this->boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2400)			this->openSubState( ::RankingSubstate_obj::__alloc( HX_CTX ,_hx_tmp,this->boyfriend->getScreenPosition(null(),null())->y));
HXLINE(2393)			goto _hx_goto_95;
            		}
            		if (  (_hx_switch_0==HX_("Marathon",36,c5,57,b1)) ){
HXLINE(2402)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN(2402)			::PlayState_obj::campaignScore = (::PlayState_obj::campaignScore + this->songScore);
HXLINE(2404)			::PlayState_obj::storyPlaylist->remove(::PlayState_obj::storyPlaylist->__get(0));
HXLINE(2405)			::PlayState_obj::difficultyPlaylist->remove(::PlayState_obj::difficultyPlaylist->__get(0));
HXLINE(2407)			if ((::PlayState_obj::storyPlaylist->length <= 0)) {
HXLINE(2410)				this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(2411)				this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(2413)				::Highscore_obj::saveMarathonScore(::PlayState_obj::campaignScore);
HXLINE(2415)				::String _hx_switch_1 = ( (::String)(::MainVariables_obj::_variables->__Field(HX_("music",a5,d0,5a,10),::hx::paccDynamic)) );
            				if (  (_hx_switch_1==HX_("classic",12,52,91,69)) ){
HXLINE(2418)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2418)					::String library = null();
HXDLIN(2418)					::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN(2418)					_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE(2419)					::Conductor_obj::changeBPM(( (Float)(102) ));
HXLINE(2417)					goto _hx_goto_96;
            				}
            				if (  (_hx_switch_1==HX_("funky",ad,f7,88,08)) ){
HXLINE(2421)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2421)					::String library = null();
HXDLIN(2421)					::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("funkyMenu",ec,43,55,b5)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN(2421)					_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE(2422)					::Conductor_obj::changeBPM(( (Float)(140) ));
HXLINE(2420)					goto _hx_goto_96;
            				}
            				_hx_goto_96:;
HXLINE(2424)				{
HXLINE(2424)					 ::flixel::FlxState nextState =  ::MenuMarathon_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2424)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2424)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
            			else {
HXLINE(2428)				::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(2429)				::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE(2430)				::PlayState_obj::prevCamFollow = this->camFollow;
HXLINE(2432)				::String difficulty = HX_("",00,00,00,00);
HXLINE(2434)				if ((::PlayState_obj::difficultyPlaylist->__get(0).indexOf(HX_("0",30,00,00,00),null()) != -1)) {
HXLINE(2435)					difficulty = HX_("-noob",41,2e,12,32);
            				}
HXLINE(2437)				if ((::PlayState_obj::difficultyPlaylist->__get(0).indexOf(HX_("1",31,00,00,00),null()) != -1)) {
HXLINE(2438)					difficulty = HX_("-easy",af,a6,14,2c);
            				}
HXLINE(2440)				if ((::PlayState_obj::difficultyPlaylist->__get(0).indexOf(HX_("3",33,00,00,00),null()) != -1)) {
HXLINE(2441)					difficulty = HX_("-hard",98,49,10,2e);
            				}
HXLINE(2443)				if ((::PlayState_obj::difficultyPlaylist->__get(0).indexOf(HX_("4",34,00,00,00),null()) != -1)) {
HXLINE(2444)					difficulty = HX_("-expert",d7,da,bb,13);
            				}
HXLINE(2446)				if ((::PlayState_obj::difficultyPlaylist->__get(0).indexOf(HX_("5",35,00,00,00),null()) != -1)) {
HXLINE(2447)					difficulty = HX_("-insane",97,16,20,ed);
            				}
HXLINE(2449)				::PlayState_obj::storyDifficulty = ( (int)(::Std_obj::parseInt(::PlayState_obj::difficultyPlaylist->__get(0))) );
HXLINE(2451)				::haxe::Log_obj::trace(HX_("LOADING NEXT SONG",5e,07,d0,ca),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2451,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(2452)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(2452)				::String _hx_tmp1 = (::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + difficulty);
HXDLIN(2452)				_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2452,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(2454)				::String _hx_tmp2 = (::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + difficulty);
HXDLIN(2454)				::PlayState_obj::SONG = ::Song_obj::loadFromJson(_hx_tmp2,::PlayState_obj::storyPlaylist->__get(0));
HXLINE(2455)				{
HXLINE(2455)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2455)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(2457)				{
HXLINE(2457)					 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(2457)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2457)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
HXLINE(2401)			goto _hx_goto_95;
            		}
            		if (  (_hx_switch_0==HX_("Story",d5,83,43,17)) ){
HXLINE(2338)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN(2338)			::PlayState_obj::campaignScore = (::PlayState_obj::campaignScore + this->songScore);
HXLINE(2340)			::PlayState_obj::storyPlaylist->remove(::PlayState_obj::storyPlaylist->__get(0));
HXLINE(2342)			if ((::PlayState_obj::storyPlaylist->length <= 0)) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2361_endSong)
HXLINE(2362)					{
HXLINE(2362)						 ::flixel::FlxCamera _g = _gthis->camHUD;
HXDLIN(2362)						_g->set_alpha((_g->alpha - ((Float)0.1)));
            					}
HXLINE(2363)					{
HXLINE(2363)						 ::flixel::FlxCamera _g1 = _gthis->camNOTES;
HXDLIN(2363)						_g1->set_alpha((_g1->alpha - ((Float)0.1)));
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2345)				this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(2346)				this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(2349)				::MenuWeek_obj::weekUnlocked[::Std_obj::_hx_int(::Math_obj::min(( (Float)((::PlayState_obj::storyWeek + 1)) ),( (Float)((::MenuWeek_obj::weekUnlocked->length - 1)) )))] = true;
HXLINE(2351)				if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(2353)					if (::NGio_obj::isLoggedIn) {
HXLINE(2353)						 ::io::newgrounds::objects::Medal medal = ( ( ::io::newgrounds::objects::Medal)(::io::newgrounds::NG_obj::core->medals->get(60961)) );
HXDLIN(2353)						if (!(( (bool)(medal->_data->__Field(HX_("unlocked",23,34,0e,5c),::hx::paccDynamic)) ))) {
HXLINE(2353)							medal->sendUnlock();
            						}
            					}
HXLINE(2354)					::Highscore_obj::saveWeekScore(::PlayState_obj::storyWeek,::PlayState_obj::campaignScore,::PlayState_obj::storyDifficulty);
            				}
HXLINE(2357)				::flixel::FlxG_obj::save->data->__SetField(HX_("weekUnlocked",37,64,c4,a5),::MenuWeek_obj::weekUnlocked,::hx::paccDynamic);
HXLINE(2358)				::flixel::FlxG_obj::save->flush(null(),null());
HXLINE(2360)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_1(_gthis)),10);
HXLINE(2366)				Float _hx_tmp = this->boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2366)				this->openSubState( ::RankingSubstate_obj::__alloc( HX_CTX ,_hx_tmp,this->boyfriend->getScreenPosition(null(),null())->y));
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2388_endSong)
HXLINE(2389)					{
HXLINE(2389)						 ::flixel::FlxCamera _g = _gthis->camHUD;
HXDLIN(2389)						_g->set_alpha((_g->alpha - ((Float)0.1)));
            					}
HXLINE(2390)					{
HXLINE(2390)						 ::flixel::FlxCamera _g1 = _gthis->camNOTES;
HXDLIN(2390)						_g1->set_alpha((_g1->alpha - ((Float)0.1)));
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2370)				if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("eggnog",61,04,ba,f4))) {
HXLINE(2372)					 ::flixel::FlxSprite blackShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(-(::flixel::FlxG_obj::width)) ) * ::flixel::FlxG_obj::camera->zoom),(( (Float)(-(::flixel::FlxG_obj::height)) ) * ::flixel::FlxG_obj::camera->zoom),null());
HXDLIN(2372)					 ::flixel::FlxSprite blackShit1 = blackShit->makeGraphic((::flixel::FlxG_obj::width * 3),(::flixel::FlxG_obj::height * 3),-16777216,null(),null());
HXLINE(2374)					blackShit1->scrollFactor->set(null(),null());
HXLINE(2375)					this->add(blackShit1);
HXLINE(2376)					this->camHUD->set_visible(false);
HXLINE(2377)					this->camNOTES->set_visible(false);
HXLINE(2379)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2379)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("Lights_Shut_off",86,a9,43,29),HX_("shared",a5,5e,2b,1d));
HXDLIN(2379)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
            				}
HXLINE(2382)				::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(2383)				::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE(2384)				::PlayState_obj::prevCamFollow = this->camFollow;
HXLINE(2385)				Float _hx_tmp = this->boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2385)				this->openSubState( ::RankingSubstate_obj::__alloc( HX_CTX ,_hx_tmp,this->boyfriend->getScreenPosition(null(),null())->y));
HXLINE(2387)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_2(_gthis)),10);
            			}
HXLINE(2337)			goto _hx_goto_95;
            		}
            		_hx_goto_95:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endSong,(void))

void PlayState_obj::popUpScore(Float strumtime){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween tween){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2790_popUpScore)
HXLINE(2791)			if (::hx::IsNotNull( _gthis->currentTimingShown )) {
HXLINE(2792)				 ::flixel::text::FlxText _g = _gthis->currentTimingShown;
HXDLIN(2792)				_g->set_alpha((_g->alpha - ((Float)0.02)));
            			}
HXLINE(2793)			_gthis->timeShown++;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::flixel::FlxSprite,comboSpr, ::flixel::text::FlxText,coolText, ::flixel::FlxSprite,rating) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween tween){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2803_popUpScore)
HXLINE(2804)			coolText->destroy();
HXLINE(2805)			comboSpr->destroy();
HXLINE(2806)			bool _hx_tmp;
HXDLIN(2806)			if (::hx::IsNotNull( _gthis->currentTimingShown )) {
HXLINE(2806)				_hx_tmp = (_gthis->timeShown >= 10);
            			}
            			else {
HXLINE(2806)				_hx_tmp = false;
            			}
HXDLIN(2806)			if (_hx_tmp) {
HXLINE(2808)				_gthis->remove(_gthis->currentTimingShown,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(2809)				_gthis->currentTimingShown = null();
            			}
HXLINE(2811)			rating->destroy();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2520_popUpScore)
HXLINE(2519)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2521)		Float noteDiff = (strumtime - ::Conductor_obj::songPosition);
HXLINE(2523)		this->vocals->set_volume((( (Float)(::MainVariables_obj::_variables->__Field(HX_("vvolume",d0,e6,37,8a),::hx::paccDynamic)) ) / ( (Float)(100) )));
HXLINE(2525)		::String placement = ::Std_obj::string(this->combo);
HXLINE(2527)		 ::flixel::text::FlxText coolText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,placement,32,null());
HXLINE(2528)		coolText->screenCenter(null());
HXLINE(2529)		coolText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2532)		 ::flixel::FlxSprite rating =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(2533)		 ::flixel::FlxSprite timing =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(2534)		int score = 350;
HXLINE(2536)		::String daRating = HX_("sick",be,8c,53,4c);
HXLINE(2537)		::String daTiming = HX_("",00,00,00,00);
HXLINE(2541)		if ((::Math_obj::abs(noteDiff) > (::Conductor_obj::safeZoneOffset * ((Float)0.9)))) {
HXLINE(2543)			daRating = HX_("shit",c0,cf,52,4c);
HXLINE(2544)			score = 50;
HXLINE(2545)			::PlayState_obj::shits++;
            		}
            		else {
HXLINE(2547)			if ((::Math_obj::abs(noteDiff) > (::Conductor_obj::safeZoneOffset * ((Float)0.75)))) {
HXLINE(2549)				daRating = HX_("bad",c5,b1,4a,00);
HXLINE(2550)				score = 100;
HXLINE(2551)				::PlayState_obj::bads++;
            			}
            			else {
HXLINE(2553)				if ((::Math_obj::abs(noteDiff) > (::Conductor_obj::safeZoneOffset * ((Float)0.2)))) {
HXLINE(2555)					daRating = HX_("good",3d,95,69,44);
HXLINE(2556)					score = 200;
HXLINE(2557)					::PlayState_obj::goods++;
            				}
            			}
            		}
HXLINE(2560)		if ((daRating == HX_("sick",be,8c,53,4c))) {
HXLINE(2561)			::PlayState_obj::sicks++;
            		}
HXLINE(2563)		if ((noteDiff > (::Conductor_obj::safeZoneOffset * ((Float)0.1)))) {
HXLINE(2564)			daTiming = HX_("early",a3,28,ed,67);
            		}
            		else {
HXLINE(2565)			if ((noteDiff < (::Conductor_obj::safeZoneOffset * ((Float)-0.1)))) {
HXLINE(2566)				daTiming = HX_("late",26,0b,ad,47);
            			}
            		}
HXLINE(2568)		::String _hx_switch_0 = ( (::String)(::MainVariables_obj::_variables->__Field(HX_("accuracyType",93,35,79,37),::hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("complex",30,66,71,83)) ){
HXLINE(2573)			if ((noteDiff > (::Conductor_obj::safeZoneOffset * ::Math_obj::abs(((Float)0.1))))) {
HXLINE(2574)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2574)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + (( (Float)(1) ) - ::Math_obj::abs((noteDiff / ( (Float)(200) )))));
            			}
            			else {
HXLINE(2576)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2576)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            			}
HXLINE(2573)			goto _hx_goto_101;
            		}
            		if (  (_hx_switch_0==HX_("rating-based",c3,0b,e1,bc)) ){
HXLINE(2578)			::String _hx_switch_1 = daRating;
            			if (  (_hx_switch_1==HX_("bad",c5,b1,4a,00)) ){
HXLINE(2585)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2585)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.5));
HXDLIN(2585)				goto _hx_goto_102;
            			}
            			if (  (_hx_switch_1==HX_("good",3d,95,69,44)) ){
HXLINE(2583)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2583)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.75));
HXDLIN(2583)				goto _hx_goto_102;
            			}
            			if (  (_hx_switch_1==HX_("shit",c0,cf,52,4c)) ){
HXLINE(2587)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2587)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.25));
HXDLIN(2587)				goto _hx_goto_102;
            			}
            			if (  (_hx_switch_1==HX_("sick",be,8c,53,4c)) ){
HXLINE(2581)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2581)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
HXDLIN(2581)				goto _hx_goto_102;
            			}
            			_hx_goto_102:;
HXLINE(2578)			goto _hx_goto_101;
            		}
            		if (  (_hx_switch_0==HX_("simple",32,04,7f,b8)) ){
HXLINE(2571)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2571)			_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
HXDLIN(2571)			goto _hx_goto_101;
            		}
            		_hx_goto_101:;
HXLINE(2591)		bool _hx_tmp;
HXDLIN(2591)		if ((::Math_obj::abs(noteDiff) > (::Conductor_obj::safeZoneOffset * ((Float)0.75)))) {
HXLINE(2591)			_hx_tmp = ( (bool)(::MainVariables_obj::_variables->__Field(HX_("lateD",5e,b6,bc,6f),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2591)			_hx_tmp = false;
            		}
HXDLIN(2591)		if (_hx_tmp) {
HXLINE(2593)			::String _hx_switch_2 = daRating;
            			if (  (_hx_switch_2==HX_("bad",c5,b1,4a,00)) ){
HXLINE(2596)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("HPLossSwitch",5f,d1,fb,a9),::hx::paccDynamic)) )) {
HXLINE(2597)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2597)					_hx_tmp->health = (_hx_tmp->health - (((Float)0.06) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("HPLoss",0b,39,51,0c),::hx::paccDynamic)) )));
            				}
            				else {
HXLINE(2599)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2599)					_hx_tmp->health = (_hx_tmp->health - ((Float)0.06));
            				}
HXLINE(2596)				goto _hx_goto_103;
            			}
            			if (  (_hx_switch_2==HX_("shit",c0,cf,52,4c)) ){
HXLINE(2601)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("HPLossSwitch",5f,d1,fb,a9),::hx::paccDynamic)) )) {
HXLINE(2602)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2602)					_hx_tmp->health = (_hx_tmp->health - (((Float)0.2) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("HPLoss",0b,39,51,0c),::hx::paccDynamic)) )));
            				}
            				else {
HXLINE(2604)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2604)					_hx_tmp->health = (_hx_tmp->health - ((Float)0.2));
            				}
HXLINE(2601)				goto _hx_goto_103;
            			}
            			_hx_goto_103:;
            		}
HXLINE(2608)		 ::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2608)		int _hx_tmp2;
HXDLIN(2608)		if (( (bool)(::MainVariables_obj::_variables->__Field(HX_("comboP",42,1c,26,c7),::hx::paccDynamic)) )) {
HXLINE(2608)			_hx_tmp2 = (2 * this->combo);
            		}
            		else {
HXLINE(2608)			_hx_tmp2 = 0;
            		}
HXDLIN(2608)		_hx_tmp1->songScore = (_hx_tmp1->songScore + ::Math_obj::floor((( (Float)((score + _hx_tmp2)) ) * ::MenuModifiers_obj::fakeMP)));
HXLINE(2618)		::String pixelShitPart1 = HX_("",00,00,00,00);
HXLINE(2619)		::String pixelShitPart2 = HX_("",00,00,00,00);
HXLINE(2621)		if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(2623)			pixelShitPart1 = HX_("weeb/pixelUI/",79,62,e4,09);
HXLINE(2624)			pixelShitPart2 = HX_("-pixel",39,03,b3,c0);
            		}
HXLINE(2627)		if ((pixelShitPart2 == HX_("",00,00,00,00))) {
HXLINE(2628)			 ::flixel::FlxSprite rating1 = rating;
HXDLIN(2628)			rating1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + daRating) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2630)			 ::flixel::FlxSprite rating1 = rating;
HXDLIN(2630)			rating1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + daRating) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
            		}
HXLINE(2631)		rating->screenCenter(null());
HXLINE(2632)		rating->set_x(( (Float)(::MainVariables_obj::_variables->__Field(HX_("sickX",da,99,c7,7c),::hx::paccDynamic)) ));
HXLINE(2633)		rating->set_y(( (Float)(::MainVariables_obj::_variables->__Field(HX_("sickY",db,99,c7,7c),::hx::paccDynamic)) ));
HXLINE(2634)		rating->acceleration->set_y(( (Float)(550) ));
HXLINE(2635)		{
HXLINE(2635)			 ::flixel::math::FlxPoint _g = rating->velocity;
HXDLIN(2635)			Float _g1 = _g->y;
HXDLIN(2635)			_g->set_y((_g1 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,175,null())) )));
            		}
HXLINE(2636)		{
HXLINE(2636)			 ::flixel::math::FlxPoint _g2 = rating->velocity;
HXDLIN(2636)			Float _g3 = _g2->x;
HXDLIN(2636)			_g2->set_x((_g3 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(0,10,null())) )));
            		}
HXLINE(2637)		rating->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2639)		if ((pixelShitPart2 == HX_("",00,00,00,00))) {
HXLINE(2640)			timing->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + daTiming) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2642)			timing->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + daTiming) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
            		}
HXLINE(2643)		timing->screenCenter(null());
HXLINE(2644)		timing->set_x((rating->x - ( (Float)(80) )));
HXLINE(2645)		timing->set_y((rating->y + 80));
HXLINE(2646)		timing->acceleration->set_y(( (Float)(550) ));
HXLINE(2647)		{
HXLINE(2647)			 ::flixel::math::FlxPoint _g4 = timing->velocity;
HXDLIN(2647)			Float _g5 = _g4->y;
HXDLIN(2647)			_g4->set_y((_g5 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,175,null())) )));
            		}
HXLINE(2648)		{
HXLINE(2648)			 ::flixel::math::FlxPoint _g6 = timing->velocity;
HXDLIN(2648)			Float _g7 = _g6->x;
HXDLIN(2648)			_g6->set_x((_g7 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(0,10,null())) )));
            		}
HXLINE(2649)		timing->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2651)		 ::flixel::FlxSprite comboSpr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(2652)		if ((pixelShitPart2 == HX_("",00,00,00,00))) {
HXLINE(2653)			 ::flixel::FlxSprite comboSpr1 = comboSpr;
HXDLIN(2653)			comboSpr1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + HX_("combo",4e,28,5d,4a)) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2655)			 ::flixel::FlxSprite comboSpr1 = comboSpr;
HXDLIN(2655)			comboSpr1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + HX_("combo",4e,28,5d,4a)) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
            		}
HXLINE(2656)		comboSpr->screenCenter(null());
HXLINE(2657)		comboSpr->set_x(coolText->x);
HXLINE(2658)		comboSpr->acceleration->set_y(( (Float)(600) ));
HXLINE(2659)		{
HXLINE(2659)			 ::flixel::math::FlxPoint _g8 = comboSpr->velocity;
HXDLIN(2659)			_g8->set_y((_g8->y - ( (Float)(150) )));
            		}
HXLINE(2660)		comboSpr->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2662)		{
HXLINE(2662)			 ::flixel::math::FlxPoint _g9 = comboSpr->velocity;
HXDLIN(2662)			Float _g10 = _g9->x;
HXDLIN(2662)			_g9->set_x((_g10 + ::flixel::FlxG_obj::random->_hx_int(1,10,null())));
            		}
HXLINE(2664)		Float msTiming = this->truncateFloat(noteDiff,3);
HXLINE(2666)		if (::hx::IsNotNull( this->currentTimingShown )) {
HXLINE(2667)			this->remove(this->currentTimingShown,null());
            		}
HXLINE(2669)		this->currentTimingShown =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("0ms",96,cb,24,00),null(),null());
HXLINE(2670)		this->timeShown = 0;
HXLINE(2672)		if ((::Math_obj::abs(noteDiff) > (::Conductor_obj::safeZoneOffset * ((Float)0.75)))) {
HXLINE(2673)			this->currentTimingShown->set_color(-65536);
            		}
            		else {
HXLINE(2674)			if ((::Math_obj::abs(noteDiff) > (::Conductor_obj::safeZoneOffset * ((Float)0.2)))) {
HXLINE(2675)				this->currentTimingShown->set_color(-16744448);
            			}
            			else {
HXLINE(2676)				if ((::Math_obj::abs(noteDiff) <= (::Conductor_obj::safeZoneOffset * ((Float)0.2)))) {
HXLINE(2677)					this->currentTimingShown->set_color(-16711681);
            				}
            			}
            		}
HXLINE(2679)		this->currentTimingShown->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXLINE(2680)		this->currentTimingShown->set_borderSize(( (Float)(1) ));
HXLINE(2681)		this->currentTimingShown->set_borderColor(-16777216);
HXLINE(2682)		this->currentTimingShown->set_text((msTiming + HX_("ms",66,5f,00,00)));
HXLINE(2683)		this->currentTimingShown->set_size(20);
HXLINE(2684)		this->currentTimingShown->screenCenter(null());
HXLINE(2685)		this->currentTimingShown->set_x((rating->x + 90));
HXLINE(2686)		this->currentTimingShown->set_y((rating->y + 100));
HXLINE(2687)		this->currentTimingShown->acceleration->set_y(( (Float)(600) ));
HXLINE(2688)		{
HXLINE(2688)			 ::flixel::math::FlxPoint _g11 = this->currentTimingShown->velocity;
HXDLIN(2688)			_g11->set_y((_g11->y - ( (Float)(150) )));
            		}
HXLINE(2689)		{
HXLINE(2689)			 ::flixel::math::FlxPoint _g12 = comboSpr->velocity;
HXDLIN(2689)			Float _g13 = _g12->x;
HXDLIN(2689)			_g12->set_x((_g13 + ::flixel::FlxG_obj::random->_hx_int(1,10,null())));
            		}
HXLINE(2691)		if ((this->currentTimingShown->alpha != 1)) {
HXLINE(2692)			this->currentTimingShown->set_alpha(( (Float)(1) ));
            		}
HXLINE(2694)		this->currentTimingShown->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2696)		if (( (bool)(::MainVariables_obj::_variables->__Field(HX_("ratingDisplay",a5,8b,36,6c),::hx::paccDynamic)) )) {
HXLINE(2697)			this->add(rating);
            		}
HXLINE(2699)		bool _hx_tmp3;
HXDLIN(2699)		if ((daTiming != HX_("",00,00,00,00))) {
HXLINE(2699)			_hx_tmp3 = ( (bool)(::MainVariables_obj::_variables->__Field(HX_("timingDisplay",d8,04,9e,7f),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2699)			_hx_tmp3 = false;
            		}
HXDLIN(2699)		if (_hx_tmp3) {
HXLINE(2700)			this->add(timing);
            		}
HXLINE(2702)		if (( (bool)(::MainVariables_obj::_variables->__Field(HX_("timingDisplay",d8,04,9e,7f),::hx::paccDynamic)) )) {
HXLINE(2703)			this->add(this->currentTimingShown);
            		}
HXLINE(2705)		if (!(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)))) {
HXLINE(2707)			 ::flixel::FlxSprite rating1 = rating;
HXDLIN(2707)			rating1->setGraphicSize(::Std_obj::_hx_int((rating->get_width() * ((Float)0.7))),null());
HXLINE(2708)			rating->set_antialiasing(true);
HXLINE(2709)			 ::flixel::FlxSprite comboSpr1 = comboSpr;
HXDLIN(2709)			comboSpr1->setGraphicSize(::Std_obj::_hx_int((comboSpr->get_width() * ((Float)0.7))),null());
HXLINE(2710)			comboSpr->set_antialiasing(true);
HXLINE(2711)			timing->setGraphicSize(::Std_obj::_hx_int((timing->get_width() * ((Float)0.7))),null());
HXLINE(2712)			timing->set_antialiasing(true);
            		}
            		else {
HXLINE(2716)			 ::flixel::FlxSprite rating1 = rating;
HXDLIN(2716)			Float _hx_tmp = rating->get_width();
HXDLIN(2716)			rating1->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp * ::PlayState_obj::daPixelZoom) * ((Float)0.7))),null());
HXLINE(2717)			 ::flixel::FlxSprite comboSpr1 = comboSpr;
HXDLIN(2717)			Float _hx_tmp1 = comboSpr->get_width();
HXDLIN(2717)			comboSpr1->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp1 * ::PlayState_obj::daPixelZoom) * ((Float)0.7))),null());
HXLINE(2718)			Float _hx_tmp2 = timing->get_width();
HXDLIN(2718)			timing->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp2 * ::PlayState_obj::daPixelZoom) * ((Float)0.7))),null());
            		}
HXLINE(2721)		comboSpr->updateHitbox();
HXLINE(2722)		rating->updateHitbox();
HXLINE(2723)		timing->updateHitbox();
HXLINE(2725)		::Array< int > seperatedScore = ::Array_obj< int >::__new(0);
HXLINE(2727)		::Array< ::String > comboSplit = (this->combo + HX_("",00,00,00,00)).split(HX_("",00,00,00,00));
HXLINE(2729)		if ((comboSplit->length == 2)) {
HXLINE(2730)			seperatedScore->push(0);
            		}
HXLINE(2732)		{
HXLINE(2732)			int _g14 = 0;
HXDLIN(2732)			int _g15 = comboSplit->length;
HXDLIN(2732)			while((_g14 < _g15)){
HXLINE(2732)				_g14 = (_g14 + 1);
HXDLIN(2732)				int i = (_g14 - 1);
HXLINE(2734)				::String str = comboSplit->__get(i);
HXLINE(2735)				seperatedScore->push(::Std_obj::parseInt(str));
            			}
            		}
HXLINE(2738)		int daLoop = 0;
HXLINE(2739)		{
HXLINE(2739)			int _g16 = 0;
HXDLIN(2739)			while((_g16 < seperatedScore->length)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,numScore) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween tween){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2772_popUpScore)
HXLINE(2772)					numScore->destroy();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2739)				int i = seperatedScore->__get(_g16);
HXDLIN(2739)				_g16 = (_g16 + 1);
HXLINE(2741)				 ::flixel::FlxSprite numScore =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(2742)				if ((pixelShitPart2 == HX_("",00,00,00,00))) {
HXLINE(2743)					 ::flixel::FlxSprite numScore1 = numScore;
HXDLIN(2743)					::String library = null();
HXDLIN(2743)					numScore1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (((pixelShitPart1 + HX_("num",46,de,53,00)) + ::Std_obj::_hx_int(( (Float)(i) ))) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
            				}
            				else {
HXLINE(2745)					 ::flixel::FlxSprite numScore1 = numScore;
HXDLIN(2745)					numScore1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (((pixelShitPart1 + HX_("num",46,de,53,00)) + ::Std_obj::_hx_int(( (Float)(i) ))) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
            				}
HXLINE(2746)				numScore->screenCenter(null());
HXLINE(2747)				numScore->set_x(((rating->x + (43 * daLoop)) - ( (Float)(40) )));
HXLINE(2748)				numScore->set_y((rating->y + 180));
HXLINE(2749)				numScore->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2751)				if (!(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)))) {
HXLINE(2753)					numScore->set_antialiasing(true);
HXLINE(2754)					 ::flixel::FlxSprite numScore1 = numScore;
HXDLIN(2754)					numScore1->setGraphicSize(::Std_obj::_hx_int((numScore->get_width() * ((Float)0.5))),null());
            				}
            				else {
HXLINE(2758)					 ::flixel::FlxSprite numScore1 = numScore;
HXDLIN(2758)					Float _hx_tmp = numScore->get_width();
HXDLIN(2758)					numScore1->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            				}
HXLINE(2760)				numScore->updateHitbox();
HXLINE(2762)				 ::flixel::math::FlxPoint numScore1 = numScore->acceleration;
HXDLIN(2762)				numScore1->set_y(( (Float)(::flixel::FlxG_obj::random->_hx_int(200,300,null())) ));
HXLINE(2763)				{
HXLINE(2763)					 ::flixel::math::FlxPoint _g = numScore->velocity;
HXDLIN(2763)					Float _g1 = _g->y;
HXDLIN(2763)					_g->set_y((_g1 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,160,null())) )));
            				}
HXLINE(2764)				 ::flixel::math::FlxPoint numScore2 = numScore->velocity;
HXDLIN(2764)				numScore2->set_x(::flixel::FlxG_obj::random->_hx_float(-5,5,null()));
HXLINE(2766)				bool _hx_tmp;
HXDLIN(2766)				bool _hx_tmp1;
HXDLIN(2766)				if ((this->combo < 10)) {
HXLINE(2766)					_hx_tmp1 = (this->combo == 0);
            				}
            				else {
HXLINE(2766)					_hx_tmp1 = true;
            				}
HXDLIN(2766)				if (_hx_tmp1) {
HXLINE(2766)					_hx_tmp = ( (bool)(::MainVariables_obj::_variables->__Field(HX_("comboDisplay",94,ef,11,43),::hx::paccDynamic)) );
            				}
            				else {
HXLINE(2766)					_hx_tmp = false;
            				}
HXDLIN(2766)				if (_hx_tmp) {
HXLINE(2767)					this->add(numScore);
            				}
HXLINE(2769)				::flixel::tweens::FlxTween_obj::tween(numScore, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.002)))
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(numScore)))));
HXLINE(2777)				daLoop = (daLoop + 1);
            			}
            		}
HXLINE(2784)		 ::flixel::text::FlxText coolText1 = coolText;
HXDLIN(2784)		coolText1->set_text(::Std_obj::string(seperatedScore));
HXLINE(2787)		::flixel::tweens::FlxTween_obj::tween(rating, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            			->setFixed(1,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_1(_gthis)))));
HXLINE(2797)		::flixel::tweens::FlxTween_obj::tween(timing, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))));
HXLINE(2801)		::flixel::tweens::FlxTween_obj::tween(comboSpr, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            			->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(_gthis,comboSpr,coolText,rating)))));
HXLINE(2816)		 ::PlayState _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2816)		_hx_tmp4->curSection = (_hx_tmp4->curSection + 1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,popUpScore,(void))

void PlayState_obj::keyShit(){
            		HX_BEGIN_LOCAL_FUNC_S8(::hx::LocalFunc,_hx_Closure_3,bool,upR,bool,leftP,bool,leftR,bool,rightP,bool,upP,bool,rightR,bool,downR,bool,downP) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2989_keyShit)
HXLINE(2990)			switch((int)(spr->ID)){
            				case (int)0: {
HXLINE(2993)					bool _hx_tmp;
HXDLIN(2993)					if (leftP) {
HXLINE(2993)						_hx_tmp = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            					}
            					else {
HXLINE(2993)						_hx_tmp = false;
            					}
HXDLIN(2993)					if (_hx_tmp) {
HXLINE(2994)						spr->animation->play(HX_("pressed",a2,d2,e6,39),null(),null(),null());
            					}
HXLINE(2995)					if (leftR) {
HXLINE(2996)						spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(2998)					bool _hx_tmp;
HXDLIN(2998)					if (downP) {
HXLINE(2998)						_hx_tmp = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            					}
            					else {
HXLINE(2998)						_hx_tmp = false;
            					}
HXDLIN(2998)					if (_hx_tmp) {
HXLINE(2999)						spr->animation->play(HX_("pressed",a2,d2,e6,39),null(),null(),null());
            					}
HXLINE(3000)					if (downR) {
HXLINE(3001)						spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(3003)					bool _hx_tmp;
HXDLIN(3003)					if (upP) {
HXLINE(3003)						_hx_tmp = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            					}
            					else {
HXLINE(3003)						_hx_tmp = false;
            					}
HXDLIN(3003)					if (_hx_tmp) {
HXLINE(3004)						spr->animation->play(HX_("pressed",a2,d2,e6,39),null(),null(),null());
            					}
HXLINE(3005)					if (upR) {
HXLINE(3006)						spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(3008)					bool _hx_tmp;
HXDLIN(3008)					if (rightP) {
HXLINE(3008)						_hx_tmp = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            					}
            					else {
HXLINE(3008)						_hx_tmp = false;
            					}
HXDLIN(3008)					if (_hx_tmp) {
HXLINE(3009)						spr->animation->play(HX_("pressed",a2,d2,e6,39),null(),null(),null());
            					}
HXLINE(3010)					if (rightR) {
HXLINE(3011)						spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            					}
            				}
            				break;
            			}
HXLINE(3014)			bool _hx_tmp;
HXDLIN(3014)			if ((spr->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE(3014)				_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)));
            			}
            			else {
HXLINE(3014)				_hx_tmp = false;
            			}
HXDLIN(3014)			if (_hx_tmp) {
HXLINE(3016)				spr->centerOffsets(null());
HXLINE(3017)				{
HXLINE(3017)					 ::flixel::math::FlxPoint _g = spr->offset;
HXDLIN(3017)					_g->set_x((_g->x - ( (Float)(13) )));
            				}
HXLINE(3018)				{
HXLINE(3018)					 ::flixel::math::FlxPoint _g1 = spr->offset;
HXDLIN(3018)					_g1->set_y((_g1->y - ( (Float)(13) )));
            				}
            			}
            			else {
HXLINE(3021)				spr->centerOffsets(null());
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3025_keyShit)
HXLINE(3026)			switch((int)(spr->ID)){
            				case (int)0: {
HXLINE(3029)					if (_gthis->strums2->__get(0).StaticCast< ::Array< bool > >()->__get(1)) {
HXLINE(3030)						spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            					}
HXLINE(3031)					_gthis->strums2->__get(0).StaticCast< ::Array< bool > >()[1] = false;
            				}
            				break;
            				case (int)1: {
HXLINE(3033)					if (_gthis->strums2->__get(1).StaticCast< ::Array< bool > >()->__get(1)) {
HXLINE(3034)						spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            					}
HXLINE(3035)					_gthis->strums2->__get(1).StaticCast< ::Array< bool > >()[1] = false;
            				}
            				break;
            				case (int)2: {
HXLINE(3038)					if (_gthis->strums2->__get(2).StaticCast< ::Array< bool > >()->__get(1)) {
HXLINE(3039)						spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            					}
HXLINE(3040)					_gthis->strums2->__get(2).StaticCast< ::Array< bool > >()[1] = false;
            				}
            				break;
            				case (int)3: {
HXLINE(3042)					if (_gthis->strums2->__get(3).StaticCast< ::Array< bool > >()->__get(1)) {
HXLINE(3043)						spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            					}
HXLINE(3044)					_gthis->strums2->__get(3).StaticCast< ::Array< bool > >()[1] = false;
            				}
            				break;
            			}
HXLINE(3048)			bool _hx_tmp;
HXDLIN(3048)			if ((spr->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE(3048)				_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)));
            			}
            			else {
HXLINE(3048)				_hx_tmp = false;
            			}
HXDLIN(3048)			if (_hx_tmp) {
HXLINE(3050)				spr->centerOffsets(null());
HXLINE(3051)				{
HXLINE(3051)					 ::flixel::math::FlxPoint _g = spr->offset;
HXDLIN(3051)					_g->set_x((_g->x - ( (Float)(13) )));
            				}
HXLINE(3052)				{
HXLINE(3052)					 ::flixel::math::FlxPoint _g1 = spr->offset;
HXDLIN(3052)					_g1->set_y((_g1->y - ( (Float)(13) )));
            				}
            			}
            			else {
HXLINE(3055)				spr->centerOffsets(null());
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2820_keyShit)
HXLINE(2819)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2822)		bool up = ::PlayerSettings_obj::player1->controls->_up->check();
HXLINE(2823)		bool right = ::PlayerSettings_obj::player1->controls->_right->check();
HXLINE(2824)		bool down = ::PlayerSettings_obj::player1->controls->_down->check();
HXLINE(2825)		bool left = ::PlayerSettings_obj::player1->controls->_left->check();
HXLINE(2827)		bool upP = ::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE(2828)		bool rightP = ::PlayerSettings_obj::player1->controls->_rightP->check();
HXLINE(2829)		bool downP = ::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE(2830)		bool leftP = ::PlayerSettings_obj::player1->controls->_leftP->check();
HXLINE(2832)		bool upR = ::PlayerSettings_obj::player1->controls->_upR->check();
HXLINE(2833)		bool rightR = ::PlayerSettings_obj::player1->controls->_rightR->check();
HXLINE(2834)		bool downR = ::PlayerSettings_obj::player1->controls->_downR->check();
HXLINE(2835)		bool leftR = ::PlayerSettings_obj::player1->controls->_leftR->check();
HXLINE(2837)		::Array< bool > controlArray = ::Array_obj< bool >::__new(4)->init(0,leftP)->init(1,downP)->init(2,upP)->init(3,rightP);
HXLINE(2840)		bool _hx_tmp;
HXDLIN(2840)		bool _hx_tmp1;
HXDLIN(2840)		bool _hx_tmp2;
HXDLIN(2840)		bool _hx_tmp3;
HXDLIN(2840)		bool _hx_tmp4;
HXDLIN(2840)		bool _hx_tmp5;
HXDLIN(2840)		bool _hx_tmp6;
HXDLIN(2840)		if (!(upP)) {
HXLINE(2840)			_hx_tmp6 = rightP;
            		}
            		else {
HXLINE(2840)			_hx_tmp6 = true;
            		}
HXDLIN(2840)		if (!(_hx_tmp6)) {
HXLINE(2840)			_hx_tmp5 = downP;
            		}
            		else {
HXLINE(2840)			_hx_tmp5 = true;
            		}
HXDLIN(2840)		if (!(_hx_tmp5)) {
HXLINE(2840)			_hx_tmp4 = leftP;
            		}
            		else {
HXLINE(2840)			_hx_tmp4 = true;
            		}
HXDLIN(2840)		if (_hx_tmp4) {
HXLINE(2840)			_hx_tmp3 = !(this->boyfriend->stunned);
            		}
            		else {
HXLINE(2840)			_hx_tmp3 = false;
            		}
HXDLIN(2840)		if (_hx_tmp3) {
HXLINE(2840)			_hx_tmp2 = this->generatedMusic;
            		}
            		else {
HXLINE(2840)			_hx_tmp2 = false;
            		}
HXDLIN(2840)		if (_hx_tmp2) {
HXLINE(2840)			_hx_tmp1 = !(this->frozen);
            		}
            		else {
HXLINE(2840)			_hx_tmp1 = false;
            		}
HXDLIN(2840)		if (_hx_tmp1) {
HXLINE(2840)			_hx_tmp = !(::PlayState_obj::ended);
            		}
            		else {
HXLINE(2840)			_hx_tmp = false;
            		}
HXDLIN(2840)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1,::Array< int >,ignoreList,::Array< ::Dynamic>,possibleNotes) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2850_keyShit)
HXLINE(2850)				bool _hx_tmp;
HXDLIN(2850)				bool _hx_tmp1;
HXDLIN(2850)				bool _hx_tmp2;
HXDLIN(2850)				if (daNote->canBeHit) {
HXLINE(2850)					_hx_tmp2 = daNote->mustPress;
            				}
            				else {
HXLINE(2850)					_hx_tmp2 = false;
            				}
HXDLIN(2850)				if (_hx_tmp2) {
HXLINE(2850)					_hx_tmp1 = !(daNote->tooLate);
            				}
            				else {
HXLINE(2850)					_hx_tmp1 = false;
            				}
HXDLIN(2850)				if (_hx_tmp1) {
HXLINE(2850)					_hx_tmp = !(daNote->wasGoodHit);
            				}
            				else {
HXLINE(2850)					_hx_tmp = false;
            				}
HXDLIN(2850)				if (_hx_tmp) {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            					int _hx_run( ::Note a, ::Note b){
            						HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2854_keyShit)
HXLINE(2854)						return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            					}
            					HX_END_LOCAL_FUNC2(return)

HXLINE(2853)					possibleNotes->push(daNote);
HXLINE(2854)					possibleNotes->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE(2856)					ignoreList->push(daNote->noteData);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2842)			this->boyfriend->holdTimer = ( (Float)(0) );
HXLINE(2844)			::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2846)			::Array< int > ignoreList = ::Array_obj< int >::__new(0);
HXLINE(2848)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(ignoreList,possibleNotes)),null());
HXLINE(2860)			if ((possibleNotes->length > 0)) {
HXLINE(2862)				 ::Note daNote = possibleNotes->__get(0).StaticCast<  ::Note >();
HXLINE(2864)				if (this->perfectMode) {
HXLINE(2865)					this->noteCheck(true,daNote);
            				}
HXLINE(2868)				if ((possibleNotes->length >= 2)) {
HXLINE(2870)					if ((possibleNotes->__get(0).StaticCast<  ::Note >()->strumTime == possibleNotes->__get(1).StaticCast<  ::Note >()->strumTime)) {
HXLINE(2872)						int _g = 0;
HXDLIN(2872)						while((_g < possibleNotes->length)){
HXLINE(2872)							 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(2872)							_g = (_g + 1);
HXLINE(2874)							if (controlArray->__get(coolNote->noteData)) {
HXLINE(2875)								this->goodNoteHit(coolNote);
            							}
            							else {
HXLINE(2878)								bool inIgnoreList = false;
HXLINE(2879)								{
HXLINE(2879)									int _g = 0;
HXDLIN(2879)									int _g1 = ignoreList->length;
HXDLIN(2879)									while((_g < _g1)){
HXLINE(2879)										_g = (_g + 1);
HXDLIN(2879)										int shit = (_g - 1);
HXLINE(2881)										if (controlArray->__get(ignoreList->__get(shit))) {
HXLINE(2882)											inIgnoreList = true;
            										}
            									}
            								}
HXLINE(2884)								bool _hx_tmp;
HXDLIN(2884)								if (!(inIgnoreList)) {
HXLINE(2884)									_hx_tmp = ( (bool)(::MainVariables_obj::_variables->__Field(HX_("spamPrevention",19,9a,fd,87),::hx::paccDynamic)) );
            								}
            								else {
HXLINE(2884)									_hx_tmp = false;
            								}
HXDLIN(2884)								if (_hx_tmp) {
HXLINE(2885)									this->badNoteCheck();
            								}
            							}
            						}
            					}
            					else {
HXLINE(2889)						if ((possibleNotes->__get(0).StaticCast<  ::Note >()->noteData == possibleNotes->__get(1).StaticCast<  ::Note >()->noteData)) {
HXLINE(2891)							this->noteCheck(controlArray->__get(daNote->noteData),daNote);
            						}
            						else {
HXLINE(2895)							int _g = 0;
HXDLIN(2895)							while((_g < possibleNotes->length)){
HXLINE(2895)								 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(2895)								_g = (_g + 1);
HXLINE(2897)								this->noteCheck(controlArray->__get(coolNote->noteData),coolNote);
            							}
            						}
            					}
            				}
            				else {
HXLINE(2903)					this->noteCheck(controlArray->__get(daNote->noteData),daNote);
            				}
            			}
            			else {
HXLINE(2937)				if (( (bool)(::MainVariables_obj::_variables->__Field(HX_("spamPrevention",19,9a,fd,87),::hx::paccDynamic)) )) {
HXLINE(2938)					this->badNoteCheck();
            				}
            			}
            		}
HXLINE(2942)		bool _hx_tmp7;
HXDLIN(2942)		bool _hx_tmp8;
HXDLIN(2942)		bool _hx_tmp9;
HXDLIN(2942)		bool _hx_tmp10;
HXDLIN(2942)		bool _hx_tmp11;
HXDLIN(2942)		bool _hx_tmp12;
HXDLIN(2942)		bool _hx_tmp13;
HXDLIN(2942)		bool _hx_tmp14;
HXDLIN(2942)		if (!(up)) {
HXLINE(2942)			_hx_tmp14 = right;
            		}
            		else {
HXLINE(2942)			_hx_tmp14 = true;
            		}
HXDLIN(2942)		if (!(_hx_tmp14)) {
HXLINE(2942)			_hx_tmp13 = down;
            		}
            		else {
HXLINE(2942)			_hx_tmp13 = true;
            		}
HXDLIN(2942)		if (!(_hx_tmp13)) {
HXLINE(2942)			_hx_tmp12 = left;
            		}
            		else {
HXLINE(2942)			_hx_tmp12 = true;
            		}
HXDLIN(2942)		if (_hx_tmp12) {
HXLINE(2942)			_hx_tmp11 = !(this->boyfriend->stunned);
            		}
            		else {
HXLINE(2942)			_hx_tmp11 = false;
            		}
HXDLIN(2942)		if (_hx_tmp11) {
HXLINE(2942)			_hx_tmp10 = this->generatedMusic;
            		}
            		else {
HXLINE(2942)			_hx_tmp10 = false;
            		}
HXDLIN(2942)		if (_hx_tmp10) {
HXLINE(2942)			_hx_tmp9 = !(this->frozen);
            		}
            		else {
HXLINE(2942)			_hx_tmp9 = false;
            		}
HXDLIN(2942)		if (_hx_tmp9) {
HXLINE(2942)			_hx_tmp8 = !(::PlayState_obj::ended);
            		}
            		else {
HXLINE(2942)			_hx_tmp8 = false;
            		}
HXDLIN(2942)		if (!(_hx_tmp8)) {
HXLINE(2942)			bool _hx_tmp;
HXDLIN(2942)			bool _hx_tmp1;
HXDLIN(2942)			bool _hx_tmp2;
HXDLIN(2942)			bool _hx_tmp3;
HXDLIN(2942)			bool _hx_tmp4;
HXDLIN(2942)			bool _hx_tmp5;
HXDLIN(2942)			if (!(upP)) {
HXLINE(2942)				_hx_tmp5 = downP;
            			}
            			else {
HXLINE(2942)				_hx_tmp5 = true;
            			}
HXDLIN(2942)			if (!(_hx_tmp5)) {
HXLINE(2942)				_hx_tmp4 = leftP;
            			}
            			else {
HXLINE(2942)				_hx_tmp4 = true;
            			}
HXDLIN(2942)			if (!(_hx_tmp4)) {
HXLINE(2942)				_hx_tmp3 = rightP;
            			}
            			else {
HXLINE(2942)				_hx_tmp3 = true;
            			}
HXDLIN(2942)			if (_hx_tmp3) {
HXLINE(2942)				_hx_tmp2 = !(this->boyfriend->stunned);
            			}
            			else {
HXLINE(2942)				_hx_tmp2 = false;
            			}
HXDLIN(2942)			if (_hx_tmp2) {
HXLINE(2942)				_hx_tmp1 = this->generatedMusic;
            			}
            			else {
HXLINE(2942)				_hx_tmp1 = false;
            			}
HXDLIN(2942)			if (_hx_tmp1) {
HXLINE(2942)				_hx_tmp = !(this->frozen);
            			}
            			else {
HXLINE(2942)				_hx_tmp = false;
            			}
HXDLIN(2942)			if (_hx_tmp) {
HXLINE(2942)				_hx_tmp7 = !(::PlayState_obj::ended);
            			}
            			else {
HXLINE(2942)				_hx_tmp7 = false;
            			}
            		}
            		else {
HXLINE(2942)			_hx_tmp7 = true;
            		}
HXDLIN(2942)		if (_hx_tmp7) {
            			HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis,bool,right,bool,up,bool,left,bool,down) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2946_keyShit)
HXLINE(2946)				bool _hx_tmp;
HXDLIN(2946)				bool _hx_tmp1;
HXDLIN(2946)				if (daNote->canBeHit) {
HXLINE(2946)					_hx_tmp1 = daNote->mustPress;
            				}
            				else {
HXLINE(2946)					_hx_tmp1 = false;
            				}
HXDLIN(2946)				if (_hx_tmp1) {
HXLINE(2946)					_hx_tmp = daNote->isSustainNote;
            				}
            				else {
HXLINE(2946)					_hx_tmp = false;
            				}
HXDLIN(2946)				if (_hx_tmp) {
HXLINE(2948)					switch((int)(daNote->noteData)){
            						case (int)0: {
HXLINE(2952)							if (left) {
HXLINE(2953)								_gthis->goodNoteHit(daNote);
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(2955)							if (down) {
HXLINE(2956)								_gthis->goodNoteHit(daNote);
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(2958)							if (up) {
HXLINE(2959)								_gthis->goodNoteHit(daNote);
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(2961)							if (right) {
HXLINE(2962)								_gthis->goodNoteHit(daNote);
            							}
            						}
            						break;
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2944)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_2(_gthis,right,up,left,down)),null());
            		}
HXLINE(2968)		bool _hx_tmp15;
HXDLIN(2968)		bool _hx_tmp16;
HXDLIN(2968)		bool _hx_tmp17;
HXDLIN(2968)		bool _hx_tmp18;
HXDLIN(2968)		if ((this->boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE(2968)			_hx_tmp18 = !(up);
            		}
            		else {
HXLINE(2968)			_hx_tmp18 = false;
            		}
HXDLIN(2968)		if (_hx_tmp18) {
HXLINE(2968)			_hx_tmp17 = !(down);
            		}
            		else {
HXLINE(2968)			_hx_tmp17 = false;
            		}
HXDLIN(2968)		if (_hx_tmp17) {
HXLINE(2968)			_hx_tmp16 = !(right);
            		}
            		else {
HXLINE(2968)			_hx_tmp16 = false;
            		}
HXDLIN(2968)		if (_hx_tmp16) {
HXLINE(2968)			_hx_tmp15 = !(left);
            		}
            		else {
HXLINE(2968)			_hx_tmp15 = false;
            		}
HXDLIN(2968)		if (_hx_tmp15) {
HXLINE(2970)			bool _hx_tmp;
HXDLIN(2970)			if (::StringTools_obj::startsWith(this->boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE(2970)				_hx_tmp = !(::StringTools_obj::endsWith(this->boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            			}
            			else {
HXLINE(2970)				_hx_tmp = false;
            			}
HXDLIN(2970)			if (_hx_tmp) {
HXLINE(2972)				if (!(this->frozen)) {
HXLINE(2974)					this->boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(2975)					if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FrightSwitch",6a,10,56,29),::hx::paccDynamic)) )) {
HXLINE(2977)						bool _hx_tmp;
HXDLIN(2977)						if (::hx::IsGreaterEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),50 )) {
HXLINE(2977)							_hx_tmp = ::hx::IsLess( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),100 );
            						}
            						else {
HXLINE(2977)							_hx_tmp = false;
            						}
HXDLIN(2977)						if (_hx_tmp) {
HXLINE(2978)							this->boyfriend->playAnim(HX_("scared",20,78,2a,3c),null(),null(),null());
            						}
            						else {
HXLINE(2979)							if (::hx::IsGreaterEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),100 )) {
HXLINE(2980)								this->boyfriend->playAnim(HX_("worried",30,ba,6f,a5),null(),null(),null());
            							}
            						}
            					}
            				}
            				else {
HXLINE(2984)					this->boyfriend->playAnim(HX_("frozen",a0,89,d0,b5),null(),null(),null());
            				}
            			}
            		}
HXLINE(2988)		this->playerStrums->forEach( ::Dynamic(new _hx_Closure_3(upR,leftP,leftR,rightP,upP,rightR,downR,downP)),null());
HXLINE(3024)		this->player2Strums->forEach( ::Dynamic(new _hx_Closure_4(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keyShit,(void))

void PlayState_obj::noteMiss(::hx::Null< int >  __o_direction){
            		int direction = __o_direction.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3060_noteMiss)
HXLINE(3059)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3061)		if (!(this->boyfriend->stunned)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3098_noteMiss)
HXLINE(3098)				_gthis->boyfriend->stunned = false;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3063)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("HPLossSwitch",5f,d1,fb,a9),::hx::paccDynamic)) )) {
HXLINE(3064)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3064)				_hx_tmp->health = (_hx_tmp->health - (((Float)0.04) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("HPLoss",0b,39,51,0c),::hx::paccDynamic)) )));
            			}
            			else {
HXLINE(3066)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3066)				_hx_tmp->health = (_hx_tmp->health - ((Float)0.04));
            			}
HXLINE(3068)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("Perfect",ed,6c,27,48),::hx::paccDynamic)) )) {
HXLINE(3069)				this->health = ( (Float)(-10) );
            			}
HXLINE(3071)			bool _hx_tmp;
HXDLIN(3071)			if ((this->combo > 5)) {
HXLINE(3071)				_hx_tmp = this->gf->animOffsets->exists(HX_("sad",16,98,57,00));
            			}
            			else {
HXLINE(3071)				_hx_tmp = false;
            			}
HXDLIN(3071)			if (_hx_tmp) {
HXLINE(3073)				this->gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
            			}
HXLINE(3076)			::PlayState_obj::misses++;
HXLINE(3078)			bool _hx_tmp1;
HXDLIN(3078)			if (!(this->frozen)) {
HXLINE(3078)				_hx_tmp1 = ( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FreezeSwitch",cb,6f,13,18),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(3078)				_hx_tmp1 = false;
            			}
HXDLIN(3078)			if (_hx_tmp1) {
HXLINE(3080)				this->missCounter++;
HXLINE(3081)				this->freezeIndicator->set_alpha((( (Float)(this->missCounter) ) / (( (Float)(31) ) - ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Freeze",77,fe,b8,e3),::hx::paccDynamic)) ))));
            			}
HXLINE(3084)			 ::PlayState _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3084)			Float _hx_tmp3;
HXDLIN(3084)			if (( (bool)(::MainVariables_obj::_variables->__Field(HX_("comboP",42,1c,26,c7),::hx::paccDynamic)) )) {
HXLINE(3084)				_hx_tmp3 = (((Float)0.3) * ( (Float)(this->combo) ));
            			}
            			else {
HXLINE(3084)				_hx_tmp3 = ( (Float)(0) );
            			}
HXDLIN(3084)			_hx_tmp2->songScore = (_hx_tmp2->songScore - ::Math_obj::floor((10 + (_hx_tmp3 * ::MenuModifiers_obj::fakeMP))));
HXLINE(3086)			this->combo = 0;
HXLINE(3087)			this->updateAccuracy();
HXLINE(3089)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp4 = ::flixel::FlxG_obj::sound;
HXDLIN(3089)			::String _hx_tmp5 = ::Paths_obj::sound((HX_("missnote",ee,98,f1,e3) + ::flixel::FlxG_obj::random->_hx_int(1,3,null())),HX_("shared",a5,5e,2b,1d));
HXDLIN(3089)			Float _hx_tmp6 = ::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null());
HXDLIN(3089)			_hx_tmp4->play(_hx_tmp5,((_hx_tmp6 * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) )) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE(3093)			this->boyfriend->stunned = true;
HXLINE(3096)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.0833333333333333287), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(3101)			switch((int)(direction)){
            				case (int)0: {
HXLINE(3104)					this->boyfriend->playAnim(HX_("singLEFTmiss",d2,2f,9c,b6),true,null(),null());
            				}
            				break;
            				case (int)1: {
HXLINE(3106)					this->boyfriend->playAnim(HX_("singDOWNmiss",ad,e9,88,e4),true,null(),null());
            				}
            				break;
            				case (int)2: {
HXLINE(3108)					this->boyfriend->playAnim(HX_("singUPmiss",66,22,08,8a),true,null(),null());
            				}
            				break;
            				case (int)3: {
HXLINE(3110)					this->boyfriend->playAnim(HX_("singRIGHTmiss",89,cc,65,e3),true,null(),null());
            				}
            				break;
            			}
HXLINE(3113)			bool _hx_tmp7;
HXDLIN(3113)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FreezeSwitch",cb,6f,13,18),::hx::paccDynamic)) )) {
HXLINE(3113)				_hx_tmp7 = (this->missCounter >= (( (Float)(31) ) - ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Freeze",77,fe,b8,e3),::hx::paccDynamic)) )));
            			}
            			else {
HXLINE(3113)				_hx_tmp7 = false;
            			}
HXDLIN(3113)			if (_hx_tmp7) {
HXLINE(3114)				this->freezeBF();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,noteMiss,(void))

void PlayState_obj::freezeBF(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3126_freezeBF)
HXLINE(3127)			_gthis->missCounter = 0;
HXLINE(3128)			_gthis->freezeIndicator->set_alpha(( (Float)(0) ));
HXLINE(3129)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3129)			::String _hx_tmp1 = ::Paths_obj::sound(HX_("Ice_Shatter",a5,21,a6,c6),HX_("shared",a5,5e,2b,1d));
HXDLIN(3129)			_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE(3130)			_gthis->frozen = false;
HXLINE(3131)			_gthis->boyfriend->playAnim(HX_("idle",14,a7,b3,45),true,null(),null());
HXLINE(3132)			if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("FrightSwitch",6a,10,56,29),::hx::paccDynamic)) )) {
HXLINE(3134)				bool _hx_tmp;
HXDLIN(3134)				if (::hx::IsGreaterEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),50 )) {
HXLINE(3134)					_hx_tmp = ::hx::IsLess( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),100 );
            				}
            				else {
HXLINE(3134)					_hx_tmp = false;
            				}
HXDLIN(3134)				if (_hx_tmp) {
HXLINE(3135)					_gthis->boyfriend->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
            				}
            				else {
HXLINE(3136)					if (::hx::IsGreaterEq( ::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),100 )) {
HXLINE(3137)						_gthis->boyfriend->playAnim(HX_("worried",30,ba,6f,a5),true,null(),null());
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3119_freezeBF)
HXLINE(3118)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3120)		this->frozen = true;
HXLINE(3121)		this->missCounter = 0;
HXLINE(3122)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3122)		::String _hx_tmp1 = ::Paths_obj::sound(HX_("Ice_Appear",89,2c,5e,2c),HX_("shared",a5,5e,2b,1d));
HXDLIN(3122)		_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE(3123)		this->boyfriend->playAnim(HX_("frozen",a0,89,d0,b5),true,null(),null());
HXLINE(3124)		this->freezeIndicator->set_alpha(( (Float)(1) ));
HXLINE(3125)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,freezeBF,(void))

void PlayState_obj::badNoteCheck(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< bool >,doNothing) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3153_badNoteCheck)
HXLINE(3153)			if (daNote->canBeHit) {
HXLINE(3154)				doNothing[0] = true;
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3143_badNoteCheck)
HXLINE(3146)		::Array< bool > doNothing = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_125,1);
HXLINE(3147)		bool upP = ::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE(3148)		bool rightP = ::PlayerSettings_obj::player1->controls->_rightP->check();
HXLINE(3149)		bool downP = ::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE(3150)		bool leftP = ::PlayerSettings_obj::player1->controls->_leftP->check();
HXLINE(3151)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(doNothing)),null());
HXLINE(3156)		if (!(doNothing->__get(0))) {
HXLINE(3157)			::Note_obj::setCanMiss(0,true);
HXLINE(3158)			::Note_obj::setCanMiss(1,true);
HXLINE(3159)			::Note_obj::setCanMiss(2,true);
HXLINE(3160)			::Note_obj::setCanMiss(3,true);
            		}
HXLINE(3163)		bool _hx_tmp;
HXDLIN(3163)		if (leftP) {
HXLINE(3163)			_hx_tmp = ::Note_obj::canMissLeft;
            		}
            		else {
HXLINE(3163)			_hx_tmp = false;
            		}
HXDLIN(3163)		if (_hx_tmp) {
HXLINE(3164)			this->noteMiss(0);
            		}
HXLINE(3165)		bool _hx_tmp1;
HXDLIN(3165)		if (downP) {
HXLINE(3165)			_hx_tmp1 = ::Note_obj::canMissDown;
            		}
            		else {
HXLINE(3165)			_hx_tmp1 = false;
            		}
HXDLIN(3165)		if (_hx_tmp1) {
HXLINE(3166)			this->noteMiss(1);
            		}
HXLINE(3167)		bool _hx_tmp2;
HXDLIN(3167)		if (upP) {
HXLINE(3167)			_hx_tmp2 = ::Note_obj::canMissUp;
            		}
            		else {
HXLINE(3167)			_hx_tmp2 = false;
            		}
HXDLIN(3167)		if (_hx_tmp2) {
HXLINE(3168)			this->noteMiss(2);
            		}
HXLINE(3169)		bool _hx_tmp3;
HXDLIN(3169)		if (rightP) {
HXLINE(3169)			_hx_tmp3 = ::Note_obj::canMissRight;
            		}
            		else {
HXLINE(3169)			_hx_tmp3 = false;
            		}
HXDLIN(3169)		if (_hx_tmp3) {
HXLINE(3170)			this->noteMiss(3);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,badNoteCheck,(void))

void PlayState_obj::noteCheck(bool keyP, ::Note note){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3176_noteCheck)
HXDLIN(3176)		if (keyP) {
HXLINE(3177)			this->goodNoteHit(note);
            		}
            		else {
HXLINE(3180)			if (( (bool)(::MainVariables_obj::_variables->__Field(HX_("spamPrevention",19,9a,fd,87),::hx::paccDynamic)) )) {
HXLINE(3181)				this->badNoteCheck();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteCheck,(void))

void PlayState_obj::goodNoteHit( ::Note note){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3187_goodNoteHit)
HXDLIN(3187)		if (!(note->wasGoodHit)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Note,note) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3228_goodNoteHit)
HXLINE(3228)				if ((::Math_obj::abs(( (Float)(note->noteData) )) == spr->ID)) {
HXLINE(3230)					spr->animation->play(HX_("confirm",00,9d,39,10),true,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3189)			if (!(note->isSustainNote)) {
HXLINE(3191)				::Array< ::Dynamic> _hx_tmp = this->notesHitArray;
HXDLIN(3191)				_hx_tmp->push(::Date_obj::now());
HXLINE(3192)				this->popUpScore(note->strumTime);
HXLINE(3193)				 ::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3193)				_hx_tmp1->combo = (_hx_tmp1->combo + 1);
            			}
HXLINE(3196)			if (note->isSustainNote) {
HXLINE(3197)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3197)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            			}
HXLINE(3199)			if ((note->noteData >= 0)) {
HXLINE(3201)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("HPGainSwitch",fb,f4,6f,53),::hx::paccDynamic)) )) {
HXLINE(3202)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3202)					_hx_tmp->health = (_hx_tmp->health + (((Float)0.023) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("HPGain",a7,7f,f8,08),::hx::paccDynamic)) )));
            				}
            				else {
HXLINE(3204)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3204)					_hx_tmp->health = (_hx_tmp->health + ((Float)0.023));
            				}
            			}
            			else {
HXLINE(3208)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("HPGainSwitch",fb,f4,6f,53),::hx::paccDynamic)) )) {
HXLINE(3209)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3209)					_hx_tmp->health = (_hx_tmp->health + (((Float)0.004) * ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("HPGain",a7,7f,f8,08),::hx::paccDynamic)) )));
            				}
            				else {
HXLINE(3211)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3211)					_hx_tmp->health = (_hx_tmp->health + ((Float)0.004));
            				}
            			}
HXLINE(3214)			switch((int)(note->noteData)){
            				case (int)0: {
HXLINE(3217)					this->boyfriend->playAnim(HX_("singLEFT",d6,39,ef,3b),true,null(),null());
            				}
            				break;
            				case (int)1: {
HXLINE(3219)					this->boyfriend->playAnim(HX_("singDOWN",31,2a,ad,36),true,null(),null());
            				}
            				break;
            				case (int)2: {
HXLINE(3221)					this->boyfriend->playAnim(HX_("singUP",6a,52,21,b9),true,null(),null());
            				}
            				break;
            				case (int)3: {
HXLINE(3223)					this->boyfriend->playAnim(HX_("singRIGHT",0d,6f,70,ac),true,null(),null());
            				}
            				break;
            			}
HXLINE(3226)			this->playerStrums->forEach( ::Dynamic(new _hx_Closure_0(note)),null());
HXLINE(3234)			note->wasGoodHit = true;
HXLINE(3235)			this->vocals->set_volume((( (Float)(::MainVariables_obj::_variables->__Field(HX_("vvolume",d0,e6,37,8a),::hx::paccDynamic)) ) / ( (Float)(100) )));
HXLINE(3237)			if (!(note->isSustainNote)) {
HXLINE(3239)				note->kill();
HXLINE(3240)				this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(3241)				note->destroy();
            			}
HXLINE(3244)			this->missCounter = 0;
HXLINE(3245)			this->freezeIndicator->set_alpha(( (Float)(0) ));
HXLINE(3247)			this->updateAccuracy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,goodNoteHit,(void))

void PlayState_obj::resetFastCar(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3254_resetFastCar)
HXLINE(3255)		this->fastCar->set_x(( (Float)(-12600) ));
HXLINE(3256)		 ::flixel::FlxSprite _hx_tmp = this->fastCar;
HXDLIN(3256)		_hx_tmp->set_y(( (Float)(::flixel::FlxG_obj::random->_hx_int(140,250,null())) ));
HXLINE(3257)		this->fastCar->velocity->set_x(( (Float)(0) ));
HXLINE(3258)		this->fastCarCanDrive = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resetFastCar,(void))

void PlayState_obj::fastCarDrive(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3269_fastCarDrive)
HXLINE(3269)			_gthis->resetFastCar();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3262_fastCarDrive)
HXLINE(3261)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3263)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3263)		_hx_tmp->play(::Paths_obj::sound((HX_("carPass",05,1f,44,b6) + ::flixel::FlxG_obj::random->_hx_int(0,1,null())),HX_("shared",a5,5e,2b,1d)),((Float)0.7),null(),null(),null(),null());
HXLINE(3265)		 ::flixel::math::FlxPoint _hx_tmp1 = this->fastCar->velocity;
HXDLIN(3265)		int _hx_tmp2 = ::flixel::FlxG_obj::random->_hx_int(170,220,null());
HXDLIN(3265)		_hx_tmp1->set_x(((( (Float)(_hx_tmp2) ) / ::flixel::FlxG_obj::elapsed) * ( (Float)(3) )));
HXLINE(3266)		this->fastCarCanDrive = false;
HXLINE(3267)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,fastCarDrive,(void))

void PlayState_obj::trainStart(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3281_trainStart)
HXLINE(3282)		this->trainMoving = true;
HXLINE(3283)		if (::hx::IsNull( this->trainSound->_channel )) {
HXLINE(3284)			this->trainSound->play(true,null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,trainStart,(void))

void PlayState_obj::updateTrainPos(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3290_updateTrainPos)
HXLINE(3291)		if ((this->trainSound->_time >= 4700)) {
HXLINE(3293)			this->startedMoving = true;
HXLINE(3294)			this->gf->playAnim(HX_("hairBlow",b4,c9,39,c9),null(),null(),null());
            		}
HXLINE(3297)		if (this->startedMoving) {
HXLINE(3299)			{
HXLINE(3299)				 ::flixel::FlxSprite _g = this->phillyTrain;
HXDLIN(3299)				_g->set_x((_g->x - ( (Float)(400) )));
            			}
HXLINE(3301)			bool _hx_tmp;
HXDLIN(3301)			if ((this->phillyTrain->x < -2000)) {
HXLINE(3301)				_hx_tmp = !(this->trainFinishing);
            			}
            			else {
HXLINE(3301)				_hx_tmp = false;
            			}
HXDLIN(3301)			if (_hx_tmp) {
HXLINE(3303)				this->phillyTrain->set_x(( (Float)(-1150) ));
HXLINE(3304)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3304)				_hx_tmp->trainCars = (_hx_tmp->trainCars - 1);
HXLINE(3306)				if ((this->trainCars <= 0)) {
HXLINE(3307)					this->trainFinishing = true;
            				}
            			}
HXLINE(3310)			bool _hx_tmp1;
HXDLIN(3310)			if ((this->phillyTrain->x < -4000)) {
HXLINE(3310)				_hx_tmp1 = this->trainFinishing;
            			}
            			else {
HXLINE(3310)				_hx_tmp1 = false;
            			}
HXDLIN(3310)			if (_hx_tmp1) {
HXLINE(3311)				this->trainReset();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateTrainPos,(void))

void PlayState_obj::trainReset(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3316_trainReset)
HXLINE(3317)		this->gf->playAnim(HX_("hairFall",bd,48,d6,cb),null(),null(),null());
HXLINE(3318)		this->phillyTrain->set_x(( (Float)((::flixel::FlxG_obj::width + 200)) ));
HXLINE(3319)		this->trainMoving = false;
HXLINE(3322)		this->trainCars = 8;
HXLINE(3323)		this->trainFinishing = false;
HXLINE(3324)		this->startedMoving = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,trainReset,(void))

void PlayState_obj::lightningStrikeShit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3328_lightningStrikeShit)
HXLINE(3329)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3329)		_hx_tmp->play(::Paths_obj::sound((HX_("thunder_",bb,58,cf,2f) + ::flixel::FlxG_obj::random->_hx_int(1,2,null())),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE(3330)		this->halloweenBG->animation->play(HX_("lightning",0a,39,4a,d7),null(),null(),null());
HXLINE(3332)		this->lightningStrikeBeat = this->curBeat;
HXLINE(3333)		this->lightningOffset = ::flixel::FlxG_obj::random->_hx_int(8,24,null());
HXLINE(3335)		this->boyfriend->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
HXLINE(3336)		this->gf->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,lightningStrikeShit,(void))

void PlayState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3340_stepHit)
HXLINE(3341)		this->super::stepHit();
HXLINE(3342)		bool _hx_tmp;
HXDLIN(3342)		if (!((::flixel::FlxG_obj::sound->music->_time > (::Conductor_obj::songPosition + 20)))) {
HXLINE(3342)			_hx_tmp = (::flixel::FlxG_obj::sound->music->_time < (::Conductor_obj::songPosition - ( (Float)(20) )));
            		}
            		else {
HXLINE(3342)			_hx_tmp = true;
            		}
HXDLIN(3342)		if (_hx_tmp) {
HXLINE(3344)			this->resyncVocals();
            		}
HXLINE(3347)		bool _hx_tmp1;
HXDLIN(3347)		if ((this->dad->curCharacter == HX_("spooky",eb,bd,9e,c1))) {
HXLINE(3347)			_hx_tmp1 = (::hx::Mod(this->curStep,4) == 2);
            		}
            		else {
HXLINE(3347)			_hx_tmp1 = false;
            		}
            	}


void PlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3357_beatHit)
HXLINE(3358)		this->super::beatHit();
HXLINE(3360)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::Note a2, ::Note a3){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3362_beatHit)
HXLINE(3362)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(3362)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN(3362)			int a1 = 1;
HXDLIN(3362)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN(3362)			this->notes->members->sort(_hx_tmp);
            		}
HXLINE(3365)		if (::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) )))) )) {
HXLINE(3367)			if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(3369)				if (( (bool)(::ModifierVariables_obj::_modifiers->__Field(HX_("VibeSwitch",6a,9e,5d,65),::hx::paccDynamic)) )) {
HXLINE(3371)					Float _hx_switch_0 = ( (Float)(::ModifierVariables_obj::_modifiers->__Field(HX_("Vibe",d6,5b,28,39),::hx::paccDynamic)) );
            					if (  (_hx_switch_0==((Float)0.8)) ){
HXLINE(3374)						::Conductor_obj::changeBPM((( (Float)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ) * ((Float)1.2)));
HXDLIN(3374)						goto _hx_goto_137;
            					}
            					if (  (_hx_switch_0==((Float)1.2)) ){
HXLINE(3376)						::Conductor_obj::changeBPM((( (Float)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ) * ((Float)0.7)));
HXDLIN(3376)						goto _hx_goto_137;
            					}
            					_hx_goto_137:;
            				}
            				else {
HXLINE(3380)					::Conductor_obj::changeBPM(( (Float)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
            				}
HXLINE(3382)				::flixel::FlxG_obj::log->advanced(HX_("CHANGED BPM!",4e,17,59,67),::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());
            			}
HXLINE(3388)			if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(3389)				this->dad->dance();
            			}
            		}
HXLINE(3392)		this->wiggleShit->update(::Conductor_obj::crochet);
HXLINE(3395)		bool _hx_tmp;
HXDLIN(3395)		bool _hx_tmp1;
HXDLIN(3395)		bool _hx_tmp2;
HXDLIN(3395)		bool _hx_tmp3;
HXDLIN(3395)		if ((this->curSong.toLowerCase() == HX_("milf",d6,4c,5c,48))) {
HXLINE(3395)			_hx_tmp3 = (this->curBeat >= 168);
            		}
            		else {
HXLINE(3395)			_hx_tmp3 = false;
            		}
HXDLIN(3395)		if (_hx_tmp3) {
HXLINE(3395)			_hx_tmp2 = (this->curBeat < 200);
            		}
            		else {
HXLINE(3395)			_hx_tmp2 = false;
            		}
HXDLIN(3395)		if (_hx_tmp2) {
HXLINE(3395)			_hx_tmp1 = this->camZooming;
            		}
            		else {
HXLINE(3395)			_hx_tmp1 = false;
            		}
HXDLIN(3395)		if (_hx_tmp1) {
HXLINE(3395)			_hx_tmp = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            		}
            		else {
HXLINE(3395)			_hx_tmp = false;
            		}
HXDLIN(3395)		if (_hx_tmp) {
HXLINE(3397)			{
HXLINE(3397)				 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(3397)				_g->set_zoom((_g->zoom + ((Float)0.015)));
            			}
HXLINE(3398)			{
HXLINE(3398)				 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(3398)				_g1->set_zoom((_g1->zoom + ((Float)0.03)));
            			}
HXLINE(3399)			{
HXLINE(3399)				 ::flixel::FlxCamera _g2 = this->camNOTES;
HXDLIN(3399)				_g2->set_zoom((_g2->zoom + ((Float)0.03)));
            			}
            		}
HXLINE(3402)		bool _hx_tmp4;
HXDLIN(3402)		bool _hx_tmp5;
HXDLIN(3402)		if (this->camZooming) {
HXLINE(3402)			_hx_tmp5 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            		}
            		else {
HXLINE(3402)			_hx_tmp5 = false;
            		}
HXDLIN(3402)		if (_hx_tmp5) {
HXLINE(3402)			_hx_tmp4 = (::hx::Mod(this->curBeat,4) == 0);
            		}
            		else {
HXLINE(3402)			_hx_tmp4 = false;
            		}
HXDLIN(3402)		if (_hx_tmp4) {
HXLINE(3404)			{
HXLINE(3404)				 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(3404)				_g->set_zoom((_g->zoom + ((Float)0.015)));
            			}
HXLINE(3405)			{
HXLINE(3405)				 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(3405)				_g1->set_zoom((_g1->zoom + ((Float)0.03)));
            			}
HXLINE(3406)			{
HXLINE(3406)				 ::flixel::FlxCamera _g2 = this->camNOTES;
HXDLIN(3406)				_g2->set_zoom((_g2->zoom + ((Float)0.03)));
            			}
            		}
HXLINE(3409)		 ::HealthIcon _hx_tmp6 = this->iconP1;
HXDLIN(3409)		_hx_tmp6->setGraphicSize(::Std_obj::_hx_int((this->iconP1->get_width() + 30)),null());
HXLINE(3410)		 ::HealthIcon _hx_tmp7 = this->iconP2;
HXDLIN(3410)		_hx_tmp7->setGraphicSize(::Std_obj::_hx_int((this->iconP2->get_width() + 30)),null());
HXLINE(3412)		this->iconP1->updateHitbox();
HXLINE(3413)		this->iconP2->updateHitbox();
HXLINE(3415)		if ((::hx::Mod(this->curBeat,this->gfSpeed) == 0)) {
HXLINE(3417)			this->gf->dance();
            		}
HXLINE(3420)		if (!(::StringTools_obj::startsWith(this->boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)))) {
HXLINE(3422)			this->boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
            		}
HXLINE(3425)		bool _hx_tmp8;
HXDLIN(3425)		if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(3425)			_hx_tmp8 = (this->curSong == HX_("Bopeebo",90,29,16,da));
            		}
            		else {
HXLINE(3425)			_hx_tmp8 = false;
            		}
HXDLIN(3425)		if (_hx_tmp8) {
HXLINE(3427)			this->boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
            		}
HXLINE(3430)		bool _hx_tmp9;
HXDLIN(3430)		bool _hx_tmp10;
HXDLIN(3430)		bool _hx_tmp11;
HXDLIN(3430)		bool _hx_tmp12;
HXDLIN(3430)		if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(3430)			_hx_tmp12 = ::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic),HX_("Tutorial",be,4b,67,5c) );
            		}
            		else {
HXLINE(3430)			_hx_tmp12 = false;
            		}
HXDLIN(3430)		if (_hx_tmp12) {
HXLINE(3430)			_hx_tmp11 = (this->dad->curCharacter == HX_("gf",1f,5a,00,00));
            		}
            		else {
HXLINE(3430)			_hx_tmp11 = false;
            		}
HXDLIN(3430)		if (_hx_tmp11) {
HXLINE(3430)			_hx_tmp10 = (this->curBeat > 16);
            		}
            		else {
HXLINE(3430)			_hx_tmp10 = false;
            		}
HXDLIN(3430)		if (_hx_tmp10) {
HXLINE(3430)			_hx_tmp9 = (this->curBeat < 48);
            		}
            		else {
HXLINE(3430)			_hx_tmp9 = false;
            		}
HXDLIN(3430)		if (_hx_tmp9) {
HXLINE(3432)			this->boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(3433)			this->dad->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
            		}
HXLINE(3436)		::String _hx_switch_1 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_1==HX_("limo",1f,17,b3,47)) ){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::BackgroundDancer dancer){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3449_beatHit)
HXLINE(3449)				dancer->dance();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3447)			this->grpLimoDancers->forEach( ::Dynamic(new _hx_Closure_1()),null());
HXLINE(3452)			bool _hx_tmp;
HXDLIN(3452)			if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 10)) {
HXLINE(3452)				_hx_tmp = this->fastCarCanDrive;
            			}
            			else {
HXLINE(3452)				_hx_tmp = false;
            			}
HXDLIN(3452)			if (_hx_tmp) {
HXLINE(3453)				this->fastCarDrive();
            			}
HXLINE(3446)			goto _hx_goto_138;
            		}
            		if (  (_hx_switch_1==HX_("mall",d4,3a,56,48)) ){
HXLINE(3442)			this->upperBoppers->animation->play(HX_("bop",03,be,4a,00),true,null(),null());
HXLINE(3443)			this->bottomBoppers->animation->play(HX_("bop",03,be,4a,00),true,null(),null());
HXLINE(3444)			this->santa->animation->play(HX_("idle",14,a7,b3,45),true,null(),null());
HXLINE(3441)			goto _hx_goto_138;
            		}
            		if (  (_hx_switch_1==HX_("philly",28,77,5e,ef)) ){
HXLINE(3455)			if (!(this->trainMoving)) {
HXLINE(3456)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3456)				_hx_tmp->trainCooldown = (_hx_tmp->trainCooldown + 1);
            			}
HXLINE(3458)			if ((::hx::Mod(this->curBeat,4) == 0)) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            				void _hx_run( ::flixel::FlxSprite light){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3462_beatHit)
HXLINE(3462)					light->set_visible(false);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(3460)				this->phillyCityLights->forEach( ::Dynamic(new _hx_Closure_2()),null());
HXLINE(3465)				this->curLight = ::flixel::FlxG_obj::random->_hx_int(0,(this->phillyCityLights->length - 1),null());
HXLINE(3467)				Dynamic( this->phillyCityLights->members->__get(this->curLight)).StaticCast<  ::flixel::FlxSprite >()->set_visible(true);
            			}
HXLINE(3471)			bool _hx_tmp;
HXDLIN(3471)			bool _hx_tmp1;
HXDLIN(3471)			bool _hx_tmp2;
HXDLIN(3471)			if ((::hx::Mod(this->curBeat,8) == 4)) {
HXLINE(3471)				_hx_tmp2 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 30);
            			}
            			else {
HXLINE(3471)				_hx_tmp2 = false;
            			}
HXDLIN(3471)			if (_hx_tmp2) {
HXLINE(3471)				_hx_tmp1 = !(this->trainMoving);
            			}
            			else {
HXLINE(3471)				_hx_tmp1 = false;
            			}
HXDLIN(3471)			if (_hx_tmp1) {
HXLINE(3471)				_hx_tmp = (this->trainCooldown > 8);
            			}
            			else {
HXLINE(3471)				_hx_tmp = false;
            			}
HXDLIN(3471)			if (_hx_tmp) {
HXLINE(3473)				this->trainCooldown = ::flixel::FlxG_obj::random->_hx_int(-4,0,null());
HXLINE(3474)				this->trainStart();
            			}
HXLINE(3454)			goto _hx_goto_138;
            		}
            		if (  (_hx_switch_1==HX_("school",74,b8,c8,40)) ){
HXLINE(3439)			this->bgGirls->dance();
HXDLIN(3439)			goto _hx_goto_138;
            		}
            		_hx_goto_138:;
HXLINE(3478)		bool _hx_tmp13;
HXDLIN(3478)		bool _hx_tmp14;
HXDLIN(3478)		if (this->isHalloween) {
HXLINE(3478)			_hx_tmp14 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 10);
            		}
            		else {
HXLINE(3478)			_hx_tmp14 = false;
            		}
HXDLIN(3478)		if (_hx_tmp14) {
HXLINE(3478)			_hx_tmp13 = (this->curBeat > (this->lightningStrikeBeat + this->lightningOffset));
            		}
            		else {
HXLINE(3478)			_hx_tmp13 = false;
            		}
HXDLIN(3478)		if (_hx_tmp13) {
HXLINE(3480)			this->lightningStrikeShit();
            		}
            	}


::String PlayState_obj::curStage;

 ::Dynamic PlayState_obj::SONG;

::String PlayState_obj::gameplayArea;

::String PlayState_obj::chartType;

int PlayState_obj::storyWeek;

int PlayState_obj::loops;

Float PlayState_obj::speed;

::Array< ::String > PlayState_obj::storyPlaylist;

::Array< ::String > PlayState_obj::difficultyPlaylist;

int PlayState_obj::storyDifficulty;

int PlayState_obj::shits;

int PlayState_obj::bads;

int PlayState_obj::goods;

int PlayState_obj::sicks;

 ::flixel::FlxSprite PlayState_obj::songPosBG;

 ::flixel::ui::FlxBar PlayState_obj::songPosBar;

 ::flixel::FlxObject PlayState_obj::prevCamFollow;

::Array< ::String > PlayState_obj::dialogue;

int PlayState_obj::misses;

Float PlayState_obj::accuracy;

int PlayState_obj::arrowLane;

bool PlayState_obj::ended;

int PlayState_obj::campaignScore;

Float PlayState_obj::daPixelZoom;

Float PlayState_obj::cameraX;

Float PlayState_obj::cameraY;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(songName,"songName");
	HX_MARK_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_MARK_MEMBER_NAME(halloweenLevel,"halloweenLevel");
	HX_MARK_MEMBER_NAME(doof,"doof");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(dad,"dad");
	HX_MARK_MEMBER_NAME(gf,"gf");
	HX_MARK_MEMBER_NAME(boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(player2Strums,"player2Strums");
	HX_MARK_MEMBER_NAME(strums2,"strums2");
	HX_MARK_MEMBER_NAME(hearts,"hearts");
	HX_MARK_MEMBER_NAME(camZooming,"camZooming");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(iconP1,"iconP1");
	HX_MARK_MEMBER_NAME(iconP2,"iconP2");
	HX_MARK_MEMBER_NAME(camNOTES,"camNOTES");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camPAUSE,"camPAUSE");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(notesHitArray,"notesHitArray");
	HX_MARK_MEMBER_NAME(currentFrames,"currentFrames");
	HX_MARK_MEMBER_NAME(halloweenBG,"halloweenBG");
	HX_MARK_MEMBER_NAME(isHalloween,"isHalloween");
	HX_MARK_MEMBER_NAME(phillyCityLights,"phillyCityLights");
	HX_MARK_MEMBER_NAME(phillyTrain,"phillyTrain");
	HX_MARK_MEMBER_NAME(trainSound,"trainSound");
	HX_MARK_MEMBER_NAME(limo,"limo");
	HX_MARK_MEMBER_NAME(grpLimoDancers,"grpLimoDancers");
	HX_MARK_MEMBER_NAME(fastCar,"fastCar");
	HX_MARK_MEMBER_NAME(upperBoppers,"upperBoppers");
	HX_MARK_MEMBER_NAME(bottomBoppers,"bottomBoppers");
	HX_MARK_MEMBER_NAME(santa,"santa");
	HX_MARK_MEMBER_NAME(bgGirls,"bgGirls");
	HX_MARK_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_MARK_MEMBER_NAME(LightsOutBG,"LightsOutBG");
	HX_MARK_MEMBER_NAME(BlindingBG,"BlindingBG");
	HX_MARK_MEMBER_NAME(freezeIndicator,"freezeIndicator");
	HX_MARK_MEMBER_NAME(triggeredAlready,"triggeredAlready");
	HX_MARK_MEMBER_NAME(allowedToHeadbang,"allowedToHeadbang");
	HX_MARK_MEMBER_NAME(talking,"talking");
	HX_MARK_MEMBER_NAME(songScore,"songScore");
	HX_MARK_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_MARK_MEMBER_NAME(missTxt,"missTxt");
	HX_MARK_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_MARK_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_MARK_MEMBER_NAME(accuracyTxt,"accuracyTxt");
	HX_MARK_MEMBER_NAME(canDie,"canDie");
	HX_MARK_MEMBER_NAME(nps,"nps");
	HX_MARK_MEMBER_NAME(npsTxt,"npsTxt");
	HX_MARK_MEMBER_NAME(lives,"lives");
	HX_MARK_MEMBER_NAME(heartSprite,"heartSprite");
	HX_MARK_MEMBER_NAME(offbeatValue,"offbeatValue");
	HX_MARK_MEMBER_NAME(speedNote,"speedNote");
	HX_MARK_MEMBER_NAME(noteDrunk,"noteDrunk");
	HX_MARK_MEMBER_NAME(noteAccel,"noteAccel");
	HX_MARK_MEMBER_NAME(paparazziInt,"paparazziInt");
	HX_MARK_MEMBER_NAME(missCounter,"missCounter");
	HX_MARK_MEMBER_NAME(frozen,"frozen");
	HX_MARK_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_MARK_MEMBER_NAME(inCutscene,"inCutscene");
	HX_MARK_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_MARK_MEMBER_NAME(iconRPC,"iconRPC");
	HX_MARK_MEMBER_NAME(songLength,"songLength");
	HX_MARK_MEMBER_NAME(detailsText,"detailsText");
	HX_MARK_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_MARK_MEMBER_NAME(dialogueSuffix,"dialogueSuffix");
	HX_MARK_MEMBER_NAME(miscLerp,"miscLerp");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(zoomLerp,"zoomLerp");
	HX_MARK_MEMBER_NAME(startTimer,"startTimer");
	HX_MARK_MEMBER_NAME(perfectMode,"perfectMode");
	HX_MARK_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_MARK_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_MARK_MEMBER_NAME(songTime,"songTime");
	HX_MARK_MEMBER_NAME(debugNum,"debugNum");
	HX_MARK_MEMBER_NAME(stair,"stair");
	HX_MARK_MEMBER_NAME(noteOutput,"noteOutput");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_MARK_MEMBER_NAME(canPause,"canPause");
	HX_MARK_MEMBER_NAME(endingSong,"endingSong");
	HX_MARK_MEMBER_NAME(hits,"hits");
	HX_MARK_MEMBER_NAME(timeShown,"timeShown");
	HX_MARK_MEMBER_NAME(currentTimingShown,"currentTimingShown");
	HX_MARK_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	HX_MARK_MEMBER_NAME(trainMoving,"trainMoving");
	HX_MARK_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_MARK_MEMBER_NAME(trainCars,"trainCars");
	HX_MARK_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_MARK_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_MARK_MEMBER_NAME(startedMoving,"startedMoving");
	HX_MARK_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_MARK_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_MARK_MEMBER_NAME(curLight,"curLight");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(songName,"songName");
	HX_VISIT_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_VISIT_MEMBER_NAME(halloweenLevel,"halloweenLevel");
	HX_VISIT_MEMBER_NAME(doof,"doof");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(dad,"dad");
	HX_VISIT_MEMBER_NAME(gf,"gf");
	HX_VISIT_MEMBER_NAME(boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(player2Strums,"player2Strums");
	HX_VISIT_MEMBER_NAME(strums2,"strums2");
	HX_VISIT_MEMBER_NAME(hearts,"hearts");
	HX_VISIT_MEMBER_NAME(camZooming,"camZooming");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(iconP1,"iconP1");
	HX_VISIT_MEMBER_NAME(iconP2,"iconP2");
	HX_VISIT_MEMBER_NAME(camNOTES,"camNOTES");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camPAUSE,"camPAUSE");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(notesHitArray,"notesHitArray");
	HX_VISIT_MEMBER_NAME(currentFrames,"currentFrames");
	HX_VISIT_MEMBER_NAME(halloweenBG,"halloweenBG");
	HX_VISIT_MEMBER_NAME(isHalloween,"isHalloween");
	HX_VISIT_MEMBER_NAME(phillyCityLights,"phillyCityLights");
	HX_VISIT_MEMBER_NAME(phillyTrain,"phillyTrain");
	HX_VISIT_MEMBER_NAME(trainSound,"trainSound");
	HX_VISIT_MEMBER_NAME(limo,"limo");
	HX_VISIT_MEMBER_NAME(grpLimoDancers,"grpLimoDancers");
	HX_VISIT_MEMBER_NAME(fastCar,"fastCar");
	HX_VISIT_MEMBER_NAME(upperBoppers,"upperBoppers");
	HX_VISIT_MEMBER_NAME(bottomBoppers,"bottomBoppers");
	HX_VISIT_MEMBER_NAME(santa,"santa");
	HX_VISIT_MEMBER_NAME(bgGirls,"bgGirls");
	HX_VISIT_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_VISIT_MEMBER_NAME(LightsOutBG,"LightsOutBG");
	HX_VISIT_MEMBER_NAME(BlindingBG,"BlindingBG");
	HX_VISIT_MEMBER_NAME(freezeIndicator,"freezeIndicator");
	HX_VISIT_MEMBER_NAME(triggeredAlready,"triggeredAlready");
	HX_VISIT_MEMBER_NAME(allowedToHeadbang,"allowedToHeadbang");
	HX_VISIT_MEMBER_NAME(talking,"talking");
	HX_VISIT_MEMBER_NAME(songScore,"songScore");
	HX_VISIT_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_VISIT_MEMBER_NAME(missTxt,"missTxt");
	HX_VISIT_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_VISIT_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_VISIT_MEMBER_NAME(accuracyTxt,"accuracyTxt");
	HX_VISIT_MEMBER_NAME(canDie,"canDie");
	HX_VISIT_MEMBER_NAME(nps,"nps");
	HX_VISIT_MEMBER_NAME(npsTxt,"npsTxt");
	HX_VISIT_MEMBER_NAME(lives,"lives");
	HX_VISIT_MEMBER_NAME(heartSprite,"heartSprite");
	HX_VISIT_MEMBER_NAME(offbeatValue,"offbeatValue");
	HX_VISIT_MEMBER_NAME(speedNote,"speedNote");
	HX_VISIT_MEMBER_NAME(noteDrunk,"noteDrunk");
	HX_VISIT_MEMBER_NAME(noteAccel,"noteAccel");
	HX_VISIT_MEMBER_NAME(paparazziInt,"paparazziInt");
	HX_VISIT_MEMBER_NAME(missCounter,"missCounter");
	HX_VISIT_MEMBER_NAME(frozen,"frozen");
	HX_VISIT_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_VISIT_MEMBER_NAME(inCutscene,"inCutscene");
	HX_VISIT_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_VISIT_MEMBER_NAME(iconRPC,"iconRPC");
	HX_VISIT_MEMBER_NAME(songLength,"songLength");
	HX_VISIT_MEMBER_NAME(detailsText,"detailsText");
	HX_VISIT_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_VISIT_MEMBER_NAME(dialogueSuffix,"dialogueSuffix");
	HX_VISIT_MEMBER_NAME(miscLerp,"miscLerp");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(zoomLerp,"zoomLerp");
	HX_VISIT_MEMBER_NAME(startTimer,"startTimer");
	HX_VISIT_MEMBER_NAME(perfectMode,"perfectMode");
	HX_VISIT_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_VISIT_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_VISIT_MEMBER_NAME(songTime,"songTime");
	HX_VISIT_MEMBER_NAME(debugNum,"debugNum");
	HX_VISIT_MEMBER_NAME(stair,"stair");
	HX_VISIT_MEMBER_NAME(noteOutput,"noteOutput");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_VISIT_MEMBER_NAME(canPause,"canPause");
	HX_VISIT_MEMBER_NAME(endingSong,"endingSong");
	HX_VISIT_MEMBER_NAME(hits,"hits");
	HX_VISIT_MEMBER_NAME(timeShown,"timeShown");
	HX_VISIT_MEMBER_NAME(currentTimingShown,"currentTimingShown");
	HX_VISIT_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	HX_VISIT_MEMBER_NAME(trainMoving,"trainMoving");
	HX_VISIT_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_VISIT_MEMBER_NAME(trainCars,"trainCars");
	HX_VISIT_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_VISIT_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_VISIT_MEMBER_NAME(startedMoving,"startedMoving");
	HX_VISIT_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_VISIT_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_VISIT_MEMBER_NAME(curLight,"curLight");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { return ::hx::Val( gf ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { return ::hx::Val( dad ); }
		if (HX_FIELD_EQ(inName,"nps") ) { return ::hx::Val( nps ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"doof") ) { return ::hx::Val( doof ); }
		if (HX_FIELD_EQ(inName,"limo") ) { return ::hx::Val( limo ); }
		if (HX_FIELD_EQ(inName,"hits") ) { return ::hx::Val( hits ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		if (HX_FIELD_EQ(inName,"santa") ) { return ::hx::Val( santa ); }
		if (HX_FIELD_EQ(inName,"lives") ) { return ::hx::Val( lives ); }
		if (HX_FIELD_EQ(inName,"stair") ) { return ::hx::Val( stair ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"hearts") ) { return ::hx::Val( hearts ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"iconP1") ) { return ::hx::Val( iconP1 ); }
		if (HX_FIELD_EQ(inName,"iconP2") ) { return ::hx::Val( iconP2 ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"canDie") ) { return ::hx::Val( canDie ); }
		if (HX_FIELD_EQ(inName,"npsTxt") ) { return ::hx::Val( npsTxt ); }
		if (HX_FIELD_EQ(inName,"frozen") ) { return ::hx::Val( frozen ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"strums2") ) { return ::hx::Val( strums2 ); }
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { return ::hx::Val( gfSpeed ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"fastCar") ) { return ::hx::Val( fastCar ); }
		if (HX_FIELD_EQ(inName,"bgGirls") ) { return ::hx::Val( bgGirls ); }
		if (HX_FIELD_EQ(inName,"talking") ) { return ::hx::Val( talking ); }
		if (HX_FIELD_EQ(inName,"missTxt") ) { return ::hx::Val( missTxt ); }
		if (HX_FIELD_EQ(inName,"iconRPC") ) { return ::hx::Val( iconRPC ); }
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return ::hx::Val( onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyShit") ) { return ::hx::Val( keyShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songName") ) { return ::hx::Val( songName ); }
		if (HX_FIELD_EQ(inName,"camNOTES") ) { return ::hx::Val( camNOTES ); }
		if (HX_FIELD_EQ(inName,"camPAUSE") ) { return ::hx::Val( camPAUSE ); }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { return ::hx::Val( scoreTxt ); }
		if (HX_FIELD_EQ(inName,"miscLerp") ) { return ::hx::Val( miscLerp ); }
		if (HX_FIELD_EQ(inName,"zoomLerp") ) { return ::hx::Val( zoomLerp ); }
		if (HX_FIELD_EQ(inName,"songTime") ) { return ::hx::Val( songTime ); }
		if (HX_FIELD_EQ(inName,"debugNum") ) { return ::hx::Val( debugNum ); }
		if (HX_FIELD_EQ(inName,"canPause") ) { return ::hx::Val( canPause ); }
		if (HX_FIELD_EQ(inName,"sustain2") ) { return ::hx::Val( sustain2_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		if (HX_FIELD_EQ(inName,"freezeBF") ) { return ::hx::Val( freezeBF_dyn() ); }
		if (HX_FIELD_EQ(inName,"curLight") ) { return ::hx::Val( curLight ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"boyfriend") ) { return ::hx::Val( boyfriend ); }
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		if (HX_FIELD_EQ(inName,"songScore") ) { return ::hx::Val( songScore ); }
		if (HX_FIELD_EQ(inName,"speedNote") ) { return ::hx::Val( speedNote ); }
		if (HX_FIELD_EQ(inName,"noteDrunk") ) { return ::hx::Val( noteDrunk ); }
		if (HX_FIELD_EQ(inName,"noteAccel") ) { return ::hx::Val( noteAccel ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"timeShown") ) { return ::hx::Val( timeShown ); }
		if (HX_FIELD_EQ(inName,"noteCheck") ) { return ::hx::Val( noteCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainCars") ) { return ::hx::Val( trainCars ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"camZooming") ) { return ::hx::Val( camZooming ); }
		if (HX_FIELD_EQ(inName,"trainSound") ) { return ::hx::Val( trainSound ); }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { return ::hx::Val( wiggleShit ); }
		if (HX_FIELD_EQ(inName,"BlindingBG") ) { return ::hx::Val( BlindingBG ); }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { return ::hx::Val( inCutscene ); }
		if (HX_FIELD_EQ(inName,"songLength") ) { return ::hx::Val( songLength ); }
		if (HX_FIELD_EQ(inName,"startTimer") ) { return ::hx::Val( startTimer ); }
		if (HX_FIELD_EQ(inName,"sortByShit") ) { return ::hx::Val( sortByShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteOutput") ) { return ::hx::Val( noteOutput ); }
		if (HX_FIELD_EQ(inName,"tweenCamIn") ) { return ::hx::Val( tweenCamIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"endingSong") ) { return ::hx::Val( endingSong ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainStart") ) { return ::hx::Val( trainStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainReset") ) { return ::hx::Val( trainReset_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { return ::hx::Val( healthBarBG ); }
		if (HX_FIELD_EQ(inName,"halloweenBG") ) { return ::hx::Val( halloweenBG ); }
		if (HX_FIELD_EQ(inName,"isHalloween") ) { return ::hx::Val( isHalloween ); }
		if (HX_FIELD_EQ(inName,"phillyTrain") ) { return ::hx::Val( phillyTrain ); }
		if (HX_FIELD_EQ(inName,"LightsOutBG") ) { return ::hx::Val( LightsOutBG ); }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { return ::hx::Val( totalPlayed ); }
		if (HX_FIELD_EQ(inName,"accuracyTxt") ) { return ::hx::Val( accuracyTxt ); }
		if (HX_FIELD_EQ(inName,"heartSprite") ) { return ::hx::Val( heartSprite ); }
		if (HX_FIELD_EQ(inName,"missCounter") ) { return ::hx::Val( missCounter ); }
		if (HX_FIELD_EQ(inName,"detailsText") ) { return ::hx::Val( detailsText ); }
		if (HX_FIELD_EQ(inName,"schoolIntro") ) { return ::hx::Val( schoolIntro_dyn() ); }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { return ::hx::Val( perfectMode ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return ::hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainMoving") ) { return ::hx::Val( trainMoving ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { return ::hx::Val( playerStrums ); }
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"upperBoppers") ) { return ::hx::Val( upperBoppers ); }
		if (HX_FIELD_EQ(inName,"offbeatValue") ) { return ::hx::Val( offbeatValue ); }
		if (HX_FIELD_EQ(inName,"paparazziInt") ) { return ::hx::Val( paparazziInt ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"badNoteCheck") ) { return ::hx::Val( badNoteCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetFastCar") ) { return ::hx::Val( resetFastCar_dyn() ); }
		if (HX_FIELD_EQ(inName,"fastCarDrive") ) { return ::hx::Val( fastCarDrive_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"player2Strums") ) { return ::hx::Val( player2Strums ); }
		if (HX_FIELD_EQ(inName,"notesHitArray") ) { return ::hx::Val( notesHitArray ); }
		if (HX_FIELD_EQ(inName,"currentFrames") ) { return ::hx::Val( currentFrames ); }
		if (HX_FIELD_EQ(inName,"bottomBoppers") ) { return ::hx::Val( bottomBoppers ); }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { return ::hx::Val( totalNotesHit ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"truncateFloat") ) { return ::hx::Val( truncateFloat_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { return ::hx::Val( trainCooldown ); }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { return ::hx::Val( startedMoving ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"halloweenLevel") ) { return ::hx::Val( halloweenLevel ); }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { return ::hx::Val( strumLineNotes ); }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { return ::hx::Val( generatedMusic ); }
		if (HX_FIELD_EQ(inName,"grpLimoDancers") ) { return ::hx::Val( grpLimoDancers ); }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { return ::hx::Val( defaultCamZoom ); }
		if (HX_FIELD_EQ(inName,"dialogueSuffix") ) { return ::hx::Val( dialogueSuffix ); }
		if (HX_FIELD_EQ(inName,"modifierValues") ) { return ::hx::Val( modifierValues_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateAccuracy") ) { return ::hx::Val( updateAccuracy_dyn() ); }
		if (HX_FIELD_EQ(inName,"startCountdown") ) { return ::hx::Val( startCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { return ::hx::Val( trainFinishing ); }
		if (HX_FIELD_EQ(inName,"updateTrainPos") ) { return ::hx::Val( updateTrainPos_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { return ::hx::Val( songPositionBar ); }
		if (HX_FIELD_EQ(inName,"freezeIndicator") ) { return ::hx::Val( freezeIndicator ); }
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { return ::hx::Val( fastCarCanDrive ); }
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { return ::hx::Val( lightningOffset ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"phillyCityLights") ) { return ::hx::Val( phillyCityLights ); }
		if (HX_FIELD_EQ(inName,"triggeredAlready") ) { return ::hx::Val( triggeredAlready ); }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { return ::hx::Val( startedCountdown ); }
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { return ::hx::Val( trainFrameTiming ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"allowedToHeadbang") ) { return ::hx::Val( allowedToHeadbang ); }
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { return ::hx::Val( detailsPausedText ); }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { return ::hx::Val( previousFrameTime ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentTimingShown") ) { return ::hx::Val( currentTimingShown ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { return ::hx::Val( storyDifficultyText ); }
		if (HX_FIELD_EQ(inName,"dialogueOrCountdown") ) { return ::hx::Val( dialogueOrCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"lightningStrikeShit") ) { return ::hx::Val( lightningStrikeShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { return ::hx::Val( lightningStrikeBeat ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { return ::hx::Val( lastReportedPlayheadPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { outValue = ( SONG ); return true; }
		if (HX_FIELD_EQ(inName,"bads") ) { outValue = ( bads ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"loops") ) { outValue = ( loops ); return true; }
		if (HX_FIELD_EQ(inName,"speed") ) { outValue = ( speed ); return true; }
		if (HX_FIELD_EQ(inName,"shits") ) { outValue = ( shits ); return true; }
		if (HX_FIELD_EQ(inName,"goods") ) { outValue = ( goods ); return true; }
		if (HX_FIELD_EQ(inName,"sicks") ) { outValue = ( sicks ); return true; }
		if (HX_FIELD_EQ(inName,"ended") ) { outValue = ( ended ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"misses") ) { outValue = ( misses ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cameraX") ) { outValue = ( cameraX ); return true; }
		if (HX_FIELD_EQ(inName,"cameraY") ) { outValue = ( cameraY ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { outValue = ( curStage ); return true; }
		if (HX_FIELD_EQ(inName,"dialogue") ) { outValue = ( dialogue ); return true; }
		if (HX_FIELD_EQ(inName,"accuracy") ) { outValue = ( accuracy ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"chartType") ) { outValue = ( chartType ); return true; }
		if (HX_FIELD_EQ(inName,"storyWeek") ) { outValue = ( storyWeek ); return true; }
		if (HX_FIELD_EQ(inName,"songPosBG") ) { outValue = ( songPosBG ); return true; }
		if (HX_FIELD_EQ(inName,"arrowLane") ) { outValue = ( arrowLane ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songPosBar") ) { outValue = ( songPosBar ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { outValue = ( daPixelZoom ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gameplayArea") ) { outValue = ( gameplayArea ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { outValue = ( storyPlaylist ); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { outValue = ( prevCamFollow ); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { outValue = ( campaignScore ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { outValue = ( storyDifficulty ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"difficultyPlaylist") ) { outValue = ( difficultyPlaylist ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { gf=inValue.Cast<  ::Character >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { dad=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nps") ) { nps=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"doof") ) { doof=inValue.Cast<  ::DialogueBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"limo") ) { limo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hits") ) { hits=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"santa") ) { santa=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lives") ) { lives=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stair") ) { stair=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hearts") ) { hearts=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP1") ) { iconP1=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP2") ) { iconP2=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canDie") ) { canDie=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"npsTxt") ) { npsTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frozen") ) { frozen=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"strums2") ) { strums2=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { gfSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fastCar") ) { fastCar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgGirls") ) { bgGirls=inValue.Cast<  ::BackgroundGirls >(); return inValue; }
		if (HX_FIELD_EQ(inName,"talking") ) { talking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"missTxt") ) { missTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconRPC") ) { iconRPC=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songName") ) { songName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camNOTES") ) { camNOTES=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camPAUSE") ) { camPAUSE=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { scoreTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"miscLerp") ) { miscLerp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomLerp") ) { zoomLerp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTime") ) { songTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugNum") ) { debugNum=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canPause") ) { canPause=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curLight") ) { curLight=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=inValue.Cast<  ::Boyfriend >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScore") ) { songScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speedNote") ) { speedNote=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteDrunk") ) { noteDrunk=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteAccel") ) { noteAccel=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeShown") ) { timeShown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCars") ) { trainCars=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZooming") ) { camZooming=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainSound") ) { trainSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { wiggleShit=inValue.Cast<  ::WiggleEffect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BlindingBG") ) { BlindingBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { inCutscene=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTimer") ) { startTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteOutput") ) { noteOutput=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endingSong") ) { endingSong=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { healthBarBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"halloweenBG") ) { halloweenBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isHalloween") ) { isHalloween=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"phillyTrain") ) { phillyTrain=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LightsOutBG") ) { LightsOutBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { totalPlayed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"accuracyTxt") ) { accuracyTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"heartSprite") ) { heartSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"missCounter") ) { missCounter=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"detailsText") ) { detailsText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { perfectMode=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainMoving") ) { trainMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upperBoppers") ) { upperBoppers=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offbeatValue") ) { offbeatValue=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paparazziInt") ) { paparazziInt=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"player2Strums") ) { player2Strums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notesHitArray") ) { notesHitArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentFrames") ) { currentFrames=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomBoppers") ) { bottomBoppers=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { totalNotesHit=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { trainCooldown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { startedMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"halloweenLevel") ) { halloweenLevel=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { generatedMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpLimoDancers") ) { grpLimoDancers=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { defaultCamZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogueSuffix") ) { dialogueSuffix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { trainFinishing=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { songPositionBar=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"freezeIndicator") ) { freezeIndicator=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { fastCarCanDrive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { lightningOffset=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"phillyCityLights") ) { phillyCityLights=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"triggeredAlready") ) { triggeredAlready=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { startedCountdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { trainFrameTiming=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"allowedToHeadbang") ) { allowedToHeadbang=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { detailsPausedText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { previousFrameTime=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentTimingShown") ) { currentTimingShown=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { storyDifficultyText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { lightningStrikeBeat=inValue.Cast< int >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { lastReportedPlayheadPosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"bads") ) { bads=ioValue.Cast< int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"loops") ) { loops=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"speed") ) { speed=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"shits") ) { shits=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"goods") ) { goods=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"sicks") ) { sicks=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"ended") ) { ended=ioValue.Cast< bool >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"misses") ) { misses=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cameraX") ) { cameraX=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"cameraY") ) { cameraY=ioValue.Cast< Float >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { curStage=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"dialogue") ) { dialogue=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"accuracy") ) { accuracy=ioValue.Cast< Float >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"chartType") ) { chartType=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"storyWeek") ) { storyWeek=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songPosBG") ) { songPosBG=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		if (HX_FIELD_EQ(inName,"arrowLane") ) { arrowLane=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songPosBar") ) { songPosBar=ioValue.Cast<  ::flixel::ui::FlxBar >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { daPixelZoom=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gameplayArea") ) { gameplayArea=ioValue.Cast< ::String >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { storyPlaylist=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { prevCamFollow=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { campaignScore=ioValue.Cast< int >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { storyDifficulty=ioValue.Cast< int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"difficultyPlaylist") ) { difficultyPlaylist=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("songName",c0,d0,d7,36));
	outFields->push(HX_("songPositionBar",d5,62,6e,a6));
	outFields->push(HX_("halloweenLevel",b7,ca,23,07));
	outFields->push(HX_("doof",62,f1,6d,42));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("dad",47,36,4c,00));
	outFields->push(HX_("gf",1f,5a,00,00));
	outFields->push(HX_("boyfriend",6a,29,b8,e6));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("strumLineNotes",24,f1,48,a4));
	outFields->push(HX_("playerStrums",4b,e1,2a,0d));
	outFields->push(HX_("player2Strums",9b,9b,26,0f));
	outFields->push(HX_("strums2",e8,65,e1,00));
	outFields->push(HX_("hearts",2d,b6,0a,fd));
	outFields->push(HX_("camZooming",60,3b,bf,d6));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("gfSpeed",e8,9c,20,98));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("healthBarBG",1c,d8,3b,f4));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("generatedMusic",96,8a,5d,71));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("iconP1",9a,bd,d6,45));
	outFields->push(HX_("iconP2",9b,bd,d6,45));
	outFields->push(HX_("camNOTES",b2,89,c3,92));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camPAUSE",67,84,50,b0));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("notesHitArray",a7,0b,f3,bd));
	outFields->push(HX_("currentFrames",bf,30,e2,8f));
	outFields->push(HX_("halloweenBG",92,b2,88,5c));
	outFields->push(HX_("isHalloween",43,72,b9,2e));
	outFields->push(HX_("phillyCityLights",30,e0,12,1f));
	outFields->push(HX_("phillyTrain",80,9b,65,bb));
	outFields->push(HX_("trainSound",e7,b3,e5,da));
	outFields->push(HX_("limo",1f,17,b3,47));
	outFields->push(HX_("grpLimoDancers",70,18,93,51));
	outFields->push(HX_("fastCar",d8,f2,1f,de));
	outFields->push(HX_("upperBoppers",37,47,71,21));
	outFields->push(HX_("bottomBoppers",ce,2c,ba,6e));
	outFields->push(HX_("santa",8d,45,86,77));
	outFields->push(HX_("bgGirls",92,16,2b,41));
	outFields->push(HX_("wiggleShit",0b,07,40,33));
	outFields->push(HX_("LightsOutBG",96,f5,4c,d9));
	outFields->push(HX_("BlindingBG",d2,e1,bb,9e));
	outFields->push(HX_("freezeIndicator",78,ba,c9,ff));
	outFields->push(HX_("triggeredAlready",c1,04,84,a5));
	outFields->push(HX_("allowedToHeadbang",bb,a8,e9,48));
	outFields->push(HX_("talking",36,57,a8,16));
	outFields->push(HX_("songScore",3d,bb,53,a8));
	outFields->push(HX_("scoreTxt",3e,12,c4,0e));
	outFields->push(HX_("missTxt",d4,d8,74,33));
	outFields->push(HX_("totalNotesHit",76,f4,57,a6));
	outFields->push(HX_("totalPlayed",37,de,ee,fd));
	outFields->push(HX_("accuracyTxt",b7,09,90,86));
	outFields->push(HX_("canDie",10,6b,1c,b8));
	outFields->push(HX_("nps",f1,d9,53,00));
	outFields->push(HX_("npsTxt",ff,58,66,c4));
	outFields->push(HX_("lives",07,f0,07,75));
	outFields->push(HX_("heartSprite",2b,98,90,6d));
	outFields->push(HX_("offbeatValue",cc,08,8a,b1));
	outFields->push(HX_("speedNote",19,ab,7c,5a));
	outFields->push(HX_("noteDrunk",d2,c7,52,1d));
	outFields->push(HX_("noteAccel",96,26,27,59));
	outFields->push(HX_("paparazziInt",d7,9b,38,2c));
	outFields->push(HX_("missCounter",60,1b,05,1c));
	outFields->push(HX_("frozen",a0,89,d0,b5));
	outFields->push(HX_("defaultCamZoom",01,50,2a,0b));
	outFields->push(HX_("inCutscene",8f,21,01,56));
	outFields->push(HX_("storyDifficultyText",5d,4b,db,c2));
	outFields->push(HX_("iconRPC",ec,c8,10,d6));
	outFields->push(HX_("songLength",9b,3a,8c,fa));
	outFields->push(HX_("detailsText",8f,5e,84,21));
	outFields->push(HX_("detailsPausedText",dd,4f,70,44));
	outFields->push(HX_("dialogueSuffix",09,66,b1,8b));
	outFields->push(HX_("miscLerp",83,77,07,97));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("zoomLerp",2a,67,ac,a0));
	outFields->push(HX_("startTimer",03,98,4c,2c));
	outFields->push(HX_("perfectMode",10,4f,4c,f3));
	outFields->push(HX_("previousFrameTime",a3,ef,a7,c2));
	outFields->push(HX_("lastReportedPlayheadPosition",86,66,7f,37));
	outFields->push(HX_("songTime",82,2a,d5,3a));
	outFields->push(HX_("debugNum",b3,39,d8,90));
	outFields->push(HX_("stair",89,6c,0b,84));
	outFields->push(HX_("noteOutput",93,1c,95,aa));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("startedCountdown",30,57,28,9b));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("endingSong",5c,73,d7,67));
	outFields->push(HX_("hits",c0,42,0e,45));
	outFields->push(HX_("timeShown",84,5d,18,31));
	outFields->push(HX_("currentTimingShown",2e,56,ba,1d));
	outFields->push(HX_("fastCarCanDrive",d2,f1,13,ee));
	outFields->push(HX_("trainMoving",76,00,99,48));
	outFields->push(HX_("trainFrameTiming",af,67,10,1b));
	outFields->push(HX_("trainCars",c7,61,9c,4d));
	outFields->push(HX_("trainFinishing",87,15,8c,24));
	outFields->push(HX_("trainCooldown",93,a3,58,0c));
	outFields->push(HX_("startedMoving",af,76,97,fb));
	outFields->push(HX_("lightningStrikeBeat",72,e2,3d,b6));
	outFields->push(HX_("lightningOffset",3d,a8,e5,e6));
	outFields->push(HX_("curLight",36,8b,aa,bc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,songName),HX_("songName",c0,d0,d7,36)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songPositionBar),HX_("songPositionBar",d5,62,6e,a6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,halloweenLevel),HX_("halloweenLevel",b7,ca,23,07)},
	{::hx::fsObject /*  ::DialogueBox */ ,(int)offsetof(PlayState_obj,doof),HX_("doof",62,f1,6d,42)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(PlayState_obj,dad),HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(PlayState_obj,gf),HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::Boyfriend */ ,(int)offsetof(PlayState_obj,boyfriend),HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlayState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,strumLineNotes),HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,playerStrums),HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,player2Strums),HX_("player2Strums",9b,9b,26,0f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,strums2),HX_("strums2",e8,65,e1,00)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,hearts),HX_("hearts",2d,b6,0a,fd)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,camZooming),HX_("camZooming",60,3b,bf,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,gfSpeed),HX_("gfSpeed",e8,9c,20,98)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,healthBarBG),HX_("healthBarBG",1c,d8,3b,f4)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(PlayState_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,generatedMusic),HX_("generatedMusic",96,8a,5d,71)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP1),HX_("iconP1",9a,bd,d6,45)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP2),HX_("iconP2",9b,bd,d6,45)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camNOTES),HX_("camNOTES",b2,89,c3,92)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camPAUSE),HX_("camPAUSE",67,84,50,b0)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,notesHitArray),HX_("notesHitArray",a7,0b,f3,bd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentFrames),HX_("currentFrames",bf,30,e2,8f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,halloweenBG),HX_("halloweenBG",92,b2,88,5c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,isHalloween),HX_("isHalloween",43,72,b9,2e)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,phillyCityLights),HX_("phillyCityLights",30,e0,12,1f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,phillyTrain),HX_("phillyTrain",80,9b,65,bb)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,trainSound),HX_("trainSound",e7,b3,e5,da)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,limo),HX_("limo",1f,17,b3,47)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,grpLimoDancers),HX_("grpLimoDancers",70,18,93,51)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,fastCar),HX_("fastCar",d8,f2,1f,de)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,upperBoppers),HX_("upperBoppers",37,47,71,21)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,bottomBoppers),HX_("bottomBoppers",ce,2c,ba,6e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,santa),HX_("santa",8d,45,86,77)},
	{::hx::fsObject /*  ::BackgroundGirls */ ,(int)offsetof(PlayState_obj,bgGirls),HX_("bgGirls",92,16,2b,41)},
	{::hx::fsObject /*  ::WiggleEffect */ ,(int)offsetof(PlayState_obj,wiggleShit),HX_("wiggleShit",0b,07,40,33)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,LightsOutBG),HX_("LightsOutBG",96,f5,4c,d9)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,BlindingBG),HX_("BlindingBG",d2,e1,bb,9e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,freezeIndicator),HX_("freezeIndicator",78,ba,c9,ff)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,triggeredAlready),HX_("triggeredAlready",c1,04,84,a5)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,allowedToHeadbang),HX_("allowedToHeadbang",bb,a8,e9,48)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,talking),HX_("talking",36,57,a8,16)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScore),HX_("songScore",3d,bb,53,a8)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,scoreTxt),HX_("scoreTxt",3e,12,c4,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,missTxt),HX_("missTxt",d4,d8,74,33)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHit),HX_("totalNotesHit",76,f4,57,a6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,totalPlayed),HX_("totalPlayed",37,de,ee,fd)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,accuracyTxt),HX_("accuracyTxt",b7,09,90,86)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canDie),HX_("canDie",10,6b,1c,b8)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,nps),HX_("nps",f1,d9,53,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,npsTxt),HX_("npsTxt",ff,58,66,c4)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,lives),HX_("lives",07,f0,07,75)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,heartSprite),HX_("heartSprite",2b,98,90,6d)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,offbeatValue),HX_("offbeatValue",cc,08,8a,b1)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,speedNote),HX_("speedNote",19,ab,7c,5a)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,noteDrunk),HX_("noteDrunk",d2,c7,52,1d)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,noteAccel),HX_("noteAccel",96,26,27,59)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,paparazziInt),HX_("paparazziInt",d7,9b,38,2c)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,missCounter),HX_("missCounter",60,1b,05,1c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,frozen),HX_("frozen",a0,89,d0,b5)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,defaultCamZoom),HX_("defaultCamZoom",01,50,2a,0b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCutscene),HX_("inCutscene",8f,21,01,56)},
	{::hx::fsString,(int)offsetof(PlayState_obj,storyDifficultyText),HX_("storyDifficultyText",5d,4b,db,c2)},
	{::hx::fsString,(int)offsetof(PlayState_obj,iconRPC),HX_("iconRPC",ec,c8,10,d6)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songLength),HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsText),HX_("detailsText",8f,5e,84,21)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsPausedText),HX_("detailsPausedText",dd,4f,70,44)},
	{::hx::fsString,(int)offsetof(PlayState_obj,dialogueSuffix),HX_("dialogueSuffix",09,66,b1,8b)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,miscLerp),HX_("miscLerp",83,77,07,97)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,zoomLerp),HX_("zoomLerp",2a,67,ac,a0)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,startTimer),HX_("startTimer",03,98,4c,2c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,perfectMode),HX_("perfectMode",10,4f,4c,f3)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,previousFrameTime),HX_("previousFrameTime",a3,ef,a7,c2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastReportedPlayheadPosition),HX_("lastReportedPlayheadPosition",86,66,7f,37)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songTime),HX_("songTime",82,2a,d5,3a)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,debugNum),HX_("debugNum",b3,39,d8,90)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,stair),HX_("stair",89,6c,0b,84)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,noteOutput),HX_("noteOutput",93,1c,95,aa)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedCountdown),HX_("startedCountdown",30,57,28,9b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canPause),HX_("canPause",c6,18,eb,2b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,endingSong),HX_("endingSong",5c,73,d7,67)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,hits),HX_("hits",c0,42,0e,45)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,timeShown),HX_("timeShown",84,5d,18,31)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,currentTimingShown),HX_("currentTimingShown",2e,56,ba,1d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,fastCarCanDrive),HX_("fastCarCanDrive",d2,f1,13,ee)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,trainMoving),HX_("trainMoving",76,00,99,48)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,trainFrameTiming),HX_("trainFrameTiming",af,67,10,1b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,trainCars),HX_("trainCars",c7,61,9c,4d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,trainFinishing),HX_("trainFinishing",87,15,8c,24)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,trainCooldown),HX_("trainCooldown",93,a3,58,0c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedMoving),HX_("startedMoving",af,76,97,fb)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lightningStrikeBeat),HX_("lightningStrikeBeat",72,e2,3d,b6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lightningOffset),HX_("lightningOffset",3d,a8,e5,e6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curLight),HX_("curLight",36,8b,aa,bc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &PlayState_obj::curStage,HX_("curStage",1e,65,b9,cb)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &PlayState_obj::SONG,HX_("SONG",d5,eb,18,37)},
	{::hx::fsString,(void *) &PlayState_obj::gameplayArea,HX_("gameplayArea",93,25,c7,91)},
	{::hx::fsString,(void *) &PlayState_obj::chartType,HX_("chartType",b8,82,88,28)},
	{::hx::fsInt,(void *) &PlayState_obj::storyWeek,HX_("storyWeek",89,3e,16,2f)},
	{::hx::fsInt,(void *) &PlayState_obj::loops,HX_("loops",8f,f1,f9,78)},
	{::hx::fsFloat,(void *) &PlayState_obj::speed,HX_("speed",87,97,69,81)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::storyPlaylist,HX_("storyPlaylist",67,a1,89,7c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::difficultyPlaylist,HX_("difficultyPlaylist",ad,91,ce,d7)},
	{::hx::fsInt,(void *) &PlayState_obj::storyDifficulty,HX_("storyDifficulty",90,ca,a7,d0)},
	{::hx::fsInt,(void *) &PlayState_obj::shits,HX_("shits",b3,f8,22,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::bads,HX_("bads",0e,db,10,41)},
	{::hx::fsInt,(void *) &PlayState_obj::goods,HX_("goods",96,00,f9,97)},
	{::hx::fsInt,(void *) &PlayState_obj::sicks,HX_("sicks",f5,99,c7,7c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &PlayState_obj::songPosBG,HX_("songPosBG",44,6c,11,f6)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(void *) &PlayState_obj::songPosBar,HX_("songPosBar",54,66,2d,59)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &PlayState_obj::prevCamFollow,HX_("prevCamFollow",6d,99,a3,09)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::dialogue,HX_("dialogue",18,2d,94,a7)},
	{::hx::fsInt,(void *) &PlayState_obj::misses,HX_("misses",6a,62,54,56)},
	{::hx::fsFloat,(void *) &PlayState_obj::accuracy,HX_("accuracy",39,06,c5,ff)},
	{::hx::fsInt,(void *) &PlayState_obj::arrowLane,HX_("arrowLane",55,c4,50,03)},
	{::hx::fsBool,(void *) &PlayState_obj::ended,HX_("ended",fa,48,7a,70)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignScore,HX_("campaignScore",22,22,d6,07)},
	{::hx::fsFloat,(void *) &PlayState_obj::daPixelZoom,HX_("daPixelZoom",7c,81,6e,df)},
	{::hx::fsFloat,(void *) &PlayState_obj::cameraX,HX_("cameraX",13,8a,31,e3)},
	{::hx::fsFloat,(void *) &PlayState_obj::cameraY,HX_("cameraY",14,8a,31,e3)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("songName",c0,d0,d7,36),
	HX_("songPositionBar",d5,62,6e,a6),
	HX_("halloweenLevel",b7,ca,23,07),
	HX_("doof",62,f1,6d,42),
	HX_("vocals",5e,10,51,59),
	HX_("dad",47,36,4c,00),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSection",45,58,c1,68),
	HX_("camFollow",e0,6e,47,22),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("player2Strums",9b,9b,26,0f),
	HX_("strums2",e8,65,e1,00),
	HX_("hearts",2d,b6,0a,fd),
	HX_("camZooming",60,3b,bf,d6),
	HX_("curSong",75,95,6d,b7),
	HX_("gfSpeed",e8,9c,20,98),
	HX_("health",9c,28,06,fd),
	HX_("combo",4e,28,5d,4a),
	HX_("healthBarBG",1c,d8,3b,f4),
	HX_("healthBar",97,8a,92,42),
	HX_("generatedMusic",96,8a,5d,71),
	HX_("startingSong",b5,31,61,33),
	HX_("iconP1",9a,bd,d6,45),
	HX_("iconP2",9b,bd,d6,45),
	HX_("camNOTES",b2,89,c3,92),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camPAUSE",67,84,50,b0),
	HX_("camGame",a1,47,50,cf),
	HX_("notesHitArray",a7,0b,f3,bd),
	HX_("currentFrames",bf,30,e2,8f),
	HX_("halloweenBG",92,b2,88,5c),
	HX_("isHalloween",43,72,b9,2e),
	HX_("phillyCityLights",30,e0,12,1f),
	HX_("phillyTrain",80,9b,65,bb),
	HX_("trainSound",e7,b3,e5,da),
	HX_("limo",1f,17,b3,47),
	HX_("grpLimoDancers",70,18,93,51),
	HX_("fastCar",d8,f2,1f,de),
	HX_("upperBoppers",37,47,71,21),
	HX_("bottomBoppers",ce,2c,ba,6e),
	HX_("santa",8d,45,86,77),
	HX_("bgGirls",92,16,2b,41),
	HX_("wiggleShit",0b,07,40,33),
	HX_("LightsOutBG",96,f5,4c,d9),
	HX_("BlindingBG",d2,e1,bb,9e),
	HX_("freezeIndicator",78,ba,c9,ff),
	HX_("triggeredAlready",c1,04,84,a5),
	HX_("allowedToHeadbang",bb,a8,e9,48),
	HX_("talking",36,57,a8,16),
	HX_("songScore",3d,bb,53,a8),
	HX_("scoreTxt",3e,12,c4,0e),
	HX_("missTxt",d4,d8,74,33),
	HX_("totalNotesHit",76,f4,57,a6),
	HX_("totalPlayed",37,de,ee,fd),
	HX_("accuracyTxt",b7,09,90,86),
	HX_("canDie",10,6b,1c,b8),
	HX_("nps",f1,d9,53,00),
	HX_("npsTxt",ff,58,66,c4),
	HX_("lives",07,f0,07,75),
	HX_("heartSprite",2b,98,90,6d),
	HX_("offbeatValue",cc,08,8a,b1),
	HX_("speedNote",19,ab,7c,5a),
	HX_("noteDrunk",d2,c7,52,1d),
	HX_("noteAccel",96,26,27,59),
	HX_("paparazziInt",d7,9b,38,2c),
	HX_("missCounter",60,1b,05,1c),
	HX_("frozen",a0,89,d0,b5),
	HX_("defaultCamZoom",01,50,2a,0b),
	HX_("inCutscene",8f,21,01,56),
	HX_("storyDifficultyText",5d,4b,db,c2),
	HX_("iconRPC",ec,c8,10,d6),
	HX_("songLength",9b,3a,8c,fa),
	HX_("detailsText",8f,5e,84,21),
	HX_("detailsPausedText",dd,4f,70,44),
	HX_("dialogueSuffix",09,66,b1,8b),
	HX_("miscLerp",83,77,07,97),
	HX_("camLerp",26,66,a1,d2),
	HX_("zoomLerp",2a,67,ac,a0),
	HX_("create",fc,66,0f,7c),
	HX_("dialogueOrCountdown",d6,e4,77,5a),
	HX_("modifierValues",99,ee,b4,68),
	HX_("updateAccuracy",62,f9,ee,34),
	HX_("schoolIntro",58,5d,50,47),
	HX_("startTimer",03,98,4c,2c),
	HX_("perfectMode",10,4f,4c,f3),
	HX_("startCountdown",ef,1f,f0,88),
	HX_("previousFrameTime",a3,ef,a7,c2),
	HX_("lastReportedPlayheadPosition",86,66,7f,37),
	HX_("songTime",82,2a,d5,3a),
	HX_("startSong",57,9d,4b,05),
	HX_("debugNum",b3,39,d8,90),
	HX_("stair",89,6c,0b,84),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("sortByShit",35,ff,86,6e),
	HX_("noteOutput",93,1c,95,aa),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("tweenCamIn",69,37,60,f8),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	HX_("onFocus",39,fe,c6,9a),
	HX_("onFocusLost",bd,e4,85,41),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("paused",ae,40,84,ef),
	HX_("startedCountdown",30,57,28,9b),
	HX_("canPause",c6,18,eb,2b),
	HX_("truncateFloat",56,85,20,77),
	HX_("update",09,86,05,87),
	HX_("sustain2",2f,12,ec,b8),
	HX_("endSong",50,dd,7c,2e),
	HX_("endingSong",5c,73,d7,67),
	HX_("hits",c0,42,0e,45),
	HX_("timeShown",84,5d,18,31),
	HX_("currentTimingShown",2e,56,ba,1d),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("keyShit",ff,40,2c,a6),
	HX_("noteMiss",0e,78,8f,57),
	HX_("freezeBF",db,47,1d,29),
	HX_("badNoteCheck",f1,30,bc,41),
	HX_("noteCheck",76,e3,43,83),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("fastCarCanDrive",d2,f1,13,ee),
	HX_("resetFastCar",c9,38,fe,4f),
	HX_("fastCarDrive",12,97,d2,be),
	HX_("trainMoving",76,00,99,48),
	HX_("trainFrameTiming",af,67,10,1b),
	HX_("trainCars",c7,61,9c,4d),
	HX_("trainFinishing",87,15,8c,24),
	HX_("trainCooldown",93,a3,58,0c),
	HX_("trainStart",7a,9b,24,de),
	HX_("startedMoving",af,76,97,fb),
	HX_("updateTrainPos",d5,01,38,2b),
	HX_("trainReset",e7,70,e1,40),
	HX_("lightningStrikeShit",bc,d0,7c,c1),
	HX_("stepHit",67,ae,41,81),
	HX_("lightningStrikeBeat",72,e2,3d,b6),
	HX_("lightningOffset",3d,a8,e5,e6),
	HX_("beatHit",7d,ea,04,74),
	HX_("curLight",36,8b,aa,bc),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_MARK_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_MARK_MEMBER_NAME(PlayState_obj::gameplayArea,"gameplayArea");
	HX_MARK_MEMBER_NAME(PlayState_obj::chartType,"chartType");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_MARK_MEMBER_NAME(PlayState_obj::loops,"loops");
	HX_MARK_MEMBER_NAME(PlayState_obj::speed,"speed");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::difficultyPlaylist,"difficultyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::shits,"shits");
	HX_MARK_MEMBER_NAME(PlayState_obj::bads,"bads");
	HX_MARK_MEMBER_NAME(PlayState_obj::goods,"goods");
	HX_MARK_MEMBER_NAME(PlayState_obj::sicks,"sicks");
	HX_MARK_MEMBER_NAME(PlayState_obj::songPosBG,"songPosBG");
	HX_MARK_MEMBER_NAME(PlayState_obj::songPosBar,"songPosBar");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_MARK_MEMBER_NAME(PlayState_obj::dialogue,"dialogue");
	HX_MARK_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_MARK_MEMBER_NAME(PlayState_obj::accuracy,"accuracy");
	HX_MARK_MEMBER_NAME(PlayState_obj::arrowLane,"arrowLane");
	HX_MARK_MEMBER_NAME(PlayState_obj::ended,"ended");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_MARK_MEMBER_NAME(PlayState_obj::cameraX,"cameraX");
	HX_MARK_MEMBER_NAME(PlayState_obj::cameraY,"cameraY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::gameplayArea,"gameplayArea");
	HX_VISIT_MEMBER_NAME(PlayState_obj::chartType,"chartType");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_VISIT_MEMBER_NAME(PlayState_obj::loops,"loops");
	HX_VISIT_MEMBER_NAME(PlayState_obj::speed,"speed");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::difficultyPlaylist,"difficultyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::shits,"shits");
	HX_VISIT_MEMBER_NAME(PlayState_obj::bads,"bads");
	HX_VISIT_MEMBER_NAME(PlayState_obj::goods,"goods");
	HX_VISIT_MEMBER_NAME(PlayState_obj::sicks,"sicks");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songPosBG,"songPosBG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songPosBar,"songPosBar");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::dialogue,"dialogue");
	HX_VISIT_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::accuracy,"accuracy");
	HX_VISIT_MEMBER_NAME(PlayState_obj::arrowLane,"arrowLane");
	HX_VISIT_MEMBER_NAME(PlayState_obj::ended,"ended");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_VISIT_MEMBER_NAME(PlayState_obj::cameraX,"cameraX");
	HX_VISIT_MEMBER_NAME(PlayState_obj::cameraY,"cameraY");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("curStage",1e,65,b9,cb),
	HX_("SONG",d5,eb,18,37),
	HX_("gameplayArea",93,25,c7,91),
	HX_("chartType",b8,82,88,28),
	HX_("storyWeek",89,3e,16,2f),
	HX_("loops",8f,f1,f9,78),
	HX_("speed",87,97,69,81),
	HX_("storyPlaylist",67,a1,89,7c),
	HX_("difficultyPlaylist",ad,91,ce,d7),
	HX_("storyDifficulty",90,ca,a7,d0),
	HX_("shits",b3,f8,22,7c),
	HX_("bads",0e,db,10,41),
	HX_("goods",96,00,f9,97),
	HX_("sicks",f5,99,c7,7c),
	HX_("songPosBG",44,6c,11,f6),
	HX_("songPosBar",54,66,2d,59),
	HX_("prevCamFollow",6d,99,a3,09),
	HX_("dialogue",18,2d,94,a7),
	HX_("misses",6a,62,54,56),
	HX_("accuracy",39,06,c5,ff),
	HX_("arrowLane",55,c4,50,03),
	HX_("ended",fa,48,7a,70),
	HX_("campaignScore",22,22,d6,07),
	HX_("daPixelZoom",7c,81,6e,df),
	HX_("cameraX",13,8a,31,e3),
	HX_("cameraY",14,8a,31,e3),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_54_boot)
HXDLIN(  54)		curStage = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_56_boot)
HXDLIN(  56)		gameplayArea = HX_("Story",d5,83,43,17);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_57_boot)
HXDLIN(  57)		chartType = HX_("standard",3d,37,78,ea);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_58_boot)
HXDLIN(  58)		storyWeek = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_60_boot)
HXDLIN(  60)		loops = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_61_boot)
HXDLIN(  61)		speed = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_63_boot)
HXDLIN(  63)		storyPlaylist = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_64_boot)
HXDLIN(  64)		difficultyPlaylist = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_66_boot)
HXDLIN(  66)		storyDifficulty = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_67_boot)
HXDLIN(  67)		shits = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_68_boot)
HXDLIN(  68)		bads = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_69_boot)
HXDLIN(  69)		goods = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_70_boot)
HXDLIN(  70)		sicks = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_125_boot)
HXDLIN( 125)		dialogue = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_158_boot)
HXDLIN( 158)		misses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_160_boot)
HXDLIN( 160)		accuracy = ((Float)0.00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_165_boot)
HXDLIN( 165)		arrowLane = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_168_boot)
HXDLIN( 168)		ended = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_180_boot)
HXDLIN( 180)		campaignScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_185_boot)
HXDLIN( 185)		daPixelZoom = ((Float)6);
            	}
}


// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlaySelection
#include <PlaySelection.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_SettingsState
#include <SettingsState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TitleStateReturn
#include <TitleStateReturn.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_27_new,"MainMenuState","new",0x83a7c9cb,"MainMenuState.new","MainMenuState.hx",27,0x0e5db805)
static const ::String _hx_array_data_205e8859_1[] = {
	HX_("play",f4,2d,5a,4a),HX_("support",0f,0c,23,3d),HX_("options",5e,33,fe,df),
};
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_137_create,"MainMenuState","create",0x6b76e271,"MainMenuState.create","MainMenuState.hx",137,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_48_create,"MainMenuState","create",0x6b76e271,"MainMenuState.create","MainMenuState.hx",48,0x0e5db805)
static const int _hx_array_data_205e8859_6[] = {
	(int)16711680,(int)1437489636,(int)-1441141505,
};
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_153_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",153,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_250_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",250,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_145_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",145,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_222_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",222,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_226_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",226,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_215_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",215,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_270_changeItem,"MainMenuState","changeItem",0xf62bd498,"MainMenuState.changeItem","MainMenuState.hx",270,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_261_changeItem,"MainMenuState","changeItem",0xf62bd498,"MainMenuState.changeItem","MainMenuState.hx",261,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_29_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",29,0x0e5db805)

void MainMenuState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_27_new)
HXLINE( 142)		this->selectable = false;
HXLINE( 141)		this->selectedSomethin = false;
HXLINE(  45)		this->camLerp = ((Float)0.1);
HXLINE(  43)		this->gradientBar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null())->makeGraphic(::flixel::FlxG_obj::width,300,-5635926,null(),null());
HXLINE(  42)		::String library = null();
HXDLIN(  42)		this->checker =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Main_Checker",ef,19,4f,37)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),((Float)0.2),((Float)0.2),true,true,null(),null());
HXLINE(  41)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-89,null(),null());
HXDLIN(  41)		::String library1 = null();
HXDLIN(  41)		this->bg = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("mBG_Main",86,53,9a,5c)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE(  34)		this->optionShit = ::Array_obj< ::String >::fromData( _hx_array_data_205e8859_1,3);
HXLINE(  27)		super::__construct(TransIn,TransOut);
            	}

Dynamic MainMenuState_obj::__CreateEmpty() { return new MainMenuState_obj; }

void *MainMenuState_obj::_hx_vtable = 0;

Dynamic MainMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MainMenuState_obj > _hx_result = new MainMenuState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MainMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x6915cded || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void MainMenuState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MainMenuState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_137_create)
HXLINE( 137)			_gthis->selectable = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_48_create)
HXLINE(  47)		 ::MainMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  49)		this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(  50)		this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(  53)		if (::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(  55)			::String _hx_switch_0 = ( (::String)(::MainVariables_obj::_variables->__Field(HX_("music",a5,d0,5a,10),::hx::paccDynamic)) );
            			if (  (_hx_switch_0==HX_("classic",12,52,91,69)) ){
HXLINE(  58)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  58)				::String library = null();
HXDLIN(  58)				::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN(  58)				_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE(  59)				::Conductor_obj::changeBPM(( (Float)(102) ));
HXLINE(  57)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("funky",ad,f7,88,08)) ){
HXLINE(  61)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  61)				::String library = null();
HXDLIN(  61)				::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("funkyMenu",ec,43,55,b5)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN(  61)				_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE(  62)				::Conductor_obj::changeBPM(( (Float)(140) ));
HXLINE(  60)				goto _hx_goto_2;
            			}
            			_hx_goto_2:;
            		}
HXLINE(  66)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  68)		this->bg->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  69)		this->bg->scrollFactor->set_y(((Float)0.16));
HXLINE(  70)		 ::flixel::FlxSprite _hx_tmp = this->bg;
HXDLIN(  70)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->bg->get_width() * ((Float)1.1))),null());
HXLINE(  71)		this->bg->updateHitbox();
HXLINE(  72)		this->bg->screenCenter(null());
HXLINE(  73)		this->bg->set_antialiasing(true);
HXLINE(  74)		this->bg->set_angle(( (Float)(179) ));
HXLINE(  75)		this->add(this->bg);
HXLINE(  77)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE(  78)		this->add(this->camFollow);
HXLINE(  80)		this->gradientBar = ::flixel::util::FlxGradient_obj::createGradientFlxSprite(::Math_obj::round(( (Float)(::flixel::FlxG_obj::width) )),512,::Array_obj< int >::fromData( _hx_array_data_205e8859_6,3),1,90,true);
HXLINE(  81)		 ::flixel::FlxSprite _hx_tmp1 = this->gradientBar;
HXDLIN(  81)		int _hx_tmp2 = ::flixel::FlxG_obj::height;
HXDLIN(  81)		_hx_tmp1->set_y((( (Float)(_hx_tmp2) ) - this->gradientBar->get_height()));
HXLINE(  82)		this->add(this->gradientBar);
HXLINE(  83)		this->gradientBar->scrollFactor->set(0,0);
HXLINE(  85)		this->add(this->checker);
HXLINE(  86)		this->checker->scrollFactor->set(0,((Float)0.07));
HXLINE(  89)		 ::flixel::FlxSprite side =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,null(),null());
HXDLIN(  89)		::String library = null();
HXDLIN(  89)		 ::flixel::FlxSprite side1 = side->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Main_Side",9d,0e,87,12)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  90)		side1->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  91)		side1->scrollFactor->set_y(( (Float)(0) ));
HXLINE(  92)		side1->set_antialiasing(true);
HXLINE(  93)		this->add(side1);
HXLINE(  95)		this->menuItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  96)		this->add(this->menuItems);
HXLINE(  98)		::String library1 = null();
HXDLIN(  98)		::String tex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("FNF_main_menu_assets",be,dc,57,e2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1);
HXDLIN(  98)		 ::flixel::graphics::frames::FlxAtlasFrames tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(tex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("FNF_main_menu_assets",be,dc,57,e2)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXLINE( 100)		{
HXLINE( 100)			int _g = 0;
HXDLIN( 100)			int _g1 = this->optionShit->length;
HXDLIN( 100)			while((_g < _g1)){
HXLINE( 100)				_g = (_g + 1);
HXDLIN( 100)				int i = (_g - 1);
HXLINE( 102)				 ::flixel::FlxSprite menuItem =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-800,(40 + (i * 200)),null());
HXLINE( 103)				menuItem->set_frames(tex1);
HXLINE( 104)				menuItem->animation->addByPrefix(HX_("idle",14,a7,b3,45),(this->optionShit->__get(i) + HX_(" idle",34,37,86,b2)),24,null(),null(),null());
HXLINE( 105)				menuItem->animation->addByPrefix(HX_("selected",5b,2a,6d,b1),(this->optionShit->__get(i) + HX_(" select",1c,f3,e1,9c)),24,null(),null(),null());
HXLINE( 106)				menuItem->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 107)				menuItem->ID = i;
HXLINE( 108)				Float _hx_tmp = (((menuItem->get_width() / ( (Float)(4) )) + (i * 210)) - ( (Float)(30) ));
HXDLIN( 108)				::flixel::tweens::FlxTween_obj::tween(menuItem, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),_hx_tmp)),((Float)1.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
HXLINE( 109)				this->menuItems->add(menuItem).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 110)				menuItem->scrollFactor->set(null(),null());
HXLINE( 111)				menuItem->set_antialiasing(true);
HXLINE( 112)				menuItem->scale->set(((Float)0.8),((Float)0.8));
HXLINE( 113)				menuItem->updateHitbox();
            			}
            		}
HXLINE( 116)		::flixel::FlxG_obj::camera->follow(this->camFollow,null(),this->camLerp);
HXLINE( 118)		::flixel::FlxG_obj::camera->set_zoom(( (Float)(3) ));
HXLINE( 119)		side1->set_alpha(( (Float)(0) ));
HXLINE( 120)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),1)),((Float)1.1), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
HXLINE( 121)		::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("angle",d3,43,e2,22),0)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 122)		::flixel::tweens::FlxTween_obj::tween(side1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.9), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 124)		int versionShit = (::flixel::FlxG_obj::height - 18);
HXDLIN( 124)		 ::flixel::text::FlxText versionShit1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,versionShit,0,::lime::app::Application_obj::current->meta->get_string(HX_("version",18,e7,f1,7c)),12,null());
HXLINE( 125)		versionShit1->scrollFactor->set(null(),null());
HXLINE( 126)		versionShit1->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 127)		this->add(versionShit1);
HXLINE( 131)		this->changeItem(null());
HXLINE( 133)		this->super::create();
HXLINE( 135)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


void MainMenuState_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MainMenuState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_153_update)
HXLINE( 154)			Float a = spr->scale->x;
HXDLIN( 154)			Float a1 = spr->scale->y;
HXDLIN( 154)			spr->scale->set((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)0.8) - a))),(a1 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)0.8) - a1))));
HXLINE( 155)			Float a2 = spr->y;
HXDLIN( 155)			spr->set_y((a2 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)((40 + (spr->ID * 200))) ) - a2))));
HXLINE( 157)			if ((spr->ID == ::MainMenuState_obj::curSelected)) {
HXLINE( 159)				Float a = spr->scale->x;
HXDLIN( 159)				Float a1 = spr->scale->y;
HXDLIN( 159)				spr->scale->set((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)1.1) - a))),(a1 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)1.1) - a1))));
HXLINE( 160)				Float a2 = spr->y;
HXDLIN( 160)				spr->set_y((a2 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)((-10 + (spr->ID * 200))) ) - a2))));
            			}
HXLINE( 163)			spr->updateHitbox();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::MainMenuState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_250_update)
HXLINE( 250)			if ((spr->ID == ::MainMenuState_obj::curSelected)) {
HXLINE( 252)				 ::flixel::FlxObject _gthis1 = _gthis->camFollow;
HXDLIN( 252)				Float a = _gthis->camFollow->y;
HXDLIN( 252)				Float b = spr->getGraphicMidpoint(null())->y;
HXDLIN( 252)				_gthis1->set_y((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (b - a))));
HXLINE( 253)				 ::flixel::FlxObject _gthis2 = _gthis->camFollow;
HXDLIN( 253)				_gthis2->set_x(spr->getGraphicMidpoint(null())->x);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_145_update)
HXLINE( 144)		 ::MainMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 146)		if ((::flixel::FlxG_obj::sound->music->_volume < ((((Float)0.8) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) )) / ( (Float)(100) )))) {
HXLINE( 148)			 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 148)			_g->set_volume((_g->_volume + (((((Float)0.5) * ( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) )) / ( (Float)(100) )) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 152)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 166)		{
HXLINE( 166)			 ::flixel::addons::display::FlxBackdrop _g = this->checker;
HXDLIN( 166)			_g->set_x((_g->x - (((Float)0.45) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 167)		{
HXLINE( 167)			 ::flixel::addons::display::FlxBackdrop _g1 = this->checker;
HXDLIN( 167)			_g1->set_y((_g1->y - (((Float)0.16) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 169)		bool _hx_tmp;
HXDLIN( 169)		if (!(this->selectedSomethin)) {
HXLINE( 169)			_hx_tmp = this->selectable;
            		}
            		else {
HXLINE( 169)			_hx_tmp = false;
            		}
HXDLIN( 169)		if (_hx_tmp) {
HXLINE( 171)			if (::PlayerSettings_obj::player1->controls->_upP->check()) {
HXLINE( 173)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 173)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 173)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 174)				this->changeItem(-1);
            			}
HXLINE( 177)			if (::PlayerSettings_obj::player1->controls->_downP->check()) {
HXLINE( 179)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 179)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 179)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 180)				this->changeItem(1);
            			}
HXLINE( 183)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 185)				this->selectedSomethin = true;
HXLINE( 187)				::DiscordClient_obj::changePresence(HX_("Back to the Title Screen.",1f,23,6d,e4),null(),null(),null(),null());
HXLINE( 190)				{
HXLINE( 190)					 ::flixel::FlxState nextState =  ::TitleStateReturn_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 190)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 190)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
HXLINE( 193)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 195)				if ((this->optionShit->__get(::MainMenuState_obj::curSelected) == HX_("support",0f,0c,23,3d))) {
HXLINE( 200)					{
HXLINE( 200)						::String prefix = HX_("",00,00,00,00);
HXDLIN( 200)						if (!( ::EReg_obj::__alloc( HX_CTX ,HX_("^https?://",48,ee,dd,38),HX_("",00,00,00,00))->match(HX_("https://ninja-muffin24.itch.io/funkin",69,b0,72,92)))) {
HXLINE( 200)							prefix = HX_("http://",52,75,cd,5a);
            						}
HXDLIN( 200)						::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,(prefix + HX_("https://ninja-muffin24.itch.io/funkin",69,b0,72,92))),HX_("_blank",95,26,d9,b0));
            					}
HXLINE( 203)					::DiscordClient_obj::changePresence(HX_("Pogger people donate, like me.",2d,ec,fc,da),null(),null(),null(),null());
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::MainMenuState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::FlxSprite spr){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,spr) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_222_update)
HXLINE( 222)							spr->kill();
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::MainMenuState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer tmr){
            							HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_226_update)
HXLINE( 227)							::String daChoice = _gthis->optionShit->__get(::MainMenuState_obj::curSelected);
HXLINE( 229)							::String _hx_switch_0 = daChoice;
            							if (  (_hx_switch_0==HX_("options",5e,33,fe,df)) ){
HXLINE( 237)								{
HXLINE( 237)									 ::flixel::FlxState nextState =  ::SettingsState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 237)									if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 237)										::flixel::FlxG_obj::game->_requestedState = nextState;
            									}
            								}
HXLINE( 239)								::DiscordClient_obj::changePresence(HX_("Gonna set some options brb.",85,a1,b5,0f),null(),null(),null(),null());
HXLINE( 236)								goto _hx_goto_7;
            							}
            							if (  (_hx_switch_0==HX_("play",f4,2d,5a,4a)) ){
HXLINE( 232)								{
HXLINE( 232)									 ::flixel::FlxState nextState =  ::PlaySelection_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 232)									if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 232)										::flixel::FlxG_obj::game->_requestedState = nextState;
            									}
            								}
HXLINE( 234)								::DiscordClient_obj::changePresence(HX_("Going to the play selection.",00,70,bb,ef),null(),null(),null(),null());
HXLINE( 231)								goto _hx_goto_7;
            							}
            							_hx_goto_7:;
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_215_update)
HXLINE( 216)						::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("zoom",13,a3,f8,50),5)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 217)						::flixel::tweens::FlxTween_obj::tween(_gthis->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("angle",d3,43,e2,22),45)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 218)						::flixel::tweens::FlxTween_obj::tween(spr, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("x",78,00,00,00),-600)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backIn_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(spr)))));
HXLINE( 225)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_2(_gthis)),null());
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 208)					this->selectedSomethin = true;
HXLINE( 209)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 209)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 209)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 211)					::DiscordClient_obj::changePresence((HX_("Chosen: ",f8,16,b4,b8) + this->optionShit->__get(::MainMenuState_obj::curSelected).toUpperCase()),null(),null(),null(),null());
HXLINE( 214)					this->menuItems->forEach( ::Dynamic(new _hx_Closure_3(_gthis)),null());
            				}
            			}
            		}
HXLINE( 248)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_4(_gthis)),null());
HXLINE( 257)		this->super::update(elapsed);
            	}


void MainMenuState_obj::changeItem(::hx::Null< int >  __o_huh){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_270_changeItem)
HXLINE( 271)			spr->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 273)			if ((spr->ID == ::MainMenuState_obj::curSelected)) {
HXLINE( 275)				spr->animation->play(HX_("selected",5b,2a,6d,b1),null(),null(),null());
            			}
HXLINE( 278)			spr->updateHitbox();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_261_changeItem)
HXLINE( 262)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::MainMenuState >();
HXDLIN( 262)		::MainMenuState_obj::curSelected = (::MainMenuState_obj::curSelected + huh);
HXLINE( 264)		if ((::MainMenuState_obj::curSelected >= this->menuItems->length)) {
HXLINE( 265)			::MainMenuState_obj::curSelected = 0;
            		}
HXLINE( 266)		if ((::MainMenuState_obj::curSelected < 0)) {
HXLINE( 267)			::MainMenuState_obj::curSelected = (this->menuItems->length - 1);
            		}
HXLINE( 269)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE( 282)		::DiscordClient_obj::changePresence((HX_("Main Menu: ",0c,73,7f,24) + this->optionShit->__get(::MainMenuState_obj::curSelected).toUpperCase()),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MainMenuState_obj,changeItem,(void))

int MainMenuState_obj::curSelected;


::hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< MainMenuState_obj > __this = new MainMenuState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MainMenuState_obj *__this = (MainMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MainMenuState_obj), true, "MainMenuState"));
	*(void **)__this = MainMenuState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MainMenuState_obj::MainMenuState_obj()
{
}

void MainMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MainMenuState);
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(optionShit,"optionShit");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(checker,"checker");
	HX_MARK_MEMBER_NAME(gradientBar,"gradientBar");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MainMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(optionShit,"optionShit");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(checker,"checker");
	HX_VISIT_MEMBER_NAME(gradientBar,"gradientBar");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MainMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { return ::hx::Val( checker ); }
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { return ::hx::Val( optionShit ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { return ::hx::Val( gradientBar ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { return ::hx::Val( selectedSomethin ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MainMenuState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val MainMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { checker=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { optionShit=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gradientBar") ) { gradientBar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { selectedSomethin=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MainMenuState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void MainMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("optionShit",d5,2d,ee,91));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("checker",35,b3,24,13));
	outFields->push(HX_("gradientBar",c3,05,20,d3));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("selectedSomethin",c8,ec,fb,99));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MainMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MainMenuState_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MainMenuState_obj,optionShit),HX_("optionShit",d5,2d,ee,91)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(MainMenuState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(MainMenuState_obj,checker),HX_("checker",35,b3,24,13)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,gradientBar),HX_("gradientBar",c3,05,20,d3)},
	{::hx::fsFloat,(int)offsetof(MainMenuState_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,selectedSomethin),HX_("selectedSomethin",c8,ec,fb,99)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MainMenuState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &MainMenuState_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MainMenuState_obj_sMemberFields[] = {
	HX_("menuItems",e1,15,e5,5c),
	HX_("optionShit",d5,2d,ee,91),
	HX_("camFollow",e0,6e,47,22),
	HX_("bg",c5,55,00,00),
	HX_("checker",35,b3,24,13),
	HX_("gradientBar",c3,05,20,d3),
	HX_("camLerp",26,66,a1,d2),
	HX_("create",fc,66,0f,7c),
	HX_("selectedSomethin",c8,ec,fb,99),
	HX_("selectable",96,b6,2a,c4),
	HX_("update",09,86,05,87),
	HX_("changeItem",a3,fa,08,20),
	::String(null()) };

static void MainMenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MainMenuState_obj::curSelected,"curSelected");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MainMenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::curSelected,"curSelected");
};

#endif

::hx::Class MainMenuState_obj::__mClass;

static ::String MainMenuState_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	::String(null())
};

void MainMenuState_obj::__register()
{
	MainMenuState_obj _hx_dummy;
	MainMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MainMenuState",59,88,5e,20);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MainMenuState_obj::__GetStatic;
	__mClass->mSetStaticField = &MainMenuState_obj::__SetStatic;
	__mClass->mMarkFunc = MainMenuState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MainMenuState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MainMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MainMenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MainMenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MainMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MainMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MainMenuState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_29_boot)
HXDLIN(  29)		curSelected = 0;
            	}
}


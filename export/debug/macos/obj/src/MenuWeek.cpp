// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_MenuItem
#include <MenuItem.h>
#endif
#ifndef INCLUDED_MenuWeek
#include <MenuWeek.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlaySelection
#include <PlaySelection.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Substate_ChartType
#include <Substate_ChartType.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_df1876091f8dc0e3_25_new,"MenuWeek","new",0x9b6c8fc5,"MenuWeek.new","MenuWeek.hx",25,0x5a3d4f4b)
static const ::String _hx_array_data_2f164953_1[] = {
	HX_("P",50,00,00,00),HX_("X",58,00,00,00),HX_("X-",d5,4c,00,00),HX_("SS+",8b,43,3f,00),HX_("SS",a0,48,00,00),HX_("SS-",8d,43,3f,00),HX_("S+",78,48,00,00),HX_("S",53,00,00,00),HX_("S-",7a,48,00,00),HX_("A+",ca,38,00,00),HX_("A",41,00,00,00),HX_("A-",cc,38,00,00),HX_("B",42,00,00,00),HX_("C",43,00,00,00),HX_("D",44,00,00,00),HX_("E",45,00,00,00),HX_("NA",33,44,00,00),
};
static const ::String _hx_array_data_2f164953_2[] = {
	HX_("how to funk",81,f7,19,d9),
};
static const ::String _hx_array_data_2f164953_3[] = {
	HX_("gf",1f,5a,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_df1876091f8dc0e3_218_create,"MenuWeek","create",0x627a94b7,"MenuWeek.create","MenuWeek.hx",218,0x5a3d4f4b)
HX_LOCAL_STACK_FRAME(_hx_pos_df1876091f8dc0e3_70_create,"MenuWeek","create",0x627a94b7,"MenuWeek.create","MenuWeek.hx",70,0x5a3d4f4b)
static const int _hx_array_data_2f164953_8[] = {
	(int)16711680,(int)1442381739,(int)-1426071822,
};
HX_LOCAL_STACK_FRAME(_hx_pos_df1876091f8dc0e3_225_update,"MenuWeek","update",0x6d70b3c4,"MenuWeek.update","MenuWeek.hx",225,0x5a3d4f4b)
HX_LOCAL_STACK_FRAME(_hx_pos_df1876091f8dc0e3_294_selectWeek,"MenuWeek","selectWeek",0x6984fc4b,"MenuWeek.selectWeek","MenuWeek.hx",294,0x5a3d4f4b)
HX_LOCAL_STACK_FRAME(_hx_pos_df1876091f8dc0e3_354_selectWeek,"MenuWeek","selectWeek",0x6984fc4b,"MenuWeek.selectWeek","MenuWeek.hx",354,0x5a3d4f4b)
HX_LOCAL_STACK_FRAME(_hx_pos_df1876091f8dc0e3_360_changeDifficulty,"MenuWeek","changeDifficulty",0x49bdd546,"MenuWeek.changeDifficulty","MenuWeek.hx",360,0x5a3d4f4b)
HX_LOCAL_STACK_FRAME(_hx_pos_df1876091f8dc0e3_409_changeWeek,"MenuWeek","changeWeek",0xd532bcbf,"MenuWeek.changeWeek","MenuWeek.hx",409,0x5a3d4f4b)
HX_LOCAL_STACK_FRAME(_hx_pos_df1876091f8dc0e3_441_updateText,"MenuWeek","updateText",0xb1a2de91,"MenuWeek.updateText","MenuWeek.hx",441,0x5a3d4f4b)
HX_LOCAL_STACK_FRAME(_hx_pos_df1876091f8dc0e3_474_updateRank,"MenuWeek","updateRank",0xb04d5f90,"MenuWeek.updateRank","MenuWeek.hx",474,0x5a3d4f4b)
HX_LOCAL_STACK_FRAME(_hx_pos_df1876091f8dc0e3_35_boot,"MenuWeek","boot",0x5baa3d2d,"MenuWeek.boot","MenuWeek.hx",35,0x5a3d4f4b)
HX_LOCAL_STACK_FRAME(_hx_pos_df1876091f8dc0e3_37_boot,"MenuWeek","boot",0x5baa3d2d,"MenuWeek.boot","MenuWeek.hx",37,0x5a3d4f4b)
static const bool _hx_array_data_2f164953_23[] = {
	1,
};

void MenuWeek_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_df1876091f8dc0e3_25_new)
HXLINE( 406)		this->intendedScore = 0;
HXLINE( 405)		this->lerpScore = 0;
HXLINE( 290)		this->selectedSomethin = false;
HXLINE( 222)		this->selectable = false;
HXLINE(  67)		this->characterUI =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,20,20,null());
HXLINE(  64)		this->rankTable = ::Array_obj< ::String >::fromData( _hx_array_data_2f164953_1,17);
HXLINE(  62)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  62)		::String library = null();
HXDLIN(  62)		this->boombox = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Boombox",a0,0e,f7,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  61)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,null(),null());
HXDLIN(  61)		::String library1 = null();
HXDLIN(  61)		this->bottom = _hx_tmp1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Week_Bottom",16,4b,d0,d2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE(  60)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,null(),null());
HXDLIN(  60)		::String library2 = null();
HXDLIN(  60)		this->side = _hx_tmp2->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Week_Top",8a,89,13,15)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE(  59)		this->gradientBar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null())->makeGraphic(::flixel::FlxG_obj::width,300,-5635926,null(),null());
HXLINE(  58)		::String library3 = null();
HXDLIN(  58)		this->checker =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Week_Checker",aa,f4,44,52)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library3),((Float)0.2),((Float)0.2),true,true,null(),null());
HXLINE(  57)		 ::flixel::FlxSprite _hx_tmp3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-89,null(),null());
HXDLIN(  57)		::String library4 = null();
HXDLIN(  57)		this->bg = _hx_tmp3->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("wBG_Main",bc,c8,92,98)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library4),null(),null(),null(),null(),null());
HXLINE(  49)		this->curWeek = 0;
HXLINE(  43)		this->weekNames = ::Array_obj< ::String >::fromData( _hx_array_data_2f164953_2,1);
HXLINE(  39)		this->weekCharacters = ::Array_obj< ::String >::fromData( _hx_array_data_2f164953_3,1);
HXLINE(  33)		this->curWeekData = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  29)		this->weekData = ::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("Tutorial",be,4b,67,5c)));
HXLINE(  25)		super::__construct(TransIn,TransOut);
            	}

Dynamic MenuWeek_obj::__CreateEmpty() { return new MenuWeek_obj; }

void *MenuWeek_obj::_hx_vtable = 0;

Dynamic MenuWeek_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuWeek_obj > _hx_result = new MenuWeek_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MenuWeek_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x386b06db || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void MenuWeek_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MenuWeek,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_df1876091f8dc0e3_218_create)
HXLINE( 218)			_gthis->selectable = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_df1876091f8dc0e3_70_create)
HXLINE(  69)		 ::MenuWeek _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  71)		::flixel::FlxG_obj::game->set_scaleX(( (Float)(1) ));
HXLINE(  72)		::flixel::FlxG_obj::game->set_x(( (Float)(0) ));
HXLINE(  73)		::flixel::FlxG_obj::game->set_scaleY(( (Float)(1) ));
HXLINE(  74)		::flixel::FlxG_obj::game->set_y(( (Float)(0) ));
HXLINE(  76)		this->ranks =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  78)		this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(  79)		this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(  81)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(  83)			if (::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(  84)				::String _hx_switch_0 = ( (::String)(::MainVariables_obj::_variables->__Field(HX_("music",a5,d0,5a,10),::hx::paccDynamic)) );
            				if (  (_hx_switch_0==HX_("classic",12,52,91,69)) ){
HXLINE(  87)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  87)					::String library = null();
HXDLIN(  87)					::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN(  87)					_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE(  88)					::Conductor_obj::changeBPM(( (Float)(102) ));
HXLINE(  86)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("funky",ad,f7,88,08)) ){
HXLINE(  90)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  90)					::String library = null();
HXDLIN(  90)					::String _hx_tmp1 = ::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("funkyMenu",ec,43,55,b5)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library);
HXDLIN(  90)					_hx_tmp->playMusic(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("mvolume",07,ba,f6,13),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null());
HXLINE(  91)					::Conductor_obj::changeBPM(( (Float)(140) ));
HXLINE(  89)					goto _hx_goto_4;
            				}
            				_hx_goto_4:;
            			}
            		}
HXLINE(  95)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  97)		this->bg->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  98)		this->bg->scrollFactor->set_y(( (Float)(0) ));
HXLINE(  99)		 ::flixel::FlxSprite _hx_tmp = this->bg;
HXDLIN(  99)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->bg->get_width() * ((Float)1.1))),null());
HXLINE( 100)		this->bg->updateHitbox();
HXLINE( 101)		this->bg->screenCenter(null());
HXLINE( 102)		this->bg->set_antialiasing(true);
HXLINE( 103)		this->add(this->bg);
HXLINE( 105)		this->gradientBar = ::flixel::util::FlxGradient_obj::createGradientFlxSprite(::Math_obj::round(( (Float)(::flixel::FlxG_obj::width) )),512,::Array_obj< int >::fromData( _hx_array_data_2f164953_8,3),1,90,true);
HXLINE( 106)		 ::flixel::FlxSprite _hx_tmp1 = this->gradientBar;
HXDLIN( 106)		int _hx_tmp2 = ::flixel::FlxG_obj::height;
HXDLIN( 106)		_hx_tmp1->set_y((( (Float)(_hx_tmp2) ) - this->gradientBar->get_height()));
HXLINE( 107)		this->add(this->gradientBar);
HXLINE( 108)		this->gradientBar->scrollFactor->set(0,0);
HXLINE( 110)		this->add(this->checker);
HXLINE( 111)		this->checker->scrollFactor->set(0,((Float)0.07));
HXLINE( 113)		this->grpWeekText =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 114)		this->add(this->grpWeekText);
HXLINE( 116)		{
HXLINE( 116)			int _g = 0;
HXDLIN( 116)			int _g1 = this->weekData->get_length();
HXDLIN( 116)			while((_g < _g1)){
HXLINE( 116)				_g = (_g + 1);
HXDLIN( 116)				int i = (_g - 1);
HXLINE( 118)				 ::MenuItem weekThing =  ::MenuItem_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(40) ),i);
HXLINE( 119)				{
HXLINE( 119)					 ::MenuItem _g1 = weekThing;
HXDLIN( 119)					Float _g2 = _g1->y;
HXDLIN( 119)					_g1->set_y((_g2 + ((weekThing->get_height() + 20) * ( (Float)(i) ))));
            				}
HXLINE( 120)				weekThing->targetY = ( (Float)(i) );
HXLINE( 121)				this->grpWeekText->add(weekThing).StaticCast<  ::MenuItem >();
HXLINE( 123)				weekThing->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 124)				weekThing->set_antialiasing(true);
            			}
            		}
HXLINE( 128)		this->side->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 129)		this->side->scrollFactor->set_y(( (Float)(0) ));
HXLINE( 130)		this->side->set_antialiasing(true);
HXLINE( 131)		this->side->screenCenter(null());
HXLINE( 132)		this->add(this->side);
HXLINE( 133)		 ::flixel::FlxSprite _hx_tmp3 = this->side;
HXDLIN( 133)		_hx_tmp3->set_y((( (Float)(0) ) - this->side->get_height()));
HXLINE( 134)		 ::flixel::FlxSprite _hx_tmp4 = this->side;
HXDLIN( 134)		Float _hx_tmp5 = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ));
HXDLIN( 134)		_hx_tmp4->set_x((_hx_tmp5 - (this->side->get_width() / ( (Float)(2) ))));
HXLINE( 136)		this->bottom->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 137)		this->bottom->scrollFactor->set_y(( (Float)(0) ));
HXLINE( 138)		this->bottom->set_antialiasing(true);
HXLINE( 139)		this->bottom->screenCenter(null());
HXLINE( 140)		this->add(this->bottom);
HXLINE( 141)		 ::flixel::FlxSprite _hx_tmp6 = this->bottom;
HXDLIN( 141)		int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN( 141)		_hx_tmp6->set_y((_hx_tmp7 + this->bottom->get_height()));
HXLINE( 143)		this->scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,0,HX_("SCORE: 49324858",a3,72,f5,b2),36,null());
HXLINE( 144)		{
HXLINE( 144)			 ::flixel::text::FlxText _this = this->scoreText;
HXDLIN( 144)			_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 144)			_this->set_borderColor(-16777216);
HXDLIN( 144)			_this->set_borderSize(( (Float)(5) ));
HXDLIN( 144)			_this->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 145)		this->scoreText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 146)		this->scoreText->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),32,null(),null(),null(),null(),null());
HXLINE( 147)		this->scoreText->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 148)		this->scoreText->set_y(( (Float)(10) ));
HXLINE( 150)		this->txtWeekTitle =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),10,0,HX_("",00,00,00,00),32,null());
HXLINE( 151)		this->txtWeekTitle->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 152)		this->txtWeekTitle->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 153)		this->txtWeekTitle->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 154)		 ::flixel::text::FlxText _hx_tmp8 = this->txtWeekTitle;
HXDLIN( 154)		Float _hx_tmp9 = this->scoreText->y;
HXDLIN( 154)		_hx_tmp8->set_y(((_hx_tmp9 + this->scoreText->get_height()) + 5));
HXLINE( 155)		this->txtWeekTitle->set_alpha(( (Float)(0) ));
HXLINE( 157)		::haxe::Log_obj::trace(HX_("Line 96",69,fa,c6,ec),::hx::SourceInfo(HX_("source/MenuWeek.hx",d7,7c,07,a6),157,HX_("MenuWeek",53,49,16,2f),HX_("create",fc,66,0f,7c)));
HXLINE( 159)		::haxe::Log_obj::trace(HX_("Line 124",27,0c,4e,41),::hx::SourceInfo(HX_("source/MenuWeek.hx",d7,7c,07,a6),159,HX_("MenuWeek",53,49,16,2f),HX_("create",fc,66,0f,7c)));
HXLINE( 161)		::String library = null();
HXDLIN( 161)		::String diffTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("difficulties",59,c7,5e,02)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 161)		 ::flixel::graphics::frames::FlxAtlasFrames diffTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(diffTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("difficulties",59,c7,5e,02)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 162)		this->sprDifficulty =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,20,null());
HXLINE( 163)		this->sprDifficulty->set_frames(diffTex1);
HXLINE( 164)		this->sprDifficulty->animation->addByPrefix(HX_("noob",94,13,0a,49),HX_("NOOB",94,db,ca,33),null(),null(),null(),null());
HXLINE( 165)		this->sprDifficulty->animation->addByPrefix(HX_("easy",02,8c,0c,43),HX_("EASY",02,54,cd,2d),null(),null(),null(),null());
HXLINE( 166)		this->sprDifficulty->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("NORMAL",27,1e,ec,e2),null(),null(),null(),null());
HXLINE( 167)		this->sprDifficulty->animation->addByPrefix(HX_("hard",eb,2e,08,45),HX_("HARD",eb,f6,c8,2f),null(),null(),null(),null());
HXLINE( 168)		this->sprDifficulty->animation->addByPrefix(HX_("expert",ea,fa,75,c4),HX_("EXPERT",ea,a6,f8,76),null(),null(),null(),null());
HXLINE( 169)		this->sprDifficulty->animation->addByPrefix(HX_("insane",aa,36,da,9d),HX_("INSANE",aa,e2,5c,50),null(),null(),null(),null());
HXLINE( 170)		this->sprDifficulty->animation->play(HX_("easy",02,8c,0c,43),null(),null(),null());
HXLINE( 171)		this->changeDifficulty(null());
HXLINE( 173)		this->add(this->sprDifficulty);
HXLINE( 174)		this->sprDifficulty->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 176)		this->add(this->ranks);
HXLINE( 178)		::haxe::Log_obj::trace(HX_("Line 150",c0,0e,4e,41),::hx::SourceInfo(HX_("source/MenuWeek.hx",d7,7c,07,a6),178,HX_("MenuWeek",53,49,16,2f),HX_("create",fc,66,0f,7c)));
HXLINE( 180)		this->txtTracklist =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.05)),200,0,HX_("INCLUDES FAMOUS\n TRACKS LIKE:\n",79,01,15,b7),32,null());
HXLINE( 181)		this->txtTracklist->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 182)		this->txtTracklist->set_font(this->scoreText->_font);
HXLINE( 183)		{
HXLINE( 183)			 ::flixel::text::FlxText _this1 = this->txtTracklist;
HXDLIN( 183)			_this1->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 183)			_this1->set_borderColor(-16777216);
HXDLIN( 183)			_this1->set_borderSize(( (Float)(5) ));
HXDLIN( 183)			_this1->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 184)		this->txtTracklist->set_color(-1747081);
HXLINE( 185)		this->txtTracklist->set_y((this->bottom->y + 60));
HXLINE( 186)		this->add(this->txtTracklist);
HXLINE( 187)		this->add(this->scoreText);
HXLINE( 188)		this->add(this->txtWeekTitle);
HXLINE( 190)		::String library1 = null();
HXDLIN( 190)		::String tex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Week_CharUI",d5,ee,cc,24)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1);
HXDLIN( 190)		 ::flixel::graphics::frames::FlxAtlasFrames tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(tex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Week_CharUI",d5,ee,cc,24)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXLINE( 191)		this->characterUI->set_frames(tex1);
HXLINE( 192)		this->characterUI->set_antialiasing(true);
HXLINE( 193)		this->add(this->characterUI);
HXLINE( 195)		this->updateText();
HXLINE( 197)		::haxe::Log_obj::trace(HX_("Line 165",a4,0f,4e,41),::hx::SourceInfo(HX_("source/MenuWeek.hx",d7,7c,07,a6),197,HX_("MenuWeek",53,49,16,2f),HX_("create",fc,66,0f,7c)));
HXLINE( 199)		this->super::create();
HXLINE( 201)		::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 202)		::flixel::tweens::FlxTween_obj::tween(this->side, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),0)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 203)		 ::flixel::FlxSprite _hx_tmp10 = this->bottom;
HXDLIN( 203)		int _hx_tmp11 = ::flixel::FlxG_obj::height;
HXDLIN( 203)		Float _hx_tmp12 = (( (Float)(_hx_tmp11) ) - this->bottom->get_height());
HXDLIN( 203)		::flixel::tweens::FlxTween_obj::tween(_hx_tmp10, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),_hx_tmp12)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 205)		 ::flixel::text::FlxText _hx_tmp13 = this->scoreText;
HXDLIN( 205)		 ::flixel::FlxSprite _hx_tmp14 = this->sprDifficulty;
HXDLIN( 205)		 ::flixel::FlxSprite _hx_tmp15 = this->characterUI;
HXDLIN( 205)		_hx_tmp13->set_alpha(_hx_tmp14->set_alpha(_hx_tmp15->set_alpha(this->txtWeekTitle->set_alpha(( (Float)(0) )))));
HXLINE( 206)		::flixel::tweens::FlxTween_obj::tween(this->scoreText, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 207)		::flixel::tweens::FlxTween_obj::tween(this->sprDifficulty, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 208)		::flixel::tweens::FlxTween_obj::tween(this->txtTracklist, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),(this->characterUI->y + 300))),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 209)		::flixel::tweens::FlxTween_obj::tween(this->characterUI, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 210)		::flixel::tweens::FlxTween_obj::tween(this->txtWeekTitle, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.7))),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 212)		::flixel::FlxG_obj::camera->set_zoom(((Float)0.6));
HXLINE( 213)		::flixel::FlxG_obj::camera->set_alpha(( (Float)(0) ));
HXLINE( 214)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)
            			->setFixed(1,HX_("zoom",13,a3,f8,50),1)),((Float)0.7), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 216)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.7), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


void MenuWeek_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_df1876091f8dc0e3_225_update)
HXLINE( 226)		{
HXLINE( 226)			 ::flixel::addons::display::FlxBackdrop _g = this->checker;
HXDLIN( 226)			_g->set_x((_g->x - (((Float)-0.12) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 227)		{
HXLINE( 227)			 ::flixel::addons::display::FlxBackdrop _g1 = this->checker;
HXDLIN( 227)			_g1->set_y((_g1->y - (((Float)-0.34) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) )))));
            		}
HXLINE( 229)		this->boombox->screenCenter(null());
HXLINE( 232)		Float a = ( (Float)(this->lerpScore) );
HXDLIN( 232)		this->lerpScore = ::Math_obj::floor((a + ((((Float)0.5) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(this->intendedScore) ) - a))));
HXLINE( 234)		if ((::Math_obj::abs(( (Float)((this->lerpScore - this->intendedScore)) )) <= 10)) {
HXLINE( 235)			this->lerpScore = this->intendedScore;
            		}
HXLINE( 237)		this->scoreText->set_text((HX_("WEEK SCORE:",74,77,1e,67) + this->lerpScore));
HXLINE( 239)		 ::flixel::text::FlxText _hx_tmp = this->scoreText;
HXDLIN( 239)		Float _hx_tmp1 = this->side->x;
HXDLIN( 239)		Float _hx_tmp2 = (_hx_tmp1 + (this->side->get_width() / ( (Float)(2) )));
HXDLIN( 239)		_hx_tmp->set_x((_hx_tmp2 - (this->scoreText->get_width() / ( (Float)(2) ))));
HXLINE( 240)		 ::flixel::text::FlxText _hx_tmp3 = this->txtWeekTitle;
HXDLIN( 240)		Float _hx_tmp4 = this->side->x;
HXDLIN( 240)		Float _hx_tmp5 = (_hx_tmp4 + (this->side->get_width() / ( (Float)(2) )));
HXDLIN( 240)		_hx_tmp3->set_x((_hx_tmp5 - (this->txtWeekTitle->get_width() / ( (Float)(2) ))));
HXLINE( 242)		 ::flixel::text::FlxText _hx_tmp6 = this->txtWeekTitle;
HXDLIN( 242)		_hx_tmp6->set_text(this->weekNames->__get(this->curWeek).toUpperCase());
HXLINE( 246)		bool _hx_tmp7;
HXDLIN( 246)		if (!(this->selectedSomethin)) {
HXLINE( 246)			_hx_tmp7 = this->selectable;
            		}
            		else {
HXLINE( 246)			_hx_tmp7 = false;
            		}
HXDLIN( 246)		if (_hx_tmp7) {
HXLINE( 248)			if (::PlayerSettings_obj::player1->controls->_upP->check()) {
HXLINE( 250)				this->changeWeek(-1);
            			}
HXLINE( 253)			if (::PlayerSettings_obj::player1->controls->_downP->check()) {
HXLINE( 255)				this->changeWeek(1);
            			}
HXLINE( 258)			if (::PlayerSettings_obj::player1->controls->_rightP->check()) {
HXLINE( 259)				this->changeDifficulty(1);
            			}
HXLINE( 260)			if (::PlayerSettings_obj::player1->controls->_leftP->check()) {
HXLINE( 261)				this->changeDifficulty(-1);
            			}
HXLINE( 263)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 265)				this->selectWeek();
            			}
            		}
HXLINE( 269)		bool _hx_tmp8;
HXDLIN( 269)		bool _hx_tmp9;
HXDLIN( 269)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 269)			_hx_tmp9 = !(this->selectedSomethin);
            		}
            		else {
HXLINE( 269)			_hx_tmp9 = false;
            		}
HXDLIN( 269)		if (_hx_tmp9) {
HXLINE( 269)			_hx_tmp8 = this->selectable;
            		}
            		else {
HXLINE( 269)			_hx_tmp8 = false;
            		}
HXDLIN( 269)		if (_hx_tmp8) {
HXLINE( 271)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 271)			::String _hx_tmp1 = ::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null());
HXDLIN( 271)			_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 272)			this->selectedSomethin = true;
HXLINE( 273)			{
HXLINE( 273)				 ::flixel::FlxState nextState =  ::PlaySelection_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 273)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 273)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE( 276)			::DiscordClient_obj::changePresence(HX_("Going Back!",f4,9e,14,fe),null(),null(),null(),null());
HXLINE( 279)			::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)-0.6))
            				->setFixed(1,HX_("zoom",13,a3,f8,50),((Float)0.6))),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 280)			::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 281)			::flixel::tweens::FlxTween_obj::tween(this->checker, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 282)			::flixel::tweens::FlxTween_obj::tween(this->gradientBar, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 283)			::flixel::tweens::FlxTween_obj::tween(this->side, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 284)			::flixel::tweens::FlxTween_obj::tween(this->bottom, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
            		}
HXLINE( 287)		this->super::update(elapsed);
            	}


void MenuWeek_obj::selectWeek(){
            	HX_GC_STACKFRAME(&_hx_pos_df1876091f8dc0e3_294_selectWeek)
HXDLIN( 294)		if (::MenuWeek_obj::weekUnlocked->__get(this->curWeek)) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_df1876091f8dc0e3_354_selectWeek)
HXLINE( 354)				 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 354)				_hx_tmp->openSubState( ::Substate_ChartType_obj::__alloc( HX_CTX ));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 296)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 296)			::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 296)			_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 298)			Dynamic( this->grpWeekText->members->__get(this->curWeek)).StaticCast<  ::MenuItem >()->startFlashing();
HXLINE( 300)			::PlayState_obj::storyPlaylist = ( (::Array< ::String >)(this->weekData->__get(this->curWeek)) );
HXLINE( 301)			::haxe::Log_obj::trace(::PlayState_obj::storyPlaylist,::hx::SourceInfo(HX_("source/MenuWeek.hx",d7,7c,07,a6),301,HX_("MenuWeek",53,49,16,2f),HX_("selectWeek",10,d5,90,bd)));
HXLINE( 302)			::PlayState_obj::gameplayArea = HX_("Story",d5,83,43,17);
HXLINE( 303)			this->selectedSomethin = true;
HXLINE( 305)			::String diffic = HX_("",00,00,00,00);
HXLINE( 307)			switch((int)(::MenuWeek_obj::curDifficulty)){
            				case (int)0: {
HXLINE( 310)					diffic = HX_("-noob",41,2e,12,32);
            				}
            				break;
            				case (int)1: {
HXLINE( 312)					diffic = HX_("-easy",af,a6,14,2c);
            				}
            				break;
            				case (int)3: {
HXLINE( 314)					diffic = HX_("-hard",98,49,10,2e);
            				}
            				break;
            				case (int)4: {
HXLINE( 316)					diffic = HX_("-expert",d7,da,bb,13);
            				}
            				break;
            				case (int)5: {
HXLINE( 318)					diffic = HX_("-insane",97,16,20,ed);
            				}
            				break;
            			}
HXLINE( 321)			::PlayState_obj::storyDifficulty = ::MenuWeek_obj::curDifficulty;
HXLINE( 323)			::String _hx_tmp2 = (::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + diffic);
HXDLIN( 323)			::PlayState_obj::SONG = ::Song_obj::loadFromJson(_hx_tmp2,::PlayState_obj::storyPlaylist->__get(0).toLowerCase());
HXLINE( 324)			::PlayState_obj::storyWeek = this->curWeek;
HXLINE( 325)			::PlayState_obj::campaignScore = 0;
HXLINE( 327)			::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 328)			::flixel::tweens::FlxTween_obj::tween(this->checker, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 329)			::flixel::tweens::FlxTween_obj::tween(this->characterUI, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),3700)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 330)			::flixel::tweens::FlxTween_obj::tween(this->txtTracklist, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),-2600)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 331)			::flixel::tweens::FlxTween_obj::tween(this->gradientBar, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 332)			::flixel::tweens::FlxTween_obj::tween(this->side, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 333)			::flixel::tweens::FlxTween_obj::tween(this->bottom, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 334)			::flixel::tweens::FlxTween_obj::tween(this->scoreText, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("y",79,00,00,00),-50)
            				->setFixed(1,HX_("alpha",5e,a7,96,21),0)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 335)			::flixel::tweens::FlxTween_obj::tween(this->txtWeekTitle, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("y",79,00,00,00),-50)
            				->setFixed(1,HX_("alpha",5e,a7,96,21),0)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 336)			::flixel::tweens::FlxTween_obj::tween(this->sprDifficulty, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("y",79,00,00,00),-120)
            				->setFixed(1,HX_("alpha",5e,a7,96,21),0)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 338)			{
HXLINE( 338)				int _g = 0;
HXDLIN( 338)				::Array< ::Dynamic> _g1 = this->ranks->members;
HXDLIN( 338)				while((_g < _g1->length)){
HXLINE( 338)					 ::flixel::FlxSprite item = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 338)					_g = (_g + 1);
HXLINE( 340)					::flixel::tweens::FlxTween_obj::tween(item, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("x",78,00,00,00),2600)),((Float)0.6), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
            				}
            			}
HXLINE( 344)			::DiscordClient_obj::changePresence(HX_("Selecting chart types.",b1,f1,48,2c),null(),null(),null(),null());
HXLINE( 347)			{
HXLINE( 347)				int _g2 = 0;
HXDLIN( 347)				::Array< ::Dynamic> _g3 = this->grpWeekText->members;
HXDLIN( 347)				while((_g2 < _g3->length)){
HXLINE( 347)					 ::MenuItem item = _g3->__get(_g2).StaticCast<  ::MenuItem >();
HXDLIN( 347)					_g2 = (_g2 + 1);
HXLINE( 349)					::flixel::tweens::FlxTween_obj::tween(item, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.9), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
            				}
            			}
HXLINE( 352)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.9), ::Dynamic(new _hx_Closure_0()),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuWeek_obj,selectWeek,(void))

void MenuWeek_obj::changeDifficulty(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_df1876091f8dc0e3_360_changeDifficulty)
HXLINE( 361)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::MenuWeek >();
HXDLIN( 361)		::MenuWeek_obj::curDifficulty = (::MenuWeek_obj::curDifficulty + change);
HXLINE( 363)		if ((::MenuWeek_obj::curDifficulty < 0)) {
HXLINE( 364)			::MenuWeek_obj::curDifficulty = 5;
            		}
HXLINE( 365)		if ((::MenuWeek_obj::curDifficulty > 5)) {
HXLINE( 366)			::MenuWeek_obj::curDifficulty = 0;
            		}
HXLINE( 368)		this->updateRank();
HXLINE( 370)		this->sprDifficulty->offset->set_x(( (Float)(0) ));
HXLINE( 372)		switch((int)(::MenuWeek_obj::curDifficulty)){
            			case (int)0: {
HXLINE( 375)				this->sprDifficulty->animation->play(HX_("noob",94,13,0a,49),null(),null(),null());
            			}
            			break;
            			case (int)1: {
HXLINE( 377)				this->sprDifficulty->animation->play(HX_("easy",02,8c,0c,43),null(),null(),null());
            			}
            			break;
            			case (int)2: {
HXLINE( 379)				this->sprDifficulty->animation->play(HX_("normal",27,72,69,30),null(),null(),null());
            			}
            			break;
            			case (int)3: {
HXLINE( 381)				this->sprDifficulty->animation->play(HX_("hard",eb,2e,08,45),null(),null(),null());
            			}
            			break;
            			case (int)4: {
HXLINE( 383)				this->sprDifficulty->animation->play(HX_("expert",ea,fa,75,c4),null(),null(),null());
            			}
            			break;
            			case (int)5: {
HXLINE( 385)				this->sprDifficulty->animation->play(HX_("insane",aa,36,da,9d),null(),null(),null());
            			}
            			break;
            		}
HXLINE( 388)		this->sprDifficulty->set_alpha(( (Float)(0) ));
HXLINE( 391)		this->sprDifficulty->set_y((this->txtWeekTitle->y + 5));
HXLINE( 392)		this->intendedScore = ::Highscore_obj::getWeekScore(this->curWeek,::MenuWeek_obj::curDifficulty);
HXLINE( 395)		this->intendedScore = ::Highscore_obj::getWeekScore(this->curWeek,::MenuWeek_obj::curDifficulty);
HXLINE( 399)		::String _hx_tmp1 = ((HX_("Deciding to play week ",aa,06,b8,69) + this->curWeek) + HX_(" on ",01,6e,7b,15));
HXDLIN( 399)		::DiscordClient_obj::changePresence(((_hx_tmp1 + this->sprDifficulty->animation->get_name()) + HX_("!",21,00,00,00)),null(),null(),null(),null());
HXLINE( 402)		::flixel::tweens::FlxTween_obj::tween(this->sprDifficulty, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),(this->txtWeekTitle->y + 62))
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.07),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuWeek_obj,changeDifficulty,(void))

void MenuWeek_obj::changeWeek(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_df1876091f8dc0e3_409_changeWeek)
HXLINE( 410)		 ::MenuWeek _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 410)		_hx_tmp->curWeek = (_hx_tmp->curWeek + change);
HXLINE( 412)		if ((this->curWeek >= this->weekData->get_length())) {
HXLINE( 413)			this->curWeek = 0;
            		}
HXLINE( 414)		if ((this->curWeek < 0)) {
HXLINE( 415)			this->curWeek = (this->weekData->get_length() - 1);
            		}
HXLINE( 417)		this->updateRank();
HXLINE( 419)		int bullShit = 0;
HXLINE( 421)		{
HXLINE( 421)			int _g = 0;
HXDLIN( 421)			::Array< ::Dynamic> _g1 = this->grpWeekText->members;
HXDLIN( 421)			while((_g < _g1->length)){
HXLINE( 421)				 ::MenuItem item = _g1->__get(_g).StaticCast<  ::MenuItem >();
HXDLIN( 421)				_g = (_g + 1);
HXLINE( 423)				item->targetY = ( (Float)((bullShit - this->curWeek)) );
HXLINE( 424)				bool _hx_tmp;
HXDLIN( 424)				if ((item->targetY == 0)) {
HXLINE( 424)					_hx_tmp = ::MenuWeek_obj::weekUnlocked->__get(this->curWeek);
            				}
            				else {
HXLINE( 424)					_hx_tmp = false;
            				}
HXDLIN( 424)				if (_hx_tmp) {
HXLINE( 425)					item->set_alpha(( (Float)(1) ));
            				}
            				else {
HXLINE( 427)					item->set_alpha(((Float)0.6));
            				}
HXLINE( 428)				bullShit = (bullShit + 1);
            			}
            		}
HXLINE( 432)		::String _hx_tmp1 = ((HX_("Deciding to play week ",aa,06,b8,69) + this->curWeek) + HX_(" on ",01,6e,7b,15));
HXDLIN( 432)		::DiscordClient_obj::changePresence(((_hx_tmp1 + this->sprDifficulty->animation->get_name()) + HX_("!",21,00,00,00)),null(),null(),null(),null());
HXLINE( 435)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 435)		::String _hx_tmp3 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 435)		_hx_tmp2->play(_hx_tmp3,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 437)		this->updateText();
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuWeek_obj,changeWeek,(void))

void MenuWeek_obj::updateText(){
            	HX_STACKFRAME(&_hx_pos_df1876091f8dc0e3_441_updateText)
HXLINE( 442)		this->txtTracklist->set_text(HX_("INCLUDES FAMOUS\n TRACKS LIKE:\n",79,01,15,b7));
HXLINE( 444)		::Array< ::String > stringThing = ( (::Array< ::String >)(this->weekData->__get(this->curWeek)) );
HXLINE( 446)		{
HXLINE( 446)			int _g = 0;
HXDLIN( 446)			while((_g < stringThing->length)){
HXLINE( 446)				::String i = stringThing->__get(_g);
HXDLIN( 446)				_g = (_g + 1);
HXLINE( 448)				{
HXLINE( 448)					 ::flixel::text::FlxText _g1 = this->txtTracklist;
HXDLIN( 448)					_g1->set_text((_g1->text + (HX_("\n",0a,00,00,00) + i)));
            				}
            			}
            		}
HXLINE( 451)		 ::flixel::text::FlxText _hx_tmp = this->txtTracklist;
HXDLIN( 451)		_hx_tmp->set_text(this->txtTracklist->text.toUpperCase());
HXLINE( 453)		this->txtTracklist->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 454)		{
HXLINE( 454)			 ::flixel::text::FlxText _g1 = this->txtTracklist;
HXDLIN( 454)			_g1->set_x((_g1->x - (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.35))));
            		}
HXLINE( 456)		this->characterUI->animation->addByPrefix(this->weekCharacters->__get(this->curWeek),this->weekCharacters->__get(this->curWeek),24,null(),null(),null());
HXLINE( 457)		this->characterUI->animation->play(this->weekCharacters->__get(this->curWeek),null(),null(),null());
HXLINE( 458)		 ::flixel::math::FlxPoint _hx_tmp1 = this->characterUI->scale;
HXDLIN( 458)		Float _hx_tmp2 = (( (Float)(300) ) / this->characterUI->get_height());
HXDLIN( 458)		_hx_tmp1->set(_hx_tmp2,(( (Float)(300) ) / this->characterUI->get_height()));
HXLINE( 459)		 ::flixel::FlxSprite _hx_tmp3 = this->characterUI;
HXDLIN( 459)		_hx_tmp3->set_x((( (Float)(1240) ) - this->characterUI->get_width()));
HXLINE( 460)		this->characterUI->set_y(( (Float)(150) ));
HXLINE( 462)		if ((this->characterUI->animation->_curAnim->name == HX_("gf",1f,5a,00,00))) {
HXLINE( 465)			this->characterUI->offset->set(0,0);
            		}
HXLINE( 469)		this->intendedScore = ::Highscore_obj::getWeekScore(this->curWeek,::MenuWeek_obj::curDifficulty);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuWeek_obj,updateText,(void))

void MenuWeek_obj::updateRank(){
            	HX_GC_STACKFRAME(&_hx_pos_df1876091f8dc0e3_474_updateRank)
HXLINE( 475)		this->ranks->clear();
HXLINE( 477)		this->curWeekData = ( (::cpp::VirtualArray)(this->weekData->__get(this->curWeek)) );
HXLINE( 479)		{
HXLINE( 479)			int _g = 0;
HXDLIN( 479)			int _g1 = this->curWeekData->get_length();
HXDLIN( 479)			while((_g < _g1)){
HXLINE( 479)				_g = (_g + 1);
HXDLIN( 479)				int i = (_g - 1);
HXLINE( 481)				 ::flixel::FlxSprite rank =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,958,100,null());
HXLINE( 482)				::String library = null();
HXDLIN( 482)				rank->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("rankings/",92,90,1d,00) + this->rankTable->__get(::Highscore_obj::getRank(( (::String)(this->curWeekData->__get(i)) ),::MenuWeek_obj::curDifficulty)))) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 483)				rank->ID = i;
HXLINE( 484)				rank->setGraphicSize(0,80);
HXLINE( 485)				rank->updateHitbox();
HXLINE( 486)				rank->set_antialiasing(true);
HXLINE( 487)				rank->scrollFactor->set(null(),null());
HXLINE( 488)				rank->set_y(( (Float)((30 + (i * 65))) ));
HXLINE( 490)				this->ranks->add(rank).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuWeek_obj,updateRank,(void))

int MenuWeek_obj::curDifficulty;

::Array< bool > MenuWeek_obj::weekUnlocked;


::hx::ObjectPtr< MenuWeek_obj > MenuWeek_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< MenuWeek_obj > __this = new MenuWeek_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< MenuWeek_obj > MenuWeek_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MenuWeek_obj *__this = (MenuWeek_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuWeek_obj), true, "MenuWeek"));
	*(void **)__this = MenuWeek_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MenuWeek_obj::MenuWeek_obj()
{
}

void MenuWeek_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuWeek);
	HX_MARK_MEMBER_NAME(scoreText,"scoreText");
	HX_MARK_MEMBER_NAME(weekData,"weekData");
	HX_MARK_MEMBER_NAME(curWeekData,"curWeekData");
	HX_MARK_MEMBER_NAME(weekCharacters,"weekCharacters");
	HX_MARK_MEMBER_NAME(weekNames,"weekNames");
	HX_MARK_MEMBER_NAME(txtWeekTitle,"txtWeekTitle");
	HX_MARK_MEMBER_NAME(curWeek,"curWeek");
	HX_MARK_MEMBER_NAME(txtTracklist,"txtTracklist");
	HX_MARK_MEMBER_NAME(grpWeekText,"grpWeekText");
	HX_MARK_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(checker,"checker");
	HX_MARK_MEMBER_NAME(gradientBar,"gradientBar");
	HX_MARK_MEMBER_NAME(side,"side");
	HX_MARK_MEMBER_NAME(bottom,"bottom");
	HX_MARK_MEMBER_NAME(boombox,"boombox");
	HX_MARK_MEMBER_NAME(rankTable,"rankTable");
	HX_MARK_MEMBER_NAME(ranks,"ranks");
	HX_MARK_MEMBER_NAME(characterUI,"characterUI");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_MARK_MEMBER_NAME(lerpScore,"lerpScore");
	HX_MARK_MEMBER_NAME(intendedScore,"intendedScore");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuWeek_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(scoreText,"scoreText");
	HX_VISIT_MEMBER_NAME(weekData,"weekData");
	HX_VISIT_MEMBER_NAME(curWeekData,"curWeekData");
	HX_VISIT_MEMBER_NAME(weekCharacters,"weekCharacters");
	HX_VISIT_MEMBER_NAME(weekNames,"weekNames");
	HX_VISIT_MEMBER_NAME(txtWeekTitle,"txtWeekTitle");
	HX_VISIT_MEMBER_NAME(curWeek,"curWeek");
	HX_VISIT_MEMBER_NAME(txtTracklist,"txtTracklist");
	HX_VISIT_MEMBER_NAME(grpWeekText,"grpWeekText");
	HX_VISIT_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(checker,"checker");
	HX_VISIT_MEMBER_NAME(gradientBar,"gradientBar");
	HX_VISIT_MEMBER_NAME(side,"side");
	HX_VISIT_MEMBER_NAME(bottom,"bottom");
	HX_VISIT_MEMBER_NAME(boombox,"boombox");
	HX_VISIT_MEMBER_NAME(rankTable,"rankTable");
	HX_VISIT_MEMBER_NAME(ranks,"ranks");
	HX_VISIT_MEMBER_NAME(characterUI,"characterUI");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_VISIT_MEMBER_NAME(lerpScore,"lerpScore");
	HX_VISIT_MEMBER_NAME(intendedScore,"intendedScore");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuWeek_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"side") ) { return ::hx::Val( side ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ranks") ) { return ::hx::Val( ranks ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { return ::hx::Val( bottom ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curWeek") ) { return ::hx::Val( curWeek ); }
		if (HX_FIELD_EQ(inName,"checker") ) { return ::hx::Val( checker ); }
		if (HX_FIELD_EQ(inName,"boombox") ) { return ::hx::Val( boombox ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"weekData") ) { return ::hx::Val( weekData ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { return ::hx::Val( scoreText ); }
		if (HX_FIELD_EQ(inName,"weekNames") ) { return ::hx::Val( weekNames ); }
		if (HX_FIELD_EQ(inName,"rankTable") ) { return ::hx::Val( rankTable ); }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { return ::hx::Val( lerpScore ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"selectWeek") ) { return ::hx::Val( selectWeek_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeWeek") ) { return ::hx::Val( changeWeek_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateText") ) { return ::hx::Val( updateText_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateRank") ) { return ::hx::Val( updateRank_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curWeekData") ) { return ::hx::Val( curWeekData ); }
		if (HX_FIELD_EQ(inName,"grpWeekText") ) { return ::hx::Val( grpWeekText ); }
		if (HX_FIELD_EQ(inName,"gradientBar") ) { return ::hx::Val( gradientBar ); }
		if (HX_FIELD_EQ(inName,"characterUI") ) { return ::hx::Val( characterUI ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"txtWeekTitle") ) { return ::hx::Val( txtWeekTitle ); }
		if (HX_FIELD_EQ(inName,"txtTracklist") ) { return ::hx::Val( txtTracklist ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { return ::hx::Val( sprDifficulty ); }
		if (HX_FIELD_EQ(inName,"intendedScore") ) { return ::hx::Val( intendedScore ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"weekCharacters") ) { return ::hx::Val( weekCharacters ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { return ::hx::Val( selectedSomethin ); }
		if (HX_FIELD_EQ(inName,"changeDifficulty") ) { return ::hx::Val( changeDifficulty_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MenuWeek_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"weekUnlocked") ) { outValue = ( weekUnlocked ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { outValue = ( curDifficulty ); return true; }
	}
	return false;
}

::hx::Val MenuWeek_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"side") ) { side=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ranks") ) { ranks=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { bottom=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curWeek") ) { curWeek=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checker") ) { checker=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boombox") ) { boombox=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"weekData") ) { weekData=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weekNames") ) { weekNames=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rankTable") ) { rankTable=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { lerpScore=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curWeekData") ) { curWeekData=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpWeekText") ) { grpWeekText=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gradientBar") ) { gradientBar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"characterUI") ) { characterUI=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"txtWeekTitle") ) { txtWeekTitle=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"txtTracklist") ) { txtTracklist=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { sprDifficulty=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intendedScore") ) { intendedScore=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"weekCharacters") ) { weekCharacters=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { selectedSomethin=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MenuWeek_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"weekUnlocked") ) { weekUnlocked=ioValue.Cast< ::Array< bool > >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { curDifficulty=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void MenuWeek_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("scoreText",1f,7d,bd,dc));
	outFields->push(HX_("weekData",3e,ec,92,29));
	outFields->push(HX_("curWeekData",de,ad,d1,aa));
	outFields->push(HX_("weekCharacters",be,b5,7f,1d));
	outFields->push(HX_("weekNames",34,4b,f8,f8));
	outFields->push(HX_("txtWeekTitle",74,f4,3f,69));
	outFields->push(HX_("curWeek",94,d1,0a,ba));
	outFields->push(HX_("txtTracklist",d9,6f,f5,3e));
	outFields->push(HX_("grpWeekText",c6,97,1f,d2));
	outFields->push(HX_("sprDifficulty",d0,6b,83,ba));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("checker",35,b3,24,13));
	outFields->push(HX_("gradientBar",c3,05,20,d3));
	outFields->push(HX_("side",97,8d,53,4c));
	outFields->push(HX_("bottom",eb,e6,78,65));
	outFields->push(HX_("boombox",c0,e6,a5,7e));
	outFields->push(HX_("rankTable",c2,ca,17,e0));
	outFields->push(HX_("ranks",47,a9,1f,e4));
	outFields->push(HX_("characterUI",3d,22,bf,be));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("selectedSomethin",c8,ec,fb,99));
	outFields->push(HX_("lerpScore",5b,81,4d,e7));
	outFields->push(HX_("intendedScore",a7,fd,7c,89));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuWeek_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuWeek_obj,scoreText),HX_("scoreText",1f,7d,bd,dc)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(MenuWeek_obj,weekData),HX_("weekData",3e,ec,92,29)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(MenuWeek_obj,curWeekData),HX_("curWeekData",de,ad,d1,aa)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MenuWeek_obj,weekCharacters),HX_("weekCharacters",be,b5,7f,1d)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MenuWeek_obj,weekNames),HX_("weekNames",34,4b,f8,f8)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuWeek_obj,txtWeekTitle),HX_("txtWeekTitle",74,f4,3f,69)},
	{::hx::fsInt,(int)offsetof(MenuWeek_obj,curWeek),HX_("curWeek",94,d1,0a,ba)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuWeek_obj,txtTracklist),HX_("txtTracklist",d9,6f,f5,3e)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MenuWeek_obj,grpWeekText),HX_("grpWeekText",c6,97,1f,d2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuWeek_obj,sprDifficulty),HX_("sprDifficulty",d0,6b,83,ba)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuWeek_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(MenuWeek_obj,checker),HX_("checker",35,b3,24,13)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuWeek_obj,gradientBar),HX_("gradientBar",c3,05,20,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuWeek_obj,side),HX_("side",97,8d,53,4c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuWeek_obj,bottom),HX_("bottom",eb,e6,78,65)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuWeek_obj,boombox),HX_("boombox",c0,e6,a5,7e)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MenuWeek_obj,rankTable),HX_("rankTable",c2,ca,17,e0)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MenuWeek_obj,ranks),HX_("ranks",47,a9,1f,e4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuWeek_obj,characterUI),HX_("characterUI",3d,22,bf,be)},
	{::hx::fsBool,(int)offsetof(MenuWeek_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{::hx::fsBool,(int)offsetof(MenuWeek_obj,selectedSomethin),HX_("selectedSomethin",c8,ec,fb,99)},
	{::hx::fsInt,(int)offsetof(MenuWeek_obj,lerpScore),HX_("lerpScore",5b,81,4d,e7)},
	{::hx::fsInt,(int)offsetof(MenuWeek_obj,intendedScore),HX_("intendedScore",a7,fd,7c,89)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MenuWeek_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &MenuWeek_obj::curDifficulty,HX_("curDifficulty",db,b7,38,a7)},
	{::hx::fsObject /* ::Array< bool > */ ,(void *) &MenuWeek_obj::weekUnlocked,HX_("weekUnlocked",37,64,c4,a5)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MenuWeek_obj_sMemberFields[] = {
	HX_("scoreText",1f,7d,bd,dc),
	HX_("weekData",3e,ec,92,29),
	HX_("curWeekData",de,ad,d1,aa),
	HX_("weekCharacters",be,b5,7f,1d),
	HX_("weekNames",34,4b,f8,f8),
	HX_("txtWeekTitle",74,f4,3f,69),
	HX_("curWeek",94,d1,0a,ba),
	HX_("txtTracklist",d9,6f,f5,3e),
	HX_("grpWeekText",c6,97,1f,d2),
	HX_("sprDifficulty",d0,6b,83,ba),
	HX_("bg",c5,55,00,00),
	HX_("checker",35,b3,24,13),
	HX_("gradientBar",c3,05,20,d3),
	HX_("side",97,8d,53,4c),
	HX_("bottom",eb,e6,78,65),
	HX_("boombox",c0,e6,a5,7e),
	HX_("rankTable",c2,ca,17,e0),
	HX_("ranks",47,a9,1f,e4),
	HX_("characterUI",3d,22,bf,be),
	HX_("create",fc,66,0f,7c),
	HX_("selectable",96,b6,2a,c4),
	HX_("update",09,86,05,87),
	HX_("selectedSomethin",c8,ec,fb,99),
	HX_("selectWeek",10,d5,90,bd),
	HX_("changeDifficulty",cb,0f,40,d4),
	HX_("lerpScore",5b,81,4d,e7),
	HX_("intendedScore",a7,fd,7c,89),
	HX_("changeWeek",84,95,3e,29),
	HX_("updateText",56,b7,ae,05),
	HX_("updateRank",55,38,59,04),
	::String(null()) };

static void MenuWeek_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuWeek_obj::curDifficulty,"curDifficulty");
	HX_MARK_MEMBER_NAME(MenuWeek_obj::weekUnlocked,"weekUnlocked");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuWeek_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuWeek_obj::curDifficulty,"curDifficulty");
	HX_VISIT_MEMBER_NAME(MenuWeek_obj::weekUnlocked,"weekUnlocked");
};

#endif

::hx::Class MenuWeek_obj::__mClass;

static ::String MenuWeek_obj_sStaticFields[] = {
	HX_("curDifficulty",db,b7,38,a7),
	HX_("weekUnlocked",37,64,c4,a5),
	::String(null())
};

void MenuWeek_obj::__register()
{
	MenuWeek_obj _hx_dummy;
	MenuWeek_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MenuWeek",53,49,16,2f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MenuWeek_obj::__GetStatic;
	__mClass->mSetStaticField = &MenuWeek_obj::__SetStatic;
	__mClass->mMarkFunc = MenuWeek_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MenuWeek_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuWeek_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuWeek_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuWeek_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuWeek_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuWeek_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MenuWeek_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_df1876091f8dc0e3_35_boot)
HXDLIN(  35)		curDifficulty = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_df1876091f8dc0e3_37_boot)
HXDLIN(  37)		weekUnlocked = ::Array_obj< bool >::fromData( _hx_array_data_2f164953_23,1);
            	}
}


// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_Endless_Substate
#include <Endless_Substate.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_MenuEndless
#include <MenuEndless.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Substate_ChartType
#include <Substate_ChartType.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a48050086ef0da30_135_new,"Endless_Substate","new",0xf5bc63ee,"Endless_Substate.new","Endless_Substate.hx",135,0x339cf342)
HX_DEFINE_STACK_FRAME(_hx_pos_a48050086ef0da30_35_new,"Endless_Substate","new",0xf5bc63ee,"Endless_Substate.new","Endless_Substate.hx",35,0x339cf342)
static const ::String _hx_array_data_ea2c94fc_3[] = {
	HX_("difficulty",3b,4e,8e,47),HX_("speed",87,97,69,81),HX_("ramp",d2,4c,a4,4b),HX_("play",f4,2d,5a,4a),
};
HX_LOCAL_STACK_FRAME(_hx_pos_a48050086ef0da30_233_update,"Endless_Substate","update",0x6ad71f3b,"Endless_Substate.update","Endless_Substate.hx",233,0x339cf342)
HX_LOCAL_STACK_FRAME(_hx_pos_a48050086ef0da30_142_update,"Endless_Substate","update",0x6ad71f3b,"Endless_Substate.update","Endless_Substate.hx",142,0x339cf342)
HX_LOCAL_STACK_FRAME(_hx_pos_a48050086ef0da30_201_update,"Endless_Substate","update",0x6ad71f3b,"Endless_Substate.update","Endless_Substate.hx",201,0x339cf342)
HX_LOCAL_STACK_FRAME(_hx_pos_a48050086ef0da30_223_update,"Endless_Substate","update",0x6ad71f3b,"Endless_Substate.update","Endless_Substate.hx",223,0x339cf342)
HX_LOCAL_STACK_FRAME(_hx_pos_a48050086ef0da30_254_changeItem,"Endless_Substate","changeItem",0xd92414d5,"Endless_Substate.changeItem","Endless_Substate.hx",254,0x339cf342)
HX_LOCAL_STACK_FRAME(_hx_pos_a48050086ef0da30_264_changeDiff,"Endless_Substate","changeDiff",0xd5cdabc7,"Endless_Substate.changeDiff","Endless_Substate.hx",264,0x339cf342)
HX_LOCAL_STACK_FRAME(_hx_pos_a48050086ef0da30_298_updateSong,"Endless_Substate","updateSong",0xbe2828b0,"Endless_Substate.updateSong","Endless_Substate.hx",298,0x339cf342)
HX_LOCAL_STACK_FRAME(_hx_pos_a48050086ef0da30_322_loadCurrent,"Endless_Substate","loadCurrent",0xdb1d2c41,"Endless_Substate.loadCurrent","Endless_Substate.hx",322,0x339cf342)
HX_LOCAL_STACK_FRAME(_hx_pos_a48050086ef0da30_339_saveCurrent,"Endless_Substate","saveCurrent",0x641f9c0a,"Endless_Substate.saveCurrent","Endless_Substate.hx",339,0x339cf342)
HX_LOCAL_STACK_FRAME(_hx_pos_a48050086ef0da30_44_boot,"Endless_Substate","boot",0x07340ce4,"Endless_Substate.boot","Endless_Substate.hx",44,0x339cf342)
HX_LOCAL_STACK_FRAME(_hx_pos_a48050086ef0da30_45_boot,"Endless_Substate","boot",0x07340ce4,"Endless_Substate.boot","Endless_Substate.hx",45,0x339cf342)
HX_LOCAL_STACK_FRAME(_hx_pos_a48050086ef0da30_56_boot,"Endless_Substate","boot",0x07340ce4,"Endless_Substate.boot","Endless_Substate.hx",56,0x339cf342)

void Endless_Substate_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Endless_Substate,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_a48050086ef0da30_135_new)
HXLINE( 135)			_gthis->selectable = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_a48050086ef0da30_35_new)
HXLINE( 139)		this->selectable = false;
HXLINE(  54)		this->blackBarThingie =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,1,-16777216,null(),null());
HXLINE(  52)		this->initSpeed = ((Float)0.16);
HXLINE(  51)		this->camLerp = ((Float)0.16);
HXLINE(  49)		this->goingBack = false;
HXLINE(  38)		this->optionShit = ::Array_obj< ::String >::fromData( _hx_array_data_ea2c94fc_3,4);
HXLINE(  58)		 ::Endless_Substate _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  60)		super::__construct();
HXLINE(  62)		::Endless_Substate_obj::_endless =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("speed",87,97,69,81),( (Float)(0) ))
            			->setFixed(1,HX_("ramp",d2,4c,a4,4b),true));
HXLINE(  67)		this->add(this->blackBarThingie);
HXLINE(  68)		this->blackBarThingie->scrollFactor->set(null(),null());
HXLINE(  69)		this->blackBarThingie->scale->set_y(( (Float)(0) ));
HXLINE(  70)		::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("scale.y",95,2d,07,65),500)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
HXLINE(  72)		this->menuItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  73)		this->add(this->menuItems);
HXLINE(  75)		::String library = null();
HXDLIN(  75)		::String tex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Endless_Buttons",36,50,64,97)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(  75)		 ::flixel::graphics::frames::FlxAtlasFrames tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(tex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Endless_Buttons",36,50,64,97)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  77)		{
HXLINE(  77)			int _g = 0;
HXDLIN(  77)			int _g1 = this->optionShit->length;
HXDLIN(  77)			while((_g < _g1)){
HXLINE(  77)				_g = (_g + 1);
HXDLIN(  77)				int i = (_g - 1);
HXLINE(  79)				 ::flixel::FlxSprite menuItem =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(  80)				menuItem->set_frames(tex1);
HXLINE(  81)				menuItem->animation->addByPrefix(HX_("standard",3d,37,78,ea),this->optionShit->__get(i),24,true,null(),null());
HXLINE(  82)				menuItem->animation->play(HX_("standard",3d,37,78,ea),null(),null(),null());
HXLINE(  83)				menuItem->ID = i;
HXLINE(  84)				this->menuItems->add(menuItem).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  85)				menuItem->scrollFactor->set(null(),null());
HXLINE(  86)				menuItem->set_antialiasing(true);
HXLINE(  87)				menuItem->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  88)				menuItem->scrollFactor->set_y(( (Float)(0) ));
HXLINE(  90)				menuItem->set_y(( (Float)((40 + (i * 90))) ));
HXLINE(  91)				menuItem->set_x(( (Float)(40) ));
HXLINE(  92)				menuItem->scale->set(0,0);
            			}
            		}
HXLINE(  95)		::String library1 = null();
HXDLIN(  95)		::String diffTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("difficulties",59,c7,5e,02)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1);
HXDLIN(  95)		 ::flixel::graphics::frames::FlxAtlasFrames diffTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(diffTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("difficulties",59,c7,5e,02)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXLINE(  96)		this->sprDifficulty =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,130,0,null());
HXLINE(  97)		this->sprDifficulty->set_frames(diffTex1);
HXLINE(  98)		this->sprDifficulty->animation->addByPrefix(HX_("noob",94,13,0a,49),HX_("NOOB",94,db,ca,33),null(),null(),null(),null());
HXLINE(  99)		this->sprDifficulty->animation->addByPrefix(HX_("easy",02,8c,0c,43),HX_("EASY",02,54,cd,2d),null(),null(),null(),null());
HXLINE( 100)		this->sprDifficulty->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("NORMAL",27,1e,ec,e2),null(),null(),null(),null());
HXLINE( 101)		this->sprDifficulty->animation->addByPrefix(HX_("hard",eb,2e,08,45),HX_("HARD",eb,f6,c8,2f),null(),null(),null(),null());
HXLINE( 102)		this->sprDifficulty->animation->addByPrefix(HX_("expert",ea,fa,75,c4),HX_("EXPERT",ea,a6,f8,76),null(),null(),null(),null());
HXLINE( 103)		this->sprDifficulty->animation->addByPrefix(HX_("insane",aa,36,da,9d),HX_("INSANE",aa,e2,5c,50),null(),null(),null(),null());
HXLINE( 104)		this->sprDifficulty->animation->play(HX_("easy",02,8c,0c,43),null(),null(),null());
HXLINE( 105)		this->sprDifficulty->set_x(( (Float)(900) ));
HXLINE( 106)		this->sprDifficulty->set_y(( (Float)(151) ));
HXLINE( 107)		this->add(this->sprDifficulty);
HXLINE( 109)		this->textSpeed =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),5,0,HX_("",00,00,00,00),32,null());
HXLINE( 110)		this->textSpeed->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 111)		this->textSpeed->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 112)		{
HXLINE( 112)			 ::flixel::text::FlxText _this = this->textSpeed;
HXDLIN( 112)			_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 112)			_this->set_borderColor(-16777216);
HXDLIN( 112)			_this->set_borderSize(( (Float)(5) ));
HXDLIN( 112)			_this->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 113)		this->textSpeed->set_x(( (Float)(910) ));
HXLINE( 114)		this->textSpeed->set_y(((this->sprDifficulty->y + 120) + 12));
HXLINE( 115)		this->textSpeed->set_alpha(( (Float)(0) ));
HXLINE( 116)		this->add(this->textSpeed);
HXLINE( 118)		this->textRamp =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),5,0,HX_("",00,00,00,00),32,null());
HXLINE( 119)		this->textRamp->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 120)		this->textRamp->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 121)		{
HXLINE( 121)			 ::flixel::text::FlxText _this1 = this->textRamp;
HXDLIN( 121)			_this1->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 121)			_this1->set_borderColor(-16777216);
HXDLIN( 121)			_this1->set_borderSize(( (Float)(5) ));
HXDLIN( 121)			_this1->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 122)		this->textRamp->set_x(( (Float)(910) ));
HXLINE( 123)		this->textRamp->set_y((this->textSpeed->y + 120));
HXLINE( 124)		this->textRamp->set_alpha(( (Float)(0) ));
HXLINE( 125)		this->add(this->textRamp);
HXLINE( 127)		::flixel::tweens::FlxTween_obj::tween(this->textSpeed, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 128)		::flixel::tweens::FlxTween_obj::tween(this->textRamp, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 130)		this->changeItem(null());
HXLINE( 131)		this->changeDiff(null());
HXLINE( 133)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}

Dynamic Endless_Substate_obj::__CreateEmpty() { return new Endless_Substate_obj; }

void *Endless_Substate_obj::_hx_vtable = 0;

Dynamic Endless_Substate_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Endless_Substate_obj > _hx_result = new Endless_Substate_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Endless_Substate_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7b2565a4) {
		if (inClassId<=(int)0x62817b24) {
			if (inClassId<=(int)0x5661ffbf) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x5661ffbf;
			} else {
				return inClassId==(int)0x62817b24;
			}
		} else {
			return inClassId==(int)0x7b2565a4;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void Endless_Substate_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::Endless_Substate,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_GC_STACKFRAME(&_hx_pos_a48050086ef0da30_233_update)
HXLINE( 233)			if (!(_gthis->goingBack)) {
HXLINE( 235)				Float a = spr->x;
HXDLIN( 235)				spr->set_x((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(20) ) - a))));
HXLINE( 236)				spr->set_y(( (Float)((110 + (spr->ID * 120))) ));
HXLINE( 237)				Float a1 = spr->scale->x;
HXDLIN( 237)				Float a2 = spr->scale->y;
HXDLIN( 237)				spr->scale->set((a1 + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)0.5) - a1))),(a2 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)0.5) - a2))));
HXLINE( 239)				if ((spr->ID == ::Endless_Substate_obj::curSelected)) {
HXLINE( 241)					Float a = spr->scale->x;
HXDLIN( 241)					Float a1 = spr->scale->y;
HXDLIN( 241)					spr->scale->set((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)1.3) - a))),(a1 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)1.3) - a1))));
HXLINE( 242)					Float a2 = spr->x;
HXDLIN( 242)					spr->set_x((a2 + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(250) ) - a2))));
            				}
            			}
            			else {
HXLINE( 247)				Float a = spr->scale->x;
HXDLIN( 247)				Float a1 = spr->scale->y;
HXDLIN( 247)				spr->scale->set((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(0) ) - a))),(a1 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(0) ) - a1))));
HXLINE( 248)				Float a2 = spr->x;
HXDLIN( 248)				spr->set_x((a2 + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(1500) ) - a2))));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_a48050086ef0da30_142_update)
HXLINE( 141)		 ::Endless_Substate _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 143)		this->super::update(elapsed);
HXLINE( 145)		 ::flixel::FlxSprite _hx_tmp = this->blackBarThingie;
HXDLIN( 145)		_hx_tmp->set_y((( (Float)(360) ) - (this->blackBarThingie->get_height() / ( (Float)(2) ))));
HXLINE( 146)		 ::flixel::text::FlxText _hx_tmp1 = this->textSpeed;
HXDLIN( 146)		::String _hx_tmp2 = (::Std_obj::string( ::Dynamic(::Endless_Substate_obj::_endless->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic))) + HX_(" (",08,1c,00,00));
HXDLIN( 146)		_hx_tmp1->set_text(( (::String)(((_hx_tmp2 + ::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) + HX_(")",29,00,00,00))) ));
HXLINE( 147)		 ::flixel::text::FlxText _hx_tmp3 = this->textRamp;
HXDLIN( 147)		_hx_tmp3->set_text(::Std_obj::string( ::Dynamic(::Endless_Substate_obj::_endless->__Field(HX_("ramp",d2,4c,a4,4b),::hx::paccDynamic))).toUpperCase());
HXLINE( 149)		bool _hx_tmp4;
HXDLIN( 149)		if (this->selectable) {
HXLINE( 149)			_hx_tmp4 = !(this->goingBack);
            		}
            		else {
HXLINE( 149)			_hx_tmp4 = false;
            		}
HXDLIN( 149)		if (_hx_tmp4) {
HXLINE( 151)			if (::PlayerSettings_obj::player1->controls->_upP->check()) {
HXLINE( 153)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 153)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 153)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 154)				this->changeItem(-1);
            			}
HXLINE( 157)			if (::PlayerSettings_obj::player1->controls->_downP->check()) {
HXLINE( 159)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 159)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 159)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 160)				this->changeItem(1);
            			}
HXLINE( 163)			if (::PlayerSettings_obj::player1->controls->_leftP->check()) {
HXLINE( 164)				::String _hx_switch_0 = this->optionShit->__get(::Endless_Substate_obj::curSelected);
            				if (  (_hx_switch_0==HX_("difficulty",3b,4e,8e,47)) ){
HXLINE( 167)					this->changeDiff(-1);
HXDLIN( 167)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("ramp",d2,4c,a4,4b)) ){
HXLINE( 174)					::Endless_Substate_obj::_endless->__SetField(HX_("ramp",d2,4c,a4,4b),!(( (bool)(::Endless_Substate_obj::_endless->__Field(HX_("ramp",d2,4c,a4,4b),::hx::paccDynamic)) )),::hx::paccDynamic);
HXLINE( 175)					::Endless_Substate_obj::saveCurrent(::Endless_Substate_obj::song,::Endless_Substate_obj::curDifficulty);
HXLINE( 173)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("speed",87,97,69,81)) ){
HXLINE( 169)					if (::hx::IsGreater( ::Endless_Substate_obj::_endless->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic),((Float)0.1) )) {
HXLINE( 170)						 ::Dynamic _hx_tmp = ::Endless_Substate_obj::_endless;
HXDLIN( 170)						_hx_tmp->__SetField(HX_("speed",87,97,69,81),(( (Float)(_hx_tmp->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ) - ((Float)0.1)),::hx::paccDynamic);
            					}
HXLINE( 171)					::Endless_Substate_obj::_endless->__SetField(HX_("speed",87,97,69,81),::flixel::math::FlxMath_obj::roundDecimal(( (Float)(::Endless_Substate_obj::_endless->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ),1),::hx::paccDynamic);
HXLINE( 172)					::Endless_Substate_obj::saveCurrent(::Endless_Substate_obj::song,::Endless_Substate_obj::curDifficulty);
HXLINE( 168)					goto _hx_goto_4;
            				}
            				_hx_goto_4:;
            			}
HXLINE( 177)			if (::PlayerSettings_obj::player1->controls->_rightP->check()) {
HXLINE( 178)				::String _hx_switch_1 = this->optionShit->__get(::Endless_Substate_obj::curSelected);
            				if (  (_hx_switch_1==HX_("difficulty",3b,4e,8e,47)) ){
HXLINE( 181)					this->changeDiff(1);
HXDLIN( 181)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_1==HX_("ramp",d2,4c,a4,4b)) ){
HXLINE( 188)					::Endless_Substate_obj::_endless->__SetField(HX_("ramp",d2,4c,a4,4b),!(( (bool)(::Endless_Substate_obj::_endless->__Field(HX_("ramp",d2,4c,a4,4b),::hx::paccDynamic)) )),::hx::paccDynamic);
HXLINE( 189)					::Endless_Substate_obj::saveCurrent(::Endless_Substate_obj::song,::Endless_Substate_obj::curDifficulty);
HXLINE( 187)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_1==HX_("speed",87,97,69,81)) ){
HXLINE( 183)					if (::hx::IsLess( ::Endless_Substate_obj::_endless->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic),8 )) {
HXLINE( 184)						 ::Dynamic _hx_tmp = ::Endless_Substate_obj::_endless;
HXDLIN( 184)						_hx_tmp->__SetField(HX_("speed",87,97,69,81),(_hx_tmp->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic) + ((Float)0.1)),::hx::paccDynamic);
            					}
HXLINE( 185)					::Endless_Substate_obj::_endless->__SetField(HX_("speed",87,97,69,81),::flixel::math::FlxMath_obj::roundDecimal(( (Float)(::Endless_Substate_obj::_endless->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ),1),::hx::paccDynamic);
HXLINE( 186)					::Endless_Substate_obj::saveCurrent(::Endless_Substate_obj::song,::Endless_Substate_obj::curDifficulty);
HXLINE( 182)					goto _hx_goto_5;
            				}
            				_hx_goto_5:;
            			}
HXLINE( 192)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_a48050086ef0da30_201_update)
HXLINE( 202)					::flixel::FlxG_obj::game->_state->closeSubState();
HXLINE( 203)					::MenuEndless_obj::substated = false;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 194)				this->goingBack = true;
HXLINE( 195)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 195)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null());
HXDLIN( 195)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 196)				::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("scale.y",95,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 197)				::flixel::tweens::FlxTween_obj::tween(this->sprDifficulty, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("scale.y",95,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 198)				::flixel::tweens::FlxTween_obj::tween(this->textSpeed, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 199)				::flixel::tweens::FlxTween_obj::tween(this->textRamp, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 200)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.6), ::Dynamic(new _hx_Closure_0()),null());
            			}
HXLINE( 207)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_a48050086ef0da30_223_update)
HXLINE( 224)					::MenuEndless_obj::no = true;
HXLINE( 225)					::flixel::FlxG_obj::game->_state->closeSubState();
HXLINE( 226)					 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 226)					_hx_tmp->openSubState( ::Substate_ChartType_obj::__alloc( HX_CTX ));
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 210)				::DiscordClient_obj::changePresence(HX_("Selecting chart types.",b1,f1,48,2c),null(),null(),null(),null());
HXLINE( 213)				::PlayState_obj::gameplayArea = HX_("Endless",94,c8,4c,0c);
HXLINE( 214)				::PlayState_obj::storyDifficulty = ::Endless_Substate_obj::curDifficulty;
HXLINE( 216)				this->goingBack = true;
HXLINE( 217)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 217)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 217)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 218)				::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("scale.y",95,2d,07,65),780)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 219)				::flixel::tweens::FlxTween_obj::tween(this->sprDifficulty, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("scale.y",95,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 220)				::flixel::tweens::FlxTween_obj::tween(this->textSpeed, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 221)				::flixel::tweens::FlxTween_obj::tween(this->textRamp, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 222)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.6), ::Dynamic(new _hx_Closure_1()),null());
            			}
            		}
HXLINE( 231)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_2(_gthis)),null());
            	}


void Endless_Substate_obj::changeItem(::hx::Null< int >  __o_huh){
            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_a48050086ef0da30_254_changeItem)
HXLINE( 255)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Endless_Substate >();
HXDLIN( 255)		::Endless_Substate_obj::curSelected = (::Endless_Substate_obj::curSelected + huh);
HXLINE( 257)		if ((::Endless_Substate_obj::curSelected >= this->menuItems->length)) {
HXLINE( 258)			::Endless_Substate_obj::curSelected = 0;
            		}
HXLINE( 259)		if ((::Endless_Substate_obj::curSelected < 0)) {
HXLINE( 260)			::Endless_Substate_obj::curSelected = (this->menuItems->length - 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Endless_Substate_obj,changeItem,(void))

void Endless_Substate_obj::changeDiff(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_a48050086ef0da30_264_changeDiff)
HXLINE( 265)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Endless_Substate >();
HXDLIN( 265)		::Endless_Substate_obj::curDifficulty = (::Endless_Substate_obj::curDifficulty + change);
HXLINE( 267)		if ((::Endless_Substate_obj::curDifficulty < 0)) {
HXLINE( 268)			::Endless_Substate_obj::curDifficulty = 5;
            		}
HXLINE( 269)		if ((::Endless_Substate_obj::curDifficulty > 5)) {
HXLINE( 270)			::Endless_Substate_obj::curDifficulty = 0;
            		}
HXLINE( 272)		switch((int)(::Endless_Substate_obj::curDifficulty)){
            			case (int)0: {
HXLINE( 275)				this->sprDifficulty->animation->play(HX_("noob",94,13,0a,49),null(),null(),null());
            			}
            			break;
            			case (int)1: {
HXLINE( 277)				this->sprDifficulty->animation->play(HX_("easy",02,8c,0c,43),null(),null(),null());
            			}
            			break;
            			case (int)2: {
HXLINE( 279)				this->sprDifficulty->animation->play(HX_("normal",27,72,69,30),null(),null(),null());
            			}
            			break;
            			case (int)3: {
HXLINE( 281)				this->sprDifficulty->animation->play(HX_("hard",eb,2e,08,45),null(),null(),null());
            			}
            			break;
            			case (int)4: {
HXLINE( 283)				this->sprDifficulty->animation->play(HX_("expert",ea,fa,75,c4),null(),null(),null());
            			}
            			break;
            			case (int)5: {
HXLINE( 285)				this->sprDifficulty->animation->play(HX_("insane",aa,36,da,9d),null(),null(),null());
            			}
            			break;
            		}
HXLINE( 288)		this->sprDifficulty->set_alpha(( (Float)(0) ));
HXLINE( 290)		this->sprDifficulty->set_y(( (Float)(101) ));
HXLINE( 291)		::flixel::tweens::FlxTween_obj::tween(this->sprDifficulty, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),151)
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.04),null());
HXLINE( 293)		this->updateSong();
HXLINE( 294)		::Endless_Substate_obj::loadCurrent(::Endless_Substate_obj::song,::Endless_Substate_obj::curDifficulty);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Endless_Substate_obj,changeDiff,(void))

void Endless_Substate_obj::updateSong(){
            	HX_STACKFRAME(&_hx_pos_a48050086ef0da30_298_updateSong)
HXLINE( 299)		::String diffic = HX_("",00,00,00,00);
HXLINE( 301)		switch((int)(::Endless_Substate_obj::curDifficulty)){
            			case (int)0: {
HXLINE( 304)				diffic = HX_("-noob",41,2e,12,32);
            			}
            			break;
            			case (int)1: {
HXLINE( 306)				diffic = HX_("-easy",af,a6,14,2c);
            			}
            			break;
            			case (int)3: {
HXLINE( 308)				diffic = HX_("-hard",98,49,10,2e);
            			}
            			break;
            			case (int)4: {
HXLINE( 310)				diffic = HX_("-expert",d7,da,bb,13);
            			}
            			break;
            			case (int)5: {
HXLINE( 312)				diffic = HX_("-insane",97,16,20,ed);
            			}
            			break;
            		}
HXLINE( 315)		::PlayState_obj::SONG = ::Song_obj::loadFromJson((::Endless_Substate_obj::song + diffic),::Endless_Substate_obj::song);
HXLINE( 316)		::Endless_Substate_obj::_endless->__SetField(HX_("speed",87,97,69,81),::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 318)		::haxe::Log_obj::trace( ::Dynamic(::Endless_Substate_obj::_endless->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)),::hx::SourceInfo(HX_("source/Endless_Substate.hx",ce,8c,e1,24),318,HX_("Endless_Substate",fc,94,2c,ea),HX_("updateSong",7e,0e,0d,05)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Endless_Substate_obj,updateSong,(void))

int Endless_Substate_obj::curSelected;

int Endless_Substate_obj::curDifficulty;

 ::Dynamic Endless_Substate_obj::_endless;

::String Endless_Substate_obj::song;

void Endless_Substate_obj::loadCurrent(::String songTitle,int difficulty){
            	HX_GC_STACKFRAME(&_hx_pos_a48050086ef0da30_322_loadCurrent)
HXLINE( 323)		if (!(::sys::FileSystem_obj::isDirectory(HX_("presets/endless",99,28,64,68)))) {
HXLINE( 324)			::sys::FileSystem_obj::createDirectory(HX_("presets/endless",99,28,64,68));
            		}
HXLINE( 326)		if (!(::sys::FileSystem_obj::exists((((HX_("presets/endless/",76,5d,3f,ef) + songTitle) + HX_("_",5f,00,00,00)) + difficulty)))) {
HXLINE( 328)			 ::Dynamic replacer = null();
HXDLIN( 328)			::String space = null();
HXDLIN( 328)			::sys::io::File_obj::saveContent((((HX_("presets/endless/",76,5d,3f,ef) + songTitle) + HX_("_",5f,00,00,00)) + difficulty),::haxe::format::JsonPrinter_obj::print(::Endless_Substate_obj::_endless,replacer,space));
            		}
            		else {
HXLINE( 332)			::String data = ::sys::io::File_obj::getContent((((HX_("presets/endless/",76,5d,3f,ef) + songTitle) + HX_("_",5f,00,00,00)) + difficulty));
HXLINE( 333)			::Endless_Substate_obj::_endless =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Endless_Substate_obj,loadCurrent,(void))

void Endless_Substate_obj::saveCurrent(::String songTitle,int difficulty){
            	HX_STACKFRAME(&_hx_pos_a48050086ef0da30_339_saveCurrent)
HXDLIN( 339)		 ::Dynamic replacer = null();
HXDLIN( 339)		::String space = null();
HXDLIN( 339)		::sys::io::File_obj::saveContent((((HX_("presets/endless/",76,5d,3f,ef) + songTitle) + HX_("_",5f,00,00,00)) + difficulty),::haxe::format::JsonPrinter_obj::print(::Endless_Substate_obj::_endless,replacer,space));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Endless_Substate_obj,saveCurrent,(void))


::hx::ObjectPtr< Endless_Substate_obj > Endless_Substate_obj::__new() {
	::hx::ObjectPtr< Endless_Substate_obj > __this = new Endless_Substate_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Endless_Substate_obj > Endless_Substate_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Endless_Substate_obj *__this = (Endless_Substate_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Endless_Substate_obj), true, "Endless_Substate"));
	*(void **)__this = Endless_Substate_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Endless_Substate_obj::Endless_Substate_obj()
{
}

void Endless_Substate_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Endless_Substate);
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(optionShit,"optionShit");
	HX_MARK_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_MARK_MEMBER_NAME(textSpeed,"textSpeed");
	HX_MARK_MEMBER_NAME(textRamp,"textRamp");
	HX_MARK_MEMBER_NAME(goingBack,"goingBack");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(initSpeed,"initSpeed");
	HX_MARK_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Endless_Substate_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(optionShit,"optionShit");
	HX_VISIT_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_VISIT_MEMBER_NAME(textSpeed,"textSpeed");
	HX_VISIT_MEMBER_NAME(textRamp,"textRamp");
	HX_VISIT_MEMBER_NAME(goingBack,"goingBack");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(initSpeed,"initSpeed");
	HX_VISIT_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Endless_Substate_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textRamp") ) { return ::hx::Val( textRamp ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"textSpeed") ) { return ::hx::Val( textSpeed ); }
		if (HX_FIELD_EQ(inName,"goingBack") ) { return ::hx::Val( goingBack ); }
		if (HX_FIELD_EQ(inName,"initSpeed") ) { return ::hx::Val( initSpeed ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { return ::hx::Val( optionShit ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeDiff") ) { return ::hx::Val( changeDiff_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateSong") ) { return ::hx::Val( updateSong_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { return ::hx::Val( sprDifficulty ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { return ::hx::Val( blackBarThingie ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Endless_Substate_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"song") ) { outValue = ( song ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_endless") ) { outValue = ( _endless ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
		if (HX_FIELD_EQ(inName,"loadCurrent") ) { outValue = loadCurrent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"saveCurrent") ) { outValue = saveCurrent_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { outValue = ( curDifficulty ); return true; }
	}
	return false;
}

::hx::Val Endless_Substate_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textRamp") ) { textRamp=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textSpeed") ) { textSpeed=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"goingBack") ) { goingBack=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"initSpeed") ) { initSpeed=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { optionShit=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { sprDifficulty=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { blackBarThingie=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Endless_Substate_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"song") ) { song=ioValue.Cast< ::String >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_endless") ) { _endless=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { curDifficulty=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Endless_Substate_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("optionShit",d5,2d,ee,91));
	outFields->push(HX_("sprDifficulty",d0,6b,83,ba));
	outFields->push(HX_("textSpeed",9a,27,57,1a));
	outFields->push(HX_("textRamp",1f,a0,9f,4e));
	outFields->push(HX_("goingBack",01,e7,bf,2f));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("initSpeed",57,b2,fb,9c));
	outFields->push(HX_("blackBarThingie",56,00,c2,d2));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Endless_Substate_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Endless_Substate_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Endless_Substate_obj,optionShit),HX_("optionShit",d5,2d,ee,91)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Endless_Substate_obj,sprDifficulty),HX_("sprDifficulty",d0,6b,83,ba)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Endless_Substate_obj,textSpeed),HX_("textSpeed",9a,27,57,1a)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Endless_Substate_obj,textRamp),HX_("textRamp",1f,a0,9f,4e)},
	{::hx::fsBool,(int)offsetof(Endless_Substate_obj,goingBack),HX_("goingBack",01,e7,bf,2f)},
	{::hx::fsFloat,(int)offsetof(Endless_Substate_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsFloat,(int)offsetof(Endless_Substate_obj,initSpeed),HX_("initSpeed",57,b2,fb,9c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Endless_Substate_obj,blackBarThingie),HX_("blackBarThingie",56,00,c2,d2)},
	{::hx::fsBool,(int)offsetof(Endless_Substate_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Endless_Substate_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Endless_Substate_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsInt,(void *) &Endless_Substate_obj::curDifficulty,HX_("curDifficulty",db,b7,38,a7)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Endless_Substate_obj::_endless,HX_("_endless",35,fa,b3,78)},
	{::hx::fsString,(void *) &Endless_Substate_obj::song,HX_("song",d5,23,58,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Endless_Substate_obj_sMemberFields[] = {
	HX_("menuItems",e1,15,e5,5c),
	HX_("optionShit",d5,2d,ee,91),
	HX_("sprDifficulty",d0,6b,83,ba),
	HX_("textSpeed",9a,27,57,1a),
	HX_("textRamp",1f,a0,9f,4e),
	HX_("goingBack",01,e7,bf,2f),
	HX_("camLerp",26,66,a1,d2),
	HX_("initSpeed",57,b2,fb,9c),
	HX_("blackBarThingie",56,00,c2,d2),
	HX_("selectable",96,b6,2a,c4),
	HX_("update",09,86,05,87),
	HX_("changeItem",a3,fa,08,20),
	HX_("changeDiff",95,91,b2,1c),
	HX_("updateSong",7e,0e,0d,05),
	::String(null()) };

static void Endless_Substate_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Endless_Substate_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(Endless_Substate_obj::curDifficulty,"curDifficulty");
	HX_MARK_MEMBER_NAME(Endless_Substate_obj::_endless,"_endless");
	HX_MARK_MEMBER_NAME(Endless_Substate_obj::song,"song");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Endless_Substate_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Endless_Substate_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(Endless_Substate_obj::curDifficulty,"curDifficulty");
	HX_VISIT_MEMBER_NAME(Endless_Substate_obj::_endless,"_endless");
	HX_VISIT_MEMBER_NAME(Endless_Substate_obj::song,"song");
};

#endif

::hx::Class Endless_Substate_obj::__mClass;

static ::String Endless_Substate_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("curDifficulty",db,b7,38,a7),
	HX_("_endless",35,fa,b3,78),
	HX_("song",d5,23,58,4c),
	HX_("loadCurrent",b3,5a,81,9c),
	HX_("saveCurrent",7c,ca,83,25),
	::String(null())
};

void Endless_Substate_obj::__register()
{
	Endless_Substate_obj _hx_dummy;
	Endless_Substate_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Endless_Substate",fc,94,2c,ea);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Endless_Substate_obj::__GetStatic;
	__mClass->mSetStaticField = &Endless_Substate_obj::__SetStatic;
	__mClass->mMarkFunc = Endless_Substate_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Endless_Substate_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Endless_Substate_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Endless_Substate_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Endless_Substate_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Endless_Substate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Endless_Substate_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Endless_Substate_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a48050086ef0da30_44_boot)
HXDLIN(  44)		curSelected = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a48050086ef0da30_45_boot)
HXDLIN(  45)		curDifficulty = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a48050086ef0da30_56_boot)
HXDLIN(  56)		song = HX_("",00,00,00,00);
            	}
}


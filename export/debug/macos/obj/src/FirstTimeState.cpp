// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_FirstTimeState
#include <FirstTimeState.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e5473702fda574fa_14_new,"FirstTimeState","new",0xe3783b86,"FirstTimeState.new","FirstTimeState.hx",14,0xa8a016aa)
HX_LOCAL_STACK_FRAME(_hx_pos_e5473702fda574fa_27_create,"FirstTimeState","create",0xfa5df796,"FirstTimeState.create","FirstTimeState.hx",27,0xa8a016aa)
HX_LOCAL_STACK_FRAME(_hx_pos_e5473702fda574fa_40_update,"FirstTimeState","update",0x055416a3,"FirstTimeState.update","FirstTimeState.hx",40,0xa8a016aa)

void FirstTimeState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_e5473702fda574fa_14_new)
HXLINE(  18)		this->txt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,360,::flixel::FlxG_obj::width,((((HX_("WARNING:\nFNF: Mic'd Up may potentially trigger seizures for people with photosensitive epilepsy.Viewer discretion is advised.\n\n",96,86,45,82) + HX_("FNF: Mic'd Up is a non-profit modification, aimed for entertainment purposes, and wasn't meant to be an attack on Ninjamuffin99",f9,f1,4c,35)) + HX_(" and/or any other modmakers out there. I was not aiming for replacing what Friday Night Funkin' was, won't be aiming for that and never",e8,30,f4,a3)) + HX_(" will be aiming for that. It was made for fun and from the love for the game itself. All of the comparisons between this and other mods are purely coincidental, unless stated otherwise.\n\n",4e,1c,85,26)) + HX_("Now with that out of the way, I hope you'll enjoy this FNF mod.\nFunk all the way.\nPress ENTER to proceed",57,fa,94,4e)),32,null());
HXLINE(  17)		this->sinMod = ((Float)0);
HXLINE(  14)		super::__construct(TransIn,TransOut);
            	}

Dynamic FirstTimeState_obj::__CreateEmpty() { return new FirstTimeState_obj; }

void *FirstTimeState_obj::_hx_vtable = 0;

Dynamic FirstTimeState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FirstTimeState_obj > _hx_result = new FirstTimeState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FirstTimeState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x08384bb8) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x08384bb8;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void FirstTimeState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_e5473702fda574fa_27_create)
HXLINE(  30)		::DiscordClient_obj::changePresence(HX_("Started for the first time.",cc,69,a7,c3),null(),null(),null(),null());
HXLINE(  33)		this->txt->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),32,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  34)		this->add(this->txt);
HXLINE(  36)		this->super::create();
            	}


void FirstTimeState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_e5473702fda574fa_40_update)
HXLINE(  41)		 ::FirstTimeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  41)		_hx_tmp->sinMod = (_hx_tmp->sinMod + ((Float)0.007));
HXLINE(  42)		this->txt->set_y(((::Math_obj::sin(this->sinMod) * ( (Float)(60) )) + 100));
HXLINE(  44)		if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE(  46)			::MainVariables_obj::_variables->__SetField(HX_("firstTime",5d,48,cb,03),false,::hx::paccDynamic);
HXLINE(  47)			::MainVariables_obj::Save();
HXLINE(  49)			{
HXLINE(  49)				 ::flixel::FlxState nextState =  ::TitleState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  49)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  49)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE(  51)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< FirstTimeState_obj > FirstTimeState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< FirstTimeState_obj > __this = new FirstTimeState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< FirstTimeState_obj > FirstTimeState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	FirstTimeState_obj *__this = (FirstTimeState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FirstTimeState_obj), true, "FirstTimeState"));
	*(void **)__this = FirstTimeState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

FirstTimeState_obj::FirstTimeState_obj()
{
}

void FirstTimeState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FirstTimeState);
	HX_MARK_MEMBER_NAME(sinMod,"sinMod");
	HX_MARK_MEMBER_NAME(txt,"txt");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FirstTimeState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sinMod,"sinMod");
	HX_VISIT_MEMBER_NAME(txt,"txt");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FirstTimeState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"txt") ) { return ::hx::Val( txt ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"sinMod") ) { return ::hx::Val( sinMod ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FirstTimeState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"txt") ) { txt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"sinMod") ) { sinMod=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FirstTimeState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("sinMod",8a,ae,0d,b9));
	outFields->push(HX_("txt",70,6e,58,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FirstTimeState_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(FirstTimeState_obj,sinMod),HX_("sinMod",8a,ae,0d,b9)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FirstTimeState_obj,txt),HX_("txt",70,6e,58,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FirstTimeState_obj_sStaticStorageInfo = 0;
#endif

static ::String FirstTimeState_obj_sMemberFields[] = {
	HX_("sinMod",8a,ae,0d,b9),
	HX_("txt",70,6e,58,00),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class FirstTimeState_obj::__mClass;

void FirstTimeState_obj::__register()
{
	FirstTimeState_obj _hx_dummy;
	FirstTimeState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("FirstTimeState",94,c0,0e,ff);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FirstTimeState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FirstTimeState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FirstTimeState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FirstTimeState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}


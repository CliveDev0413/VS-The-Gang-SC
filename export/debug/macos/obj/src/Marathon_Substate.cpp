// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MainVariables
#include <MainVariables.h>
#endif
#ifndef INCLUDED_Marathon_Edit
#include <Marathon_Edit.h>
#endif
#ifndef INCLUDED_Marathon_Substate
#include <Marathon_Substate.h>
#endif
#ifndef INCLUDED_MenuMarathon
#include <MenuMarathon.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlaySelection
#include <PlaySelection.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Substate_ChartType
#include <Substate_ChartType.h>
#endif
#ifndef INCLUDED_Substate_PresetLoad
#include <Substate_PresetLoad.h>
#endif
#ifndef INCLUDED_Substate_PresetSave
#include <Substate_PresetSave.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_91c39cb3d8ad39a5_104_new,"Marathon_Substate","new",0x4232aa0c,"Marathon_Substate.new","Marathon_Substate.hx",104,0xdf015ae4)
HX_DEFINE_STACK_FRAME(_hx_pos_91c39cb3d8ad39a5_29_new,"Marathon_Substate","new",0x4232aa0c,"Marathon_Substate.new","Marathon_Substate.hx",29,0xdf015ae4)
HX_LOCAL_STACK_FRAME(_hx_pos_91c39cb3d8ad39a5_267_update,"Marathon_Substate","update",0x24e4ffdd,"Marathon_Substate.update","Marathon_Substate.hx",267,0xdf015ae4)
HX_LOCAL_STACK_FRAME(_hx_pos_91c39cb3d8ad39a5_111_update,"Marathon_Substate","update",0x24e4ffdd,"Marathon_Substate.update","Marathon_Substate.hx",111,0xdf015ae4)
HX_LOCAL_STACK_FRAME(_hx_pos_91c39cb3d8ad39a5_136_update,"Marathon_Substate","update",0x24e4ffdd,"Marathon_Substate.update","Marathon_Substate.hx",136,0xdf015ae4)
HX_LOCAL_STACK_FRAME(_hx_pos_91c39cb3d8ad39a5_257_update,"Marathon_Substate","update",0x24e4ffdd,"Marathon_Substate.update","Marathon_Substate.hx",257,0xdf015ae4)
HX_LOCAL_STACK_FRAME(_hx_pos_91c39cb3d8ad39a5_190_update,"Marathon_Substate","update",0x24e4ffdd,"Marathon_Substate.update","Marathon_Substate.hx",190,0xdf015ae4)
HX_LOCAL_STACK_FRAME(_hx_pos_91c39cb3d8ad39a5_246_update,"Marathon_Substate","update",0x24e4ffdd,"Marathon_Substate.update","Marathon_Substate.hx",246,0xdf015ae4)
HX_LOCAL_STACK_FRAME(_hx_pos_91c39cb3d8ad39a5_177_update,"Marathon_Substate","update",0x24e4ffdd,"Marathon_Substate.update","Marathon_Substate.hx",177,0xdf015ae4)
HX_LOCAL_STACK_FRAME(_hx_pos_91c39cb3d8ad39a5_234_update,"Marathon_Substate","update",0x24e4ffdd,"Marathon_Substate.update","Marathon_Substate.hx",234,0xdf015ae4)
HX_LOCAL_STACK_FRAME(_hx_pos_91c39cb3d8ad39a5_282_changeItem,"Marathon_Substate","changeItem",0x268bee77,"Marathon_Substate.changeItem","Marathon_Substate.hx",282,0xdf015ae4)
HX_LOCAL_STACK_FRAME(_hx_pos_91c39cb3d8ad39a5_33_boot,"Marathon_Substate","boot",0xa23b2106,"Marathon_Substate.boot","Marathon_Substate.hx",33,0xdf015ae4)

void Marathon_Substate_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Marathon_Substate,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_91c39cb3d8ad39a5_104_new)
HXLINE( 104)			_gthis->selectable = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_91c39cb3d8ad39a5_29_new)
HXLINE( 108)		this->selectable = false;
HXLINE(  41)		this->blackBarThingie =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE(  37)		this->camLerp = ((Float)0.16);
HXLINE(  35)		this->goingBack = false;
HXLINE(  47)		 ::Marathon_Substate _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  49)		super::__construct();
HXLINE(  51)		this->add(this->blackBarThingie);
HXLINE(  52)		this->blackBarThingie->scrollFactor->set(null(),null());
HXLINE(  53)		this->blackBarThingie->scale->set_x(( (Float)(0) ));
HXLINE(  54)		::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("scale.x",94,2d,07,65),300)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
HXLINE(  56)		::Marathon_Substate_obj::presets = ::sys::FileSystem_obj::readDirectory(HX_("presets/marathon",91,69,b4,e9));
HXLINE(  57)		::Marathon_Substate_obj::presets->remove(HX_("current",39,9c,e3,cb));
HXLINE(  59)		::haxe::Log_obj::trace(::Marathon_Substate_obj::presets,::hx::SourceInfo(HX_("source/Marathon_Substate.hx",d8,1b,c3,09),59,HX_("Marathon_Substate",1a,f4,01,51),HX_("new",60,d0,53,00)));
HXLINE(  61)		if ((::PlayState_obj::storyPlaylist->length > 0)) {
HXLINE(  63)			this->canPlay = HX_("play",f4,2d,5a,4a);
HXLINE(  64)			this->canEdit = HX_("edit",0a,ca,0e,43);
            		}
            		else {
HXLINE(  68)			this->canPlay = HX_("no",41,60,00,00);
HXLINE(  69)			this->canEdit = HX_("no",41,60,00,00);
            		}
HXLINE(  72)		if ((::Marathon_Substate_obj::presets->length > 0)) {
HXLINE(  73)			this->canLoad = HX_("load",26,9a,b7,47);
            		}
            		else {
HXLINE(  75)			this->canLoad = HX_("no",41,60,00,00);
            		}
HXLINE(  77)		this->optionShit = ::Array_obj< ::String >::__new(6)->init(0,this->canPlay)->init(1,this->canEdit)->init(2,HX_("clear",8d,71,5b,48))->init(3,HX_("save",3d,8b,4d,4c))->init(4,this->canLoad)->init(5,HX_("exit",1e,f7,1d,43));
HXLINE(  79)		this->menuItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  80)		this->add(this->menuItems);
HXLINE(  82)		::String library = null();
HXDLIN(  82)		::String tex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Modi_Buttons",29,32,9e,1a)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(  82)		 ::flixel::graphics::frames::FlxAtlasFrames tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(tex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Modi_Buttons",29,32,9e,1a)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  84)		{
HXLINE(  84)			int _g = 0;
HXDLIN(  84)			int _g1 = this->optionShit->length;
HXDLIN(  84)			while((_g < _g1)){
HXLINE(  84)				_g = (_g + 1);
HXDLIN(  84)				int i = (_g - 1);
HXLINE(  86)				 ::flixel::FlxSprite menuItem =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(  87)				menuItem->set_frames(tex1);
HXLINE(  88)				menuItem->animation->addByPrefix(HX_("standard",3d,37,78,ea),this->optionShit->__get(i),24,true,null(),null());
HXLINE(  89)				menuItem->animation->play(HX_("standard",3d,37,78,ea),null(),null(),null());
HXLINE(  90)				menuItem->ID = i;
HXLINE(  91)				this->menuItems->add(menuItem).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  92)				menuItem->scrollFactor->set(null(),null());
HXLINE(  93)				menuItem->set_antialiasing(true);
HXLINE(  94)				menuItem->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  95)				menuItem->scrollFactor->set_y(( (Float)(0) ));
HXLINE(  97)				menuItem->set_y(( (Float)((40 + (i * 90))) ));
HXLINE(  98)				menuItem->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  99)				menuItem->scale->set(0,0);
            			}
            		}
HXLINE( 102)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}

Dynamic Marathon_Substate_obj::__CreateEmpty() { return new Marathon_Substate_obj; }

void *Marathon_Substate_obj::_hx_vtable = 0;

Dynamic Marathon_Substate_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Marathon_Substate_obj > _hx_result = new Marathon_Substate_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Marathon_Substate_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7c795c9f) {
		if (inClassId<=(int)0x62817b24) {
			if (inClassId<=(int)0x5661ffbf) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x5661ffbf;
			} else {
				return inClassId==(int)0x62817b24;
			}
		} else {
			return inClassId==(int)0x7c795c9f;
		}
	} else {
		if (inClassId<=(int)0x7fab4e9a) {
			return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7fab4e9a;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void Marathon_Substate_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::Marathon_Substate,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_GC_STACKFRAME(&_hx_pos_91c39cb3d8ad39a5_267_update)
HXLINE( 267)			if (!(_gthis->goingBack)) {
HXLINE( 269)				spr->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 270)				spr->set_y(( (Float)((20 + (spr->ID * 105))) ));
HXLINE( 271)				Float a = spr->scale->x;
HXDLIN( 271)				Float a1 = spr->scale->y;
HXDLIN( 271)				spr->scale->set((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)0.4) - a))),(a1 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)0.4) - a1))));
HXLINE( 273)				if ((spr->ID == ::Marathon_Substate_obj::curSelected)) {
HXLINE( 274)					Float a = spr->scale->x;
HXDLIN( 274)					Float a1 = spr->scale->y;
HXDLIN( 274)					spr->scale->set((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)1.2) - a))),(a1 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (((Float)1.2) - a1))));
            				}
            			}
            			else {
HXLINE( 277)				Float a = spr->scale->x;
HXDLIN( 277)				Float a1 = spr->scale->y;
HXDLIN( 277)				spr->scale->set((a + ((_gthis->camLerp / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(0) ) - a))),(a1 + ((((Float)0.4) / (( (Float)(::MainVariables_obj::_variables->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ) / ( (Float)(60) ))) * (( (Float)(0) ) - a1))));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_91c39cb3d8ad39a5_111_update)
HXLINE( 110)		 ::Marathon_Substate _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 112)		this->super::update(elapsed);
HXLINE( 114)		this->blackBarThingie->screenCenter(null());
HXLINE( 116)		bool _hx_tmp;
HXDLIN( 116)		if (this->selectable) {
HXLINE( 116)			_hx_tmp = !(this->goingBack);
            		}
            		else {
HXLINE( 116)			_hx_tmp = false;
            		}
HXDLIN( 116)		if (_hx_tmp) {
HXLINE( 118)			if (::PlayerSettings_obj::player1->controls->_upP->check()) {
HXLINE( 120)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 120)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 120)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 121)				this->changeItem(-1);
            			}
HXLINE( 124)			if (::PlayerSettings_obj::player1->controls->_downP->check()) {
HXLINE( 126)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 126)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null());
HXDLIN( 126)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 127)				this->changeItem(1);
            			}
HXLINE( 130)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_91c39cb3d8ad39a5_136_update)
HXLINE( 137)					::flixel::FlxG_obj::game->_state->closeSubState();
HXLINE( 138)					::MenuMarathon_obj::substated = false;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 132)				this->goingBack = true;
HXLINE( 133)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 133)				::String _hx_tmp1 = ::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null());
HXDLIN( 133)				_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 134)				::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("scale.x",94,2d,07,65),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 135)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.6), ::Dynamic(new _hx_Closure_0()),null());
            			}
HXLINE( 142)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 144)				::String _hx_switch_0 = this->optionShit->__get(::Marathon_Substate_obj::curSelected);
            				if (  (_hx_switch_0==HX_("clear",8d,71,5b,48)) ){
HXLINE( 193)					::PlayState_obj::storyPlaylist = ::Array_obj< ::String >::__new(0);
HXLINE( 194)					::PlayState_obj::difficultyPlaylist = ::Array_obj< ::String >::__new(0);
HXLINE( 195)					::MenuMarathon_obj::saveCurrent();
HXLINE( 197)					this->canPlay = HX_("no",41,60,00,00);
HXLINE( 198)					this->canEdit = HX_("no",41,60,00,00);
HXLINE( 200)					this->optionShit = ::Array_obj< ::String >::__new(6)->init(0,this->canPlay)->init(1,this->canEdit)->init(2,HX_("clear",8d,71,5b,48))->init(3,HX_("save",3d,8b,4d,4c))->init(4,this->canLoad)->init(5,HX_("exit",1e,f7,1d,43));
HXLINE( 202)					this->menuItems->clear();
HXLINE( 204)					::String library = null();
HXDLIN( 204)					::String tex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Modi_Buttons",29,32,9e,1a)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 204)					 ::flixel::graphics::frames::FlxAtlasFrames tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(tex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Modi_Buttons",29,32,9e,1a)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 205)					{
HXLINE( 205)						int _g = 0;
HXDLIN( 205)						int _g1 = this->optionShit->length;
HXDLIN( 205)						while((_g < _g1)){
HXLINE( 205)							_g = (_g + 1);
HXDLIN( 205)							int i = (_g - 1);
HXLINE( 207)							 ::flixel::FlxSprite menuItem =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE( 208)							menuItem->set_frames(tex1);
HXLINE( 209)							menuItem->animation->addByPrefix(HX_("standard",3d,37,78,ea),this->optionShit->__get(i),24,true,null(),null());
HXLINE( 210)							menuItem->animation->play(HX_("standard",3d,37,78,ea),null(),null(),null());
HXLINE( 211)							menuItem->ID = i;
HXLINE( 212)							this->menuItems->add(menuItem).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 213)							menuItem->scrollFactor->set(null(),null());
HXLINE( 214)							menuItem->set_antialiasing(true);
HXLINE( 215)							menuItem->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 216)							menuItem->scrollFactor->set_y(( (Float)(0) ));
HXLINE( 218)							menuItem->set_y(( (Float)((40 + (i * 90))) ));
HXLINE( 219)							menuItem->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 220)							menuItem->scale->set(0,0);
            						}
            					}
HXLINE( 223)					::flixel::FlxG_obj::camera->flash(-65536,((Float)0.4),null(),true);
HXLINE( 225)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 225)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 225)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 192)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==HX_("edit",0a,ca,0e,43)) ){
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_91c39cb3d8ad39a5_257_update)
HXLINE( 258)						 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 258)						_hx_tmp->openSubState( ::Marathon_Edit_obj::__alloc( HX_CTX ));
HXLINE( 259)						::flixel::FlxG_obj::game->_state->closeSubState();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 251)					this->goingBack = true;
HXLINE( 253)					::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("scale.x",94,2d,07,65),0)
            						->setFixed(1,HX_("scale.y",95,2d,07,65),1500)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 255)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 255)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 255)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 256)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.6), ::Dynamic(new _hx_Closure_1()),null());
HXLINE( 250)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==HX_("exit",1e,f7,1d,43)) ){
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_91c39cb3d8ad39a5_190_update)
HXLINE( 190)						 ::flixel::FlxState nextState =  ::PlaySelection_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 190)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 190)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 182)					this->goingBack = true;
HXLINE( 184)					::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("scale.x",94,2d,07,65),1500)
            						->setFixed(1,HX_("scale.y",95,2d,07,65),1500)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 185)					::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),0)
            						->setFixed(1,HX_("zoom",13,a3,f8,50),((Float)0.6))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 187)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 187)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 187)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 188)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.6), ::Dynamic(new _hx_Closure_2()),null());
HXLINE( 181)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==HX_("load",26,9a,b7,47)) ){
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_91c39cb3d8ad39a5_246_update)
HXLINE( 247)						 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 247)						_hx_tmp->openSubState( ::Substate_PresetLoad_obj::__alloc( HX_CTX ));
HXLINE( 248)						::flixel::FlxG_obj::game->_state->closeSubState();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 239)					this->goingBack = true;
HXLINE( 240)					::Substate_PresetLoad_obj::coming = HX_("Marathon",36,c5,57,b1);
HXLINE( 242)					::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("scale.x",94,2d,07,65),0)
            						->setFixed(1,HX_("scale.y",95,2d,07,65),1500)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 244)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 244)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 244)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 245)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.6), ::Dynamic(new _hx_Closure_3()),null());
HXLINE( 238)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==HX_("play",f4,2d,5a,4a)) ){
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_91c39cb3d8ad39a5_177_update)
HXLINE( 178)						 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 178)						_hx_tmp->openSubState( ::Substate_ChartType_obj::__alloc( HX_CTX ));
HXLINE( 179)						::MenuMarathon_obj::no = true;
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 147)					this->goingBack = true;
HXLINE( 150)					::DiscordClient_obj::changePresence(HX_("Selecting chart types.",b1,f1,48,2c),null(),null(),null(),null());
HXLINE( 153)					::String diffic = HX_("",00,00,00,00);
HXLINE( 155)					::String _hx_switch_1 = ::PlayState_obj::difficultyPlaylist->__get(0);
            					if (  (_hx_switch_1==HX_("0",30,00,00,00)) ){
HXLINE( 158)						diffic = HX_("-noob",41,2e,12,32);
HXDLIN( 158)						goto _hx_goto_5;
            					}
            					if (  (_hx_switch_1==HX_("1",31,00,00,00)) ){
HXLINE( 160)						diffic = HX_("-easy",af,a6,14,2c);
HXDLIN( 160)						goto _hx_goto_5;
            					}
            					if (  (_hx_switch_1==HX_("3",33,00,00,00)) ){
HXLINE( 162)						diffic = HX_("-hard",98,49,10,2e);
HXDLIN( 162)						goto _hx_goto_5;
            					}
            					if (  (_hx_switch_1==HX_("4",34,00,00,00)) ){
HXLINE( 164)						diffic = HX_("-expert",d7,da,bb,13);
HXDLIN( 164)						goto _hx_goto_5;
            					}
            					if (  (_hx_switch_1==HX_("5",35,00,00,00)) ){
HXLINE( 166)						diffic = HX_("-insane",97,16,20,ed);
HXDLIN( 166)						goto _hx_goto_5;
            					}
            					_hx_goto_5:;
HXLINE( 168)					::PlayState_obj::storyDifficulty = ( (int)(::Std_obj::parseInt(::PlayState_obj::difficultyPlaylist->__get(0))) );
HXLINE( 169)					::PlayState_obj::gameplayArea = HX_("Marathon",36,c5,57,b1);
HXLINE( 170)					::String _hx_tmp = (::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + diffic);
HXDLIN( 170)					::PlayState_obj::SONG = ::Song_obj::loadFromJson(_hx_tmp,::PlayState_obj::storyPlaylist->__get(0).toLowerCase());
HXLINE( 171)					::PlayState_obj::campaignScore = 0;
HXLINE( 173)					::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("scale.x",94,2d,07,65),1500)
            						->setFixed(1,HX_("scale.y",95,2d,07,65),1500)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 175)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 175)					::String _hx_tmp2 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 175)					_hx_tmp1->play(_hx_tmp2,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 176)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.6), ::Dynamic(new _hx_Closure_4()),null());
HXLINE( 146)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==HX_("save",3d,8b,4d,4c)) ){
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_91c39cb3d8ad39a5_234_update)
HXLINE( 235)						 ::flixel::FlxState _hx_tmp = ::flixel::FlxG_obj::game->_state;
HXDLIN( 235)						_hx_tmp->openSubState( ::Substate_PresetSave_obj::__alloc( HX_CTX ));
HXLINE( 236)						::flixel::FlxG_obj::game->_state->closeSubState();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 227)					this->goingBack = true;
HXLINE( 228)					::Substate_PresetSave_obj::coming = HX_("Marathon",36,c5,57,b1);
HXLINE( 230)					::flixel::tweens::FlxTween_obj::tween(this->blackBarThingie, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("scale.x",94,2d,07,65),1500)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 232)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 232)					::String _hx_tmp1 = ::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null());
HXDLIN( 232)					_hx_tmp->play(_hx_tmp1,(( (Float)(::MainVariables_obj::_variables->__Field(HX_("svolume",8d,82,77,0d),::hx::paccDynamic)) ) / ( (Float)(100) )),null(),null(),null(),null());
HXLINE( 233)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.6), ::Dynamic(new _hx_Closure_5()),null());
HXLINE( 226)					goto _hx_goto_3;
            				}
            				_hx_goto_3:;
            			}
            		}
HXLINE( 265)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_6(_gthis)),null());
            	}


void Marathon_Substate_obj::changeItem(::hx::Null< int >  __o_huh){
            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_91c39cb3d8ad39a5_282_changeItem)
HXLINE( 283)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Marathon_Substate >();
HXDLIN( 283)		::Marathon_Substate_obj::curSelected = (::Marathon_Substate_obj::curSelected + huh);
HXLINE( 285)		if ((::Marathon_Substate_obj::curSelected >= this->menuItems->length)) {
HXLINE( 286)			::Marathon_Substate_obj::curSelected = 0;
            		}
HXLINE( 287)		if ((::Marathon_Substate_obj::curSelected < 0)) {
HXLINE( 288)			::Marathon_Substate_obj::curSelected = (this->menuItems->length - 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Marathon_Substate_obj,changeItem,(void))

int Marathon_Substate_obj::curSelected;

::Array< ::String > Marathon_Substate_obj::presets;


::hx::ObjectPtr< Marathon_Substate_obj > Marathon_Substate_obj::__new() {
	::hx::ObjectPtr< Marathon_Substate_obj > __this = new Marathon_Substate_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Marathon_Substate_obj > Marathon_Substate_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Marathon_Substate_obj *__this = (Marathon_Substate_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Marathon_Substate_obj), true, "Marathon_Substate"));
	*(void **)__this = Marathon_Substate_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Marathon_Substate_obj::Marathon_Substate_obj()
{
}

void Marathon_Substate_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Marathon_Substate);
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(optionShit,"optionShit");
	HX_MARK_MEMBER_NAME(goingBack,"goingBack");
	HX_MARK_MEMBER_NAME(camLerp,"camLerp");
	HX_MARK_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_MARK_MEMBER_NAME(canLoad,"canLoad");
	HX_MARK_MEMBER_NAME(canPlay,"canPlay");
	HX_MARK_MEMBER_NAME(canEdit,"canEdit");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Marathon_Substate_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(optionShit,"optionShit");
	HX_VISIT_MEMBER_NAME(goingBack,"goingBack");
	HX_VISIT_MEMBER_NAME(camLerp,"camLerp");
	HX_VISIT_MEMBER_NAME(blackBarThingie,"blackBarThingie");
	HX_VISIT_MEMBER_NAME(canLoad,"canLoad");
	HX_VISIT_MEMBER_NAME(canPlay,"canPlay");
	HX_VISIT_MEMBER_NAME(canEdit,"canEdit");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Marathon_Substate_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { return ::hx::Val( camLerp ); }
		if (HX_FIELD_EQ(inName,"canLoad") ) { return ::hx::Val( canLoad ); }
		if (HX_FIELD_EQ(inName,"canPlay") ) { return ::hx::Val( canPlay ); }
		if (HX_FIELD_EQ(inName,"canEdit") ) { return ::hx::Val( canEdit ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"goingBack") ) { return ::hx::Val( goingBack ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { return ::hx::Val( optionShit ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { return ::hx::Val( blackBarThingie ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Marathon_Substate_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"presets") ) { outValue = ( presets ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val Marathon_Substate_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"camLerp") ) { camLerp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canLoad") ) { canLoad=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canPlay") ) { canPlay=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canEdit") ) { canEdit=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"goingBack") ) { goingBack=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { optionShit=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blackBarThingie") ) { blackBarThingie=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Marathon_Substate_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"presets") ) { presets=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Marathon_Substate_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("optionShit",d5,2d,ee,91));
	outFields->push(HX_("goingBack",01,e7,bf,2f));
	outFields->push(HX_("camLerp",26,66,a1,d2));
	outFields->push(HX_("blackBarThingie",56,00,c2,d2));
	outFields->push(HX_("canLoad",56,82,0f,66));
	outFields->push(HX_("canPlay",24,16,b2,68));
	outFields->push(HX_("canEdit",3a,b2,66,61));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Marathon_Substate_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Marathon_Substate_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Marathon_Substate_obj,optionShit),HX_("optionShit",d5,2d,ee,91)},
	{::hx::fsBool,(int)offsetof(Marathon_Substate_obj,goingBack),HX_("goingBack",01,e7,bf,2f)},
	{::hx::fsFloat,(int)offsetof(Marathon_Substate_obj,camLerp),HX_("camLerp",26,66,a1,d2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Marathon_Substate_obj,blackBarThingie),HX_("blackBarThingie",56,00,c2,d2)},
	{::hx::fsString,(int)offsetof(Marathon_Substate_obj,canLoad),HX_("canLoad",56,82,0f,66)},
	{::hx::fsString,(int)offsetof(Marathon_Substate_obj,canPlay),HX_("canPlay",24,16,b2,68)},
	{::hx::fsString,(int)offsetof(Marathon_Substate_obj,canEdit),HX_("canEdit",3a,b2,66,61)},
	{::hx::fsBool,(int)offsetof(Marathon_Substate_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Marathon_Substate_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Marathon_Substate_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Marathon_Substate_obj::presets,HX_("presets",34,40,dc,39)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Marathon_Substate_obj_sMemberFields[] = {
	HX_("menuItems",e1,15,e5,5c),
	HX_("optionShit",d5,2d,ee,91),
	HX_("goingBack",01,e7,bf,2f),
	HX_("camLerp",26,66,a1,d2),
	HX_("blackBarThingie",56,00,c2,d2),
	HX_("canLoad",56,82,0f,66),
	HX_("canPlay",24,16,b2,68),
	HX_("canEdit",3a,b2,66,61),
	HX_("selectable",96,b6,2a,c4),
	HX_("update",09,86,05,87),
	HX_("changeItem",a3,fa,08,20),
	::String(null()) };

static void Marathon_Substate_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Marathon_Substate_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(Marathon_Substate_obj::presets,"presets");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Marathon_Substate_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Marathon_Substate_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(Marathon_Substate_obj::presets,"presets");
};

#endif

::hx::Class Marathon_Substate_obj::__mClass;

static ::String Marathon_Substate_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("presets",34,40,dc,39),
	::String(null())
};

void Marathon_Substate_obj::__register()
{
	Marathon_Substate_obj _hx_dummy;
	Marathon_Substate_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Marathon_Substate",1a,f4,01,51);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Marathon_Substate_obj::__GetStatic;
	__mClass->mSetStaticField = &Marathon_Substate_obj::__SetStatic;
	__mClass->mMarkFunc = Marathon_Substate_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Marathon_Substate_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Marathon_Substate_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Marathon_Substate_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Marathon_Substate_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Marathon_Substate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Marathon_Substate_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Marathon_Substate_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_91c39cb3d8ad39a5_33_boot)
HXDLIN(  33)		curSelected = 0;
            	}
}


// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_MenuModifiers
#include <MenuModifiers.h>
#endif
#ifndef INCLUDED_ModifierVariables
#include <ModifierVariables.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_bf588a6c8376b842_76_updateModifiers,"ModifierVariables","updateModifiers",0xb875c9c5,"ModifierVariables.updateModifiers","ModifierVariables.hx",76,0x82bc667e)
HX_LOCAL_STACK_FRAME(_hx_pos_bf588a6c8376b842_169_saveCurrent,"ModifierVariables","saveCurrent",0x3e6de14e,"ModifierVariables.saveCurrent","ModifierVariables.hx",169,0x82bc667e)
HX_LOCAL_STACK_FRAME(_hx_pos_bf588a6c8376b842_179_savePreset,"ModifierVariables","savePreset",0x997467ea,"ModifierVariables.savePreset","ModifierVariables.hx",179,0x82bc667e)
HX_LOCAL_STACK_FRAME(_hx_pos_bf588a6c8376b842_183_loadPreset,"ModifierVariables","loadPreset",0x05e60b93,"ModifierVariables.loadPreset","ModifierVariables.hx",183,0x82bc667e)
HX_LOCAL_STACK_FRAME(_hx_pos_bf588a6c8376b842_191_loadCurrent,"ModifierVariables","loadCurrent",0xb56b7185,"ModifierVariables.loadCurrent","ModifierVariables.hx",191,0x82bc667e)
HX_LOCAL_STACK_FRAME(_hx_pos_bf588a6c8376b842_202_replaceValues,"ModifierVariables","replaceValues",0x31f0ce88,"ModifierVariables.replaceValues","ModifierVariables.hx",202,0x82bc667e)
HX_LOCAL_STACK_FRAME(_hx_pos_bf588a6c8376b842_295_nullify,"ModifierVariables","nullify",0x18f1bba7,"ModifierVariables.nullify","ModifierVariables.hx",295,0x82bc667e)
HX_LOCAL_STACK_FRAME(_hx_pos_bf588a6c8376b842_305_modifierSetup,"ModifierVariables","modifierSetup",0xaf02b6f8,"ModifierVariables.modifierSetup","ModifierVariables.hx",305,0x82bc667e)
static const int _hx_array_data_2bef0440_9[] = {
	(int)1,(int)2,(int)4,(int)5,(int)6,(int)28,(int)29,
};
static const int _hx_array_data_2bef0440_10[] = {
	(int)0,(int)4,(int)5,(int)6,(int)7,(int)20,(int)28,(int)29,(int)30,
};
static const int _hx_array_data_2bef0440_11[] = {
	(int)0,
};
static const int _hx_array_data_2bef0440_12[] = {
	(int)0,(int)1,
};
static const int _hx_array_data_2bef0440_13[] = {
	(int)0,(int)1,
};
static const int _hx_array_data_2bef0440_14[] = {
	(int)0,(int)1,
};
static const int _hx_array_data_2bef0440_15[] = {
	(int)1,
};
static const int _hx_array_data_2bef0440_16[] = {
	(int)13,(int)14,(int)15,
};
static const int _hx_array_data_2bef0440_17[] = {
	(int)12,
};
static const int _hx_array_data_2bef0440_18[] = {
	(int)12,
};
static const int _hx_array_data_2bef0440_19[] = {
	(int)12,
};
static const int _hx_array_data_2bef0440_20[] = {
	(int)12,(int)17,
};
static const int _hx_array_data_2bef0440_21[] = {
	(int)12,(int)16,
};
static const int _hx_array_data_2bef0440_22[] = {
	(int)12,
};
static const int _hx_array_data_2bef0440_23[] = {
	(int)1,
};
static const int _hx_array_data_2bef0440_24[] = {
	(int)0,(int)1,
};
static const int _hx_array_data_2bef0440_25[] = {
	(int)0,(int)1,
};
static const int _hx_array_data_2bef0440_26[] = {
	(int)1,
};

void ModifierVariables_obj::__construct() { }

Dynamic ModifierVariables_obj::__CreateEmpty() { return new ModifierVariables_obj; }

void *ModifierVariables_obj::_hx_vtable = 0;

Dynamic ModifierVariables_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ModifierVariables_obj > _hx_result = new ModifierVariables_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ModifierVariables_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7b89b980;
}

 ::Dynamic ModifierVariables_obj::_modifiers;

void ModifierVariables_obj::updateModifiers(){
            	HX_STACKFRAME(&_hx_pos_bf588a6c8376b842_76_updateModifiers)
HXDLIN(  76)		::ModifierVariables_obj::_modifiers =  ::Dynamic(::hx::Anon_obj::Create(57)
            			->setFixed(0,HX_("Longsighted",e0,63,52,86), ::Dynamic(::MenuModifiers_obj::modifierList->__get(17)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(1,HX_("Mirror",5f,e6,3e,8a), ::Dynamic(::MenuModifiers_obj::modifierList->__get(25)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(2,HX_("InvisibleNotes",f4,a9,72,91), ::Dynamic(::MenuModifiers_obj::modifierList->__get(12)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(3,HX_("LivesSwitch",3b,85,f2,94), ::Dynamic(::MenuModifiers_obj::modifierList->__get(2)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(4,HX_("Offbeat",45,80,79,99), ::Dynamic(::MenuModifiers_obj::modifierList->__get(9)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(5,HX_("SnakeNotes",c1,99,79,9e), ::Dynamic(::MenuModifiers_obj::modifierList->__get(13)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(6,HX_("HitZones",94,5d,a6,a1), ::Dynamic(::MenuModifiers_obj::modifierList->__get(10)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(7,HX_("HPLossSwitch",5f,d1,fb,a9), ::Dynamic(::MenuModifiers_obj::modifierList->__get(5)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(8,HX_("HitZonesSwitch",a8,82,c0,b2), ::Dynamic(::MenuModifiers_obj::modifierList->__get(10)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(9,HX_("ShortsightedSwitch",34,6f,61,b9), ::Dynamic(::MenuModifiers_obj::modifierList->__get(16)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(10,HX_("SeasickSwitch",81,01,b6,c2), ::Dynamic(::MenuModifiers_obj::modifierList->__get(23)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(11,HX_("Stretch",e5,65,a4,c3), ::Dynamic(::MenuModifiers_obj::modifierList->__get(21)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(12,HX_("PaparazziSwitch",ec,03,c3,d0), ::Dynamic(::MenuModifiers_obj::modifierList->__get(31)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(13,HX_("HyperNotesSwitch",29,3a,0a,db), ::Dynamic(::MenuModifiers_obj::modifierList->__get(19)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(14,HX_("Freeze",77,fe,b8,e3), ::Dynamic(::MenuModifiers_obj::modifierList->__get(30)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(15,HX_("Fright",d6,4d,5f,e6), ::Dynamic(::MenuModifiers_obj::modifierList->__get(29)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(16,HX_("SnakeNotesSwitch",95,9e,ee,e6), ::Dynamic(::MenuModifiers_obj::modifierList->__get(13)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(17,HX_("BrightnessSwitch",c5,da,a7,e9), ::Dynamic(::MenuModifiers_obj::modifierList->__get(3)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(18,HX_("Camera",c5,ba,20,ec), ::Dynamic(::MenuModifiers_obj::modifierList->__get(26)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(19,HX_("HyperNotes",55,8e,bd,fe), ::Dynamic(::MenuModifiers_obj::modifierList->__get(19)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(20,HX_("DrunkNotes",9d,b0,b7,00), ::Dynamic(::MenuModifiers_obj::modifierList->__get(14)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(21,HX_("Seasick",ad,c3,b2,03), ::Dynamic(::MenuModifiers_obj::modifierList->__get(23)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(22,HX_("Earthquake",2d,bc,c0,04), ::Dynamic(::MenuModifiers_obj::modifierList->__get(27)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(23,HX_("Lives",e7,5f,35,08), ::Dynamic(::MenuModifiers_obj::modifierList->__get(2)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(24,HX_("HPGain",a7,7f,f8,08), ::Dynamic(::MenuModifiers_obj::modifierList->__get(4)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(25,HX_("HPLoss",0b,39,51,0c), ::Dynamic(::MenuModifiers_obj::modifierList->__get(5)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(26,HX_("FreezeSwitch",cb,6f,13,18), ::Dynamic(::MenuModifiers_obj::modifierList->__get(30)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(27,HX_("FlippedNotes",bf,7c,08,1d), ::Dynamic(::MenuModifiers_obj::modifierList->__get(18)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(28,HX_("DrunkNotesSwitch",71,42,53,20), ::Dynamic(::MenuModifiers_obj::modifierList->__get(14)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(29,HX_("EarthquakeSwitch",01,5a,49,21), ::Dynamic(::MenuModifiers_obj::modifierList->__get(27)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(30,HX_("Shortsighted",20,19,0c,23), ::Dynamic(::MenuModifiers_obj::modifierList->__get(16)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(31,HX_("FrightSwitch",6a,10,56,29), ::Dynamic(::MenuModifiers_obj::modifierList->__get(29)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(32,HX_("EelNotesSwitch",89,94,f6,2c), ::Dynamic(::MenuModifiers_obj::modifierList->__get(20)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(33,HX_("AccelNotesSwitch",2d,92,cf,2d), ::Dynamic(::MenuModifiers_obj::modifierList->__get(15)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(34,HX_("Enigma",bb,a3,69,32), ::Dynamic(::MenuModifiers_obj::modifierList->__get(7)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(35,HX_("Love",92,d8,90,32), ::Dynamic(::MenuModifiers_obj::modifierList->__get(28)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(36,HX_("UpsideDown",14,87,be,32), ::Dynamic(::MenuModifiers_obj::modifierList->__get(24)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(37,HX_("EelNotes",b5,e0,13,34), ::Dynamic(::MenuModifiers_obj::modifierList->__get(20)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(38,HX_("Vibe",d6,5b,28,39), ::Dynamic(::MenuModifiers_obj::modifierList->__get(8)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(39,HX_("LongsightedSwitch",f4,49,94,39), ::Dynamic(::MenuModifiers_obj::modifierList->__get(17)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(40,HX_("StretchSwitch",b9,1d,3f,3b), ::Dynamic(::MenuModifiers_obj::modifierList->__get(21)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(41,HX_("NoteSpeedSwitch",e9,bd,d7,44), ::Dynamic(::MenuModifiers_obj::modifierList->__get(11)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(42,HX_("Perfect",ed,6c,27,48), ::Dynamic(::MenuModifiers_obj::modifierList->__get(1)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(43,HX_("LoveSwitch",26,50,0e,4c), ::Dynamic(::MenuModifiers_obj::modifierList->__get(28)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(44,HX_("AccelNotes",59,4b,41,4e), ::Dynamic(::MenuModifiers_obj::modifierList->__get(15)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(45,HX_("HPGainSwitch",fb,f4,6f,53), ::Dynamic(::MenuModifiers_obj::modifierList->__get(4)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(46,HX_("CameraSwitch",99,5a,7a,56), ::Dynamic(::MenuModifiers_obj::modifierList->__get(26)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(47,HX_("StartHealth",7e,1e,1f,59), ::Dynamic(::MenuModifiers_obj::modifierList->__get(6)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(48,HX_("Brightness",f1,91,22,5c), ::Dynamic(::MenuModifiers_obj::modifierList->__get(3)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(49,HX_("Widen",db,18,90,5d), ::Dynamic(::MenuModifiers_obj::modifierList->__get(22)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(50,HX_("NoteSpeed",15,c2,c9,60), ::Dynamic(::MenuModifiers_obj::modifierList->__get(11)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(51,HX_("OffbeatSwitch",19,40,f0,64), ::Dynamic(::MenuModifiers_obj::modifierList->__get(9)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(52,HX_("VibeSwitch",6a,9e,5d,65), ::Dynamic(::MenuModifiers_obj::modifierList->__get(8)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(53,HX_("StartHealthSwitch",12,cf,e7,6f), ::Dynamic(::MenuModifiers_obj::modifierList->__get(6)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(54,HX_("Paparazzi",d8,d3,b8,75), ::Dynamic(::MenuModifiers_obj::modifierList->__get(31)->__Field(HX_("curValue",d1,79,66,79),::hx::paccDynamic)))
            			->setFixed(55,HX_("WidenSwitch",2f,6d,9c,79), ::Dynamic(::MenuModifiers_obj::modifierList->__get(22)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)))
            			->setFixed(56,HX_("Practice",db,bc,98,7a), ::Dynamic(::MenuModifiers_obj::modifierList->__get(0)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ModifierVariables_obj,updateModifiers,(void))

void ModifierVariables_obj::saveCurrent(){
            	HX_STACKFRAME(&_hx_pos_bf588a6c8376b842_169_saveCurrent)
HXLINE( 171)		if (!(::sys::FileSystem_obj::isDirectory(HX_("presets/modifiers",61,1c,9e,92)))) {
HXLINE( 172)			::sys::FileSystem_obj::createDirectory(HX_("presets/modifiers",61,1c,9e,92));
            		}
HXLINE( 174)		 ::Dynamic replacer = null();
HXDLIN( 174)		::String space = null();
HXDLIN( 174)		::sys::io::File_obj::saveContent(HX_("presets/modifiers/current",4b,75,b9,01),::haxe::format::JsonPrinter_obj::print(::ModifierVariables_obj::_modifiers,replacer,space));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ModifierVariables_obj,saveCurrent,(void))

void ModifierVariables_obj::savePreset(::String input){
            	HX_STACKFRAME(&_hx_pos_bf588a6c8376b842_179_savePreset)
HXDLIN( 179)		 ::Dynamic replacer = null();
HXDLIN( 179)		::String space = null();
HXDLIN( 179)		::sys::io::File_obj::saveContent((HX_("presets/modifiers/",ae,b8,ba,b7) + input),::haxe::format::JsonPrinter_obj::print(::ModifierVariables_obj::_modifiers,replacer,space));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ModifierVariables_obj,savePreset,(void))

void ModifierVariables_obj::loadPreset(::String input){
            	HX_GC_STACKFRAME(&_hx_pos_bf588a6c8376b842_183_loadPreset)
HXLINE( 184)		::String data = ::sys::io::File_obj::getContent((HX_("presets/modifiers/",ae,b8,ba,b7) + input));
HXLINE( 185)		::ModifierVariables_obj::_modifiers =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
HXLINE( 187)		::ModifierVariables_obj::replaceValues();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ModifierVariables_obj,loadPreset,(void))

void ModifierVariables_obj::loadCurrent(){
            	HX_GC_STACKFRAME(&_hx_pos_bf588a6c8376b842_191_loadCurrent)
HXLINE( 192)		if (::sys::FileSystem_obj::exists(HX_("presets/modifiers/current",4b,75,b9,01))) {
HXLINE( 194)			::String data = ::sys::io::File_obj::getContent(HX_("presets/modifiers/current",4b,75,b9,01));
HXLINE( 195)			::ModifierVariables_obj::_modifiers =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
            		}
HXLINE( 198)		::ModifierVariables_obj::replaceValues();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ModifierVariables_obj,loadCurrent,(void))

void ModifierVariables_obj::replaceValues(){
            	HX_STACKFRAME(&_hx_pos_bf588a6c8376b842_202_replaceValues)
HXLINE( 203)		::MenuModifiers_obj::modifierList->__get(0)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("Practice",db,bc,98,7a),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 205)		::MenuModifiers_obj::modifierList->__get(1)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("Perfect",ed,6c,27,48),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 207)		::MenuModifiers_obj::modifierList->__get(2)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Lives",e7,5f,35,08),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 208)		::MenuModifiers_obj::modifierList->__get(2)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("LivesSwitch",3b,85,f2,94),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 210)		::MenuModifiers_obj::modifierList->__get(3)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Brightness",f1,91,22,5c),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 211)		::MenuModifiers_obj::modifierList->__get(3)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("BrightnessSwitch",c5,da,a7,e9),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 213)		::MenuModifiers_obj::modifierList->__get(4)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("HPGain",a7,7f,f8,08),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 214)		::MenuModifiers_obj::modifierList->__get(4)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("HPGainSwitch",fb,f4,6f,53),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 216)		::MenuModifiers_obj::modifierList->__get(5)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("HPLoss",0b,39,51,0c),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 217)		::MenuModifiers_obj::modifierList->__get(5)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("HPLossSwitch",5f,d1,fb,a9),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 219)		::MenuModifiers_obj::modifierList->__get(6)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("StartHealth",7e,1e,1f,59),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 220)		::MenuModifiers_obj::modifierList->__get(6)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("StartHealthSwitch",12,cf,e7,6f),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 222)		::MenuModifiers_obj::modifierList->__get(7)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("Enigma",bb,a3,69,32),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 224)		::MenuModifiers_obj::modifierList->__get(8)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Vibe",d6,5b,28,39),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 225)		::MenuModifiers_obj::modifierList->__get(8)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("VibeSwitch",6a,9e,5d,65),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 227)		::MenuModifiers_obj::modifierList->__get(9)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Offbeat",45,80,79,99),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 228)		::MenuModifiers_obj::modifierList->__get(9)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("OffbeatSwitch",19,40,f0,64),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 230)		::MenuModifiers_obj::modifierList->__get(10)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("HitZones",94,5d,a6,a1),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 231)		::MenuModifiers_obj::modifierList->__get(10)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("HitZonesSwitch",a8,82,c0,b2),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 233)		::MenuModifiers_obj::modifierList->__get(11)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("NoteSpeed",15,c2,c9,60),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 234)		::MenuModifiers_obj::modifierList->__get(11)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("NoteSpeedSwitch",e9,bd,d7,44),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 236)		::MenuModifiers_obj::modifierList->__get(12)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("InvisibleNotes",f4,a9,72,91),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 238)		::MenuModifiers_obj::modifierList->__get(13)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("SnakeNotes",c1,99,79,9e),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 239)		::MenuModifiers_obj::modifierList->__get(13)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("SnakeNotesSwitch",95,9e,ee,e6),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 241)		::MenuModifiers_obj::modifierList->__get(14)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("DrunkNotes",9d,b0,b7,00),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 242)		::MenuModifiers_obj::modifierList->__get(14)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("DrunkNotesSwitch",71,42,53,20),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 244)		::MenuModifiers_obj::modifierList->__get(15)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("AccelNotes",59,4b,41,4e),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 245)		::MenuModifiers_obj::modifierList->__get(15)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("AccelNotesSwitch",2d,92,cf,2d),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 247)		::MenuModifiers_obj::modifierList->__get(16)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Shortsighted",20,19,0c,23),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 248)		::MenuModifiers_obj::modifierList->__get(16)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("ShortsightedSwitch",34,6f,61,b9),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 250)		::MenuModifiers_obj::modifierList->__get(17)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Longsighted",e0,63,52,86),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 251)		::MenuModifiers_obj::modifierList->__get(17)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("LongsightedSwitch",f4,49,94,39),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 253)		::MenuModifiers_obj::modifierList->__get(18)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("FlippedNotes",bf,7c,08,1d),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 255)		::MenuModifiers_obj::modifierList->__get(19)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("HyperNotes",55,8e,bd,fe),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 256)		::MenuModifiers_obj::modifierList->__get(19)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("HyperNotesSwitch",29,3a,0a,db),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 258)		::MenuModifiers_obj::modifierList->__get(20)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("EelNotes",b5,e0,13,34),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 259)		::MenuModifiers_obj::modifierList->__get(20)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("EelNotesSwitch",89,94,f6,2c),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 261)		::MenuModifiers_obj::modifierList->__get(21)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Stretch",e5,65,a4,c3),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 262)		::MenuModifiers_obj::modifierList->__get(21)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("StretchSwitch",b9,1d,3f,3b),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 264)		::MenuModifiers_obj::modifierList->__get(22)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Widen",db,18,90,5d),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 265)		::MenuModifiers_obj::modifierList->__get(22)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("WidenSwitch",2f,6d,9c,79),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 267)		::MenuModifiers_obj::modifierList->__get(23)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Seasick",ad,c3,b2,03),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 268)		::MenuModifiers_obj::modifierList->__get(23)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("SeasickSwitch",81,01,b6,c2),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 270)		::MenuModifiers_obj::modifierList->__get(24)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("UpsideDown",14,87,be,32),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 272)		::MenuModifiers_obj::modifierList->__get(25)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("Mirror",5f,e6,3e,8a),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 274)		::MenuModifiers_obj::modifierList->__get(26)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Camera",c5,ba,20,ec),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 275)		::MenuModifiers_obj::modifierList->__get(26)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("CameraSwitch",99,5a,7a,56),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 277)		::MenuModifiers_obj::modifierList->__get(27)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Earthquake",2d,bc,c0,04),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 278)		::MenuModifiers_obj::modifierList->__get(27)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("EarthquakeSwitch",01,5a,49,21),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 280)		::MenuModifiers_obj::modifierList->__get(28)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Love",92,d8,90,32),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 281)		::MenuModifiers_obj::modifierList->__get(28)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("LoveSwitch",26,50,0e,4c),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 283)		::MenuModifiers_obj::modifierList->__get(29)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Fright",d6,4d,5f,e6),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 284)		::MenuModifiers_obj::modifierList->__get(29)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("FrightSwitch",6a,10,56,29),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 286)		::MenuModifiers_obj::modifierList->__get(30)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Freeze",77,fe,b8,e3),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 287)		::MenuModifiers_obj::modifierList->__get(30)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("FreezeSwitch",cb,6f,13,18),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 289)		::MenuModifiers_obj::modifierList->__get(31)->__SetField(HX_("curValue",d1,79,66,79),::ModifierVariables_obj::_modifiers->__Field(HX_("Paparazzi",d8,d3,b8,75),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 290)		::MenuModifiers_obj::modifierList->__get(31)->__SetField(HX_("value",71,7f,b8,31),::ModifierVariables_obj::_modifiers->__Field(HX_("PaparazziSwitch",ec,03,c3,d0),::hx::paccDynamic),::hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ModifierVariables_obj,replaceValues,(void))

void ModifierVariables_obj::nullify(){
            	HX_STACKFRAME(&_hx_pos_bf588a6c8376b842_295_nullify)
HXDLIN( 295)		int _g = 0;
HXDLIN( 295)		::Array< ::Dynamic> _g1 = ::MenuModifiers_obj::modifierList;
HXDLIN( 295)		while((_g < _g1->length)){
HXDLIN( 295)			 ::Dynamic i = _g1->__get(_g);
HXDLIN( 295)			_g = (_g + 1);
HXLINE( 296)			i->__SetField(HX_("value",71,7f,b8,31),false,::hx::paccDynamic);
HXLINE( 298)			if (::hx::IsEq( i->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic),HX_("number",c9,86,7a,a1) )) {
HXLINE( 299)				i->__SetField(HX_("curValue",d1,79,66,79),i->__Field(HX_("offAt",42,c6,33,2d),::hx::paccDynamic),::hx::paccDynamic);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ModifierVariables_obj,nullify,(void))

void ModifierVariables_obj::modifierSetup(){
            	HX_STACKFRAME(&_hx_pos_bf588a6c8376b842_305_modifierSetup)
HXLINE( 306)		::MenuModifiers_obj::modifierList = ::Array_obj< ::Dynamic>::__new(32)->init(0, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("times",c6,bf,35,10))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(0) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),( (Float)(0) ))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("",00,00,00,00))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Practice",db,bc,98,7a))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Baby mode initiate. Practice your songs however you want, you won't be dying anytime soon. Sets score rate all the way to 0. Can be switched on or off.",c1,3f,80,5d))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("switch",f4,49,79,c5))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(0) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_9,7))))->init(1, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("times",c6,bf,35,10))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(0) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),( (Float)(3) ))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("",00,00,00,00))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Perfect",ed,6c,27,48))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("You have quite a thing to deal with today. Miss only once and it's game over for you. Multiplies score by 3. Can be switched on or off.",72,21,4a,79))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("switch",f4,49,79,c5))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(0) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_10,9))))->init(2, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("division",2d,5d,85,55))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(15) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.6))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("\nHEART(S)",02,c9,99,f4))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(1) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(1) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Lives",e7,5f,35,08))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Set how many lives you can give yourself to save your butt from death itself. The higher, the more lives you have. Score divides by 0.6 per amount of hearts. Can be changed numerically.",c2,86,c1,88))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(1) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(1) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_11,1))))->init(3, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(100) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),true)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.005))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nBRIGHTNESS",56,0a,d6,e0))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(-100) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Brightness",f1,91,22,5c))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Did you do anything to the lights? Set how bright or dark the game is. Positive values are brighter, negative - darker. Adds 0.025 to the score rate with 5% or -5% of brightness. Can be changed numerically.",c1,dd,3b,94))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(5) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::__new(0))))->init(4, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),true)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(10) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)-0.2))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("x\nHEALTH GAIN",31,5b,4a,eb))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(1) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("HP Gain",b7,f0,a0,4a))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Nice health boost, my guy. Set how fast you can regain your health. The highter, the faster you can regenerate. You can even not do that at all. Subtracts 0.1 to the score rate with each amount. Can be changed numerically.",3f,71,c6,c9))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),((Float)0.5))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(1) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_12,2))))->init(5, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),true)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(10) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.2))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("x\nHEALTH LOSS",95,14,a3,ee))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(1) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("HP Loss",1b,aa,f9,4d))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Why are you bruising so hard? Set how fast you can lose your health, or not lose any at all. The higher, the faster you can lose health. Adds 0.1 to the score rate with each amount. Can be changed numerically.",d8,58,cb,59))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),((Float)0.5))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(1) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_13,2))))->init(6, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(100) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)-0.0025))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nMORE START\nHEALTH",aa,29,93,49))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(-100) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Start Health",da,7c,b6,d0))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("How much slapping did you get before going here? Set how high your heal should be at the start. The higher, the higher. Adds 0.0125 to the score rate with each amount. Can be changed numerically.",09,4f,ec,02))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(5) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_14,2))))->init(7, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(0) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.3))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("",00,00,00,00))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Enigma",bb,a3,69,32))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Your vision is blind, woooow. You won't be able to see your mistakes. Set if you want your health to be invisible. Adds 0.3 to the score rate. Can be switched on or off.",23,84,44,b4))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("switch",f4,49,79,c5))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(0) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_15,1))))->init(8, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),true)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),((Float)1.2))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)-0.9))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("x\nTHE VIBE",77,90,6f,13))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),((Float)0.8))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(1) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Vibe",d6,5b,28,39))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Are you up for a vibin' time? Set ifyou want to listen to speedy hifi- classic, or vibin' lo-fi. 1 is classic, 1.2 is lofi and 0.8 is hifi music. Can be changed numberically.",8a,dc,0d,c5))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),((Float)0.2))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(1) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::__new(0))))->init(9, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(1000) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),true)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.001))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nMORE NOTE\nOFFSET",a5,6a,96,f8))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(-1000) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Offbeat",45,80,79,99))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Cut the music! CUT!! Set how late or early should notes go. Higher is later. It affects vocals as well. Adds 0.1 to the score rate with each amount, even on negative aomunts. Can be changed numerically. WARNING: YOU CAN BLUE BALL IF YOU GET TOO LOW OF A NEGATIVE VALUE.",ec,cf,a5,82))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(10) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::__new(0))))->init(10, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(30) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)-0.08))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("\nMORE SAFE\nFRAMES",82,c8,7c,13))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(-8) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Hit Zones",fa,66,7e,88))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("We're expecting perfection from you today. Choose how strict or lean you have to hit notes at. The higher, the leaner. The lowest negative value is very strict. Subtracts 0.8 to the multiplier with each amount. Can be changed numerically.",e1,40,5a,6e))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(1) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::__new(0))))->init(11, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(400) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.0125))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nMORE NOTE\nSPEED",95,b0,48,6c))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(-90) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Note Speed",d9,30,33,40))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("How speed are you gonna be? Change how fast notes have to go. The higher, the faster, and works on negatives. Adds 0.025 to the multiplier with each amount. Can be changed numerically. WARNING: YOU CAN BLUE BALL IF YOU GET TOO HIGH OF A VALUE.",c5,8c,9f,d4))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(2) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::__new(0))))->init(12, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(0) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)2.5))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("",00,00,00,00))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Invisible Notes",ce,92,fb,4a))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Today we're relying on memory. Switch notes visible or invisible. Adds 2.5 to the score rate. Can be switched on or off.",f2,1a,ec,40))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("switch",f4,49,79,c5))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(0) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_16,3))))->init(13, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(300) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.003))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nOF SNAKE\nMOVES",b4,f4,e5,68))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Snake Notes",61,76,06,a4))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Ayyyy. I guess we're becoming snakes today. Set how much should notes swing left and right. The higher, the more they swing. Adds 0.015 to the score rate with each amount. Can be changed numerically.",2f,26,cc,59))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(5) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_17,1))))->init(14, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(300) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.003))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nOF DRUNK\nMOVES",58,de,fb,fc))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Drunk Notes",05,60,1c,38))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Ohhh. What the funk did you drink? Set how much notes should swing up and down. The higher, the more they swing. Adds 0.015 to the score rate with each amount. Can be changed numerically.",6b,b5,3e,0a))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(5) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_18,1))))->init(15, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(300) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.0045))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nOF SPEED\nACCELERATION",87,b4,15,8a))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Accelerating Notes",fb,fa,1b,d4))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("How do you wanna drive? Set how fast should notes accelerate from 0 to 100, either real quick or slow. The higher, the faster. Adds 0.0225 to the score rate with each amount. Can be changed numerically. WARNING: DANGEROUS TO USE AT HIGH VALUES.",1e,b4,24,45))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(5) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_19,1))))->init(16, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(100) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.0045))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nOF SCREEN\nHEIGHT",01,fb,34,db))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Shortsighted",20,19,0c,23))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Just go to an oculist. Change how far you can see notes in the first place. The higher, they appear from longer distances. Adds 0.009 to the score rate with each amount. Can be changed numerically.",66,01,17,87))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(2) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_20,2))))->init(17, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(100) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.0045))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nOF SCREEN\nHEIGHT",01,fb,34,db))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Longsighted",e0,63,52,86))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("You need some glasses. Change the distance of when notes can disappear. The higher, the notes disappear from a shorter distance. Adds 0.009 to the score rate with each amount. Can be changed numerically.",94,b7,a4,1f))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(2) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_21,2))))->init(18, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(0) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.5))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("",00,00,00,00))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Flipped Notes",a3,31,7e,e2))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Oooh no. All around your head. Flip how your notes look. Left is right, up is down. Adds 0.5 to the score rate. Can be switched on or off.",71,0e,64,ef))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("switch",f4,49,79,c5))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(0) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_22,1))))->init(19, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(300) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.009))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nOF SUGAR\nRUSH",d0,a7,a6,4f))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Hyper Notes",4d,83,38,7f))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("...How much sugar did you eat? Come on... Give your notes a bit of sugar rush and shake them as much as possible. The higher, the more shaking. Adds 0.045 to the score rate with each amount. Can be changed numerically. WARNING: REALLY DIFFICULT AT HIGH VALUES.",4f,ae,87,e5))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(5) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::__new(0))))->init(20, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("times",c6,bf,35,10))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(100) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.01))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nOF EXTRA\nLENGTH",04,fe,39,c8))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Eel Notes",ed,44,6a,f5))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Too many eels. Choose how long you want notes to be. The higher, the longer. Can be changed numerically. WARNING: TOO MUCH MIGHT CAUSE NOTES TO NOT RENDER PROPERLY AT POINTS BECAUSE OF THERE BEING TOO MANY OF THEM. USE AT YOUR RISK. TIP: You can hold to possibly win.",e7,60,b3,3f))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(10) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_23,1))))->init(21, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(400) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.001))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nMORE\nSTRETCHED\n",76,ae,a7,21))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Stretch Up",d6,29,df,74))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Tall notes are so funny, hahaha... *sarcasm* How tall notes should be? The higher the taller. Add 0.01 to the score multiplier. Can be changed numerically.",7e,13,25,00))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(5) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::__new(0))))->init(22, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(400) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.001))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nMORE\nWIDE",83,e8,76,20))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Widen Up",a0,34,69,ea))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Thicc notes are so funny, hahaha... *sarcasm* How wide notes should be? The higher the wider. Add 0.01 to the score multiplier. Can be changed numerically.",e5,bf,e6,fe))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(5) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::__new(0))))->init(23, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(10000) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.005))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nSHIP FEEL",65,25,fb,10))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Seasick",ad,c3,b2,03))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Ship feel go swoosh and barf. How much do you want the camera to swing like a ship? The higher, the more they swing. Adds 0.05 to the score rate. Can be changed numerically.",ff,4e,fe,b8))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(10) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::__new(0))))->init(24, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(0) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.2))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("",00,00,00,00))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Upside Down",d0,91,18,5d))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Flip everything upside down. Not zero-gravity. Adds 0.2 to the score rate. Can be switched on or off.",a5,65,1d,c1))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("switch",f4,49,79,c5))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(0) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::__new(0))))->init(25, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(0) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.2))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("",00,00,00,00))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Mirror",5f,e6,3e,8a))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Mirror your own screen. Fun for everyone. Adds 0.2 to the score rate. Can be switched on or off.",ae,45,cd,9d))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("switch",f4,49,79,c5))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(0) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::__new(0))))->init(26, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(10000) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.005))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nSPIN",87,d0,4f,c4))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Camera Spin",1d,b9,4f,e9))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Wooooah. My head's spinning. Choose how much you can the cameras to spin around. The higher, the more they spin. Adds 0.05 to the score rate. Can be changed numerically.",5b,55,ef,66))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(10) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::__new(0))))->init(27, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(500) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.006))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nQUAKING",0f,3f,53,7c))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Earthquake",2d,bc,c0,04))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("This is some tokyo nonsense. Set how big of an earthquake you want to play with. The higher, the bigger. Adds 0.03 to the score rate. Can be changed numerically.",9e,f3,73,6e))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(5) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::__new(0))))->init(28, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(500) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)-0.006))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nMORE LOVE",f8,ef,06,c4))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Supportive Love",c9,a0,c4,47))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Girlfriend loves you very much. How much health do you want to regenerate gradually? The higher, the more love, support and all of that. Subtracts 0.03 to the score rate. Can be changed numerically.",24,86,f7,5d))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(5) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_24,2))))->init(29, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(500) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.006))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("%\nPOISON\nDOSE",ba,33,21,e9))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Poison Fright",ce,4d,3d,ae))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Please don't be scared. How much health do you want to drain gradually? The higher, the more poison, fear and all of that. Adds 0.03 to the score rate. Can be changed numerically. WARNING: CAN BLUE BALL YOU IF YOU SET IT TOO HIGH.",c7,47,fa,94))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(5) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_25,2))))->init(30, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(30) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.05))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("\nLESS\nMISSES",f1,2b,e2,3f))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Stagefright",d4,7e,62,f4))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Intimidation makes you afraid. Set how many misses you need to have until you freeze. YOU ARE GIVEN 30 MISSES BY 1 LESS MISS. The higher, the less misses you need. Adds 0.05 to the multiplier with each amount. Can be changed numerically.",71,87,e8,81))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(1) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::fromData( _hx_array_data_2bef0440_26,1))))->init(31, ::Dynamic(::hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("realmulti",5b,4a,ea,80),( (Float)(0) ))
            			->setFixed(1,HX_("revAtLow",fe,c0,7d,c8),false)
            			->setFixed(2,HX_("equation",8c,bb,7c,da),HX_("",00,00,00,00))
            			->setFixed(3,HX_("maxValue",2d,d2,d5,db),( (Float)(100) ))
            			->setFixed(4,HX_("abs",72,f0,49,00),false)
            			->setFixed(5,HX_("multi",79,8a,55,10),((Float)0.004))
            			->setFixed(6,HX_("string",d1,28,30,11),HX_("\nCAMERAMA(E)N",25,69,d6,8a))
            			->setFixed(7,HX_("minValue",7f,ec,ef,28),( (Float)(0) ))
            			->setFixed(8,HX_("offAt",42,c6,33,2d),( (Float)(0) ))
            			->setFixed(9,HX_("value",71,7f,b8,31),false)
            			->setFixed(10,HX_("name",4b,72,ff,48),HX_("Paparazzi",d8,d3,b8,75))
            			->setFixed(11,HX_("explanation",59,59,4d,49),HX_("Oh how popular you are! Change how many cameramen you want on the scene taking pictures. Adds 0.004 to the score rate. Can be changed numerically.",5c,ca,61,d4))
            			->setFixed(12,HX_("type",ba,f2,08,4d),HX_("number",c9,86,7a,a1))
            			->setFixed(13,HX_("addChange",71,c6,96,6f),( (Float)(1) ))
            			->setFixed(14,HX_("curValue",d1,79,66,79),( (Float)(0) ))
            			->setFixed(15,HX_("conflicts",e1,7d,d4,7b),::Array_obj< int >::__new(0))));
HXLINE( 341)		::ModifierVariables_obj::updateModifiers();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ModifierVariables_obj,modifierSetup,(void))


ModifierVariables_obj::ModifierVariables_obj()
{
}

bool ModifierVariables_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"nullify") ) { outValue = nullify_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_modifiers") ) { outValue = ( _modifiers ); return true; }
		if (HX_FIELD_EQ(inName,"savePreset") ) { outValue = savePreset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadPreset") ) { outValue = loadPreset_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"saveCurrent") ) { outValue = saveCurrent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadCurrent") ) { outValue = loadCurrent_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"replaceValues") ) { outValue = replaceValues_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modifierSetup") ) { outValue = modifierSetup_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateModifiers") ) { outValue = updateModifiers_dyn(); return true; }
	}
	return false;
}

bool ModifierVariables_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_modifiers") ) { _modifiers=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ModifierVariables_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ModifierVariables_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &ModifierVariables_obj::_modifiers,HX_("_modifiers",fd,8c,ba,33)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void ModifierVariables_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ModifierVariables_obj::_modifiers,"_modifiers");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ModifierVariables_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ModifierVariables_obj::_modifiers,"_modifiers");
};

#endif

::hx::Class ModifierVariables_obj::__mClass;

static ::String ModifierVariables_obj_sStaticFields[] = {
	HX_("_modifiers",fd,8c,ba,33),
	HX_("updateModifiers",f3,e1,a2,27),
	HX_("saveCurrent",7c,ca,83,25),
	HX_("savePreset",7c,3e,7a,f7),
	HX_("loadPreset",25,e2,eb,63),
	HX_("loadCurrent",b3,5a,81,9c),
	HX_("replaceValues",36,df,35,79),
	HX_("nullify",d5,f5,f3,1c),
	HX_("modifierSetup",a6,c7,47,f6),
	::String(null())
};

void ModifierVariables_obj::__register()
{
	ModifierVariables_obj _hx_dummy;
	ModifierVariables_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ModifierVariables",40,04,ef,2b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ModifierVariables_obj::__GetStatic;
	__mClass->mSetStaticField = &ModifierVariables_obj::__SetStatic;
	__mClass->mMarkFunc = ModifierVariables_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ModifierVariables_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ModifierVariables_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ModifierVariables_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ModifierVariables_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ModifierVariables_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

